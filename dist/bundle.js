/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={9078:(e,t,i)=>{"use strict";var n=i(159),r=i(983);function a(e){if(!(this instanceof a))return new a(e);this.headers=e.headers,this.negotiator=new n(e)}function o(e){return-1===e.indexOf("/")?r.lookup(e):e}function s(e){return"string"==typeof e}e.exports=a,a.prototype.type=a.prototype.types=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}if(!t||0===t.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return t[0];var n=t.map(o),r=this.negotiator.mediaTypes(n.filter(s)),a=r[0];return!!a&&t[n.indexOf(a)]},a.prototype.encoding=a.prototype.encodings=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.encodings(t)[0]||!1:this.negotiator.encodings()},a.prototype.charset=a.prototype.charsets=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.charsets(t)[0]||!1:this.negotiator.charsets()},a.prototype.lang=a.prototype.langs=a.prototype.language=a.prototype.languages=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.languages(t)[0]||!1:this.negotiator.languages()}},2521:e=>{"use strict";function t(e,i,n){for(var r=0;r<e.length;r++){var a=e[r];n>0&&Array.isArray(a)?t(a,i,n-1):i.push(a)}return i}function i(e,t){for(var n=0;n<e.length;n++){var r=e[n];Array.isArray(r)?i(r,t):t.push(r)}return t}e.exports=function(e,n){return null==n?i(e,[]):t(e,[],n)}},3407:e=>{e.exports={newInvalidAsn1Error:function(e){var t=new Error;return t.name="InvalidAsn1Error",t.message=e||"",t}}},279:(e,t,i)=>{var n=i(3407),r=i(4478),a=i(4578),o=i(3609);for(var s in e.exports={Reader:a,Writer:o},r)r.hasOwnProperty(s)&&(e.exports[s]=r[s]);for(var c in n)n.hasOwnProperty(c)&&(e.exports[c]=n[c])},4578:(e,t,i)=>{var n=i(2357),r=i(2399).Buffer,a=i(4478),o=i(3407).newInvalidAsn1Error;function s(e){if(!e||!r.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(s.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(s.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(s.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),s.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var t=255&this._buf[this._offset];return e||(this._offset+=1),t},s.prototype.peek=function(){return this.readByte(!0)},s.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var t=255&this._buf[e++];if(null===t)return null;if(128==(128&t)){if(0==(t&=127))throw o("Indefinite length not supported");if(t>4)throw o("encoding too long");if(this._size-e<t)return null;this._len=0;for(var i=0;i<t;i++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=t;return e},s.prototype.readSequence=function(e){var t=this.peek();if(null===t)return null;if(void 0!==e&&e!==t)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var i=this.readLength(this._offset+1);return null===i?null:(this._offset=i,t)},s.prototype.readInt=function(){return this._readTag(a.Integer)},s.prototype.readBoolean=function(){return 0!==this._readTag(a.Boolean)},s.prototype.readEnumeration=function(){return this._readTag(a.Enumeration)},s.prototype.readString=function(e,t){e||(e=a.OctetString);var i=this.peek();if(null===i)return null;if(i!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+i.toString(16));var n=this.readLength(this._offset+1);if(null===n)return null;if(this.length>this._size-n)return null;if(this._offset=n,0===this.length)return t?r.alloc(0):"";var s=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,t?s:s.toString("utf8")},s.prototype.readOID=function(e){e||(e=a.OID);var t=this.readString(e,!0);if(null===t)return null;for(var i=[],n=0,r=0;r<t.length;r++){var o=255&t[r];n<<=7,n+=127&o,0==(128&o)&&(i.push(n),n=0)}return n=i.shift(),i.unshift(n%40),i.unshift(n/40>>0),i.join(".")},s.prototype._readTag=function(e){n.ok(void 0!==e);var t=this.peek();if(null===t)return null;if(t!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>4)throw o("Integer too long: "+this.length);if(this.length>this._size-i)return null;this._offset=i;for(var r=this._buf[this._offset],a=0,s=0;s<this.length;s++)a<<=8,a|=255&this._buf[this._offset++];return 128==(128&r)&&4!==s&&(a-=1<<8*s),a>>0},e.exports=s},4478:e=>{e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},3609:(e,t,i)=>{var n=i(2357),r=i(2399).Buffer,a=i(4478),o=i(3407).newInvalidAsn1Error,s={size:1024,growthFactor:8};function c(e){var t,i;t=s,i=e||{},n.ok(t),n.equal(typeof t,"object"),n.ok(i),n.equal(typeof i,"object"),Object.getOwnPropertyNames(t).forEach((function(e){if(!i[e]){var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(i,e,n)}})),e=i,this._buf=r.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(c.prototype,"buffer",{get:function(){if(this._seq.length)throw o(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),c.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},c.prototype.writeInt=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof t&&(t=a.Integer);for(var i=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&i>1;)i--,e<<=8;if(i>4)throw o("BER ints cannot be > 0xffffffff");for(this._ensure(2+i),this._buf[this._offset++]=t,this._buf[this._offset++]=i;i-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},c.prototype.writeNull=function(){this.writeByte(a.Null),this.writeByte(0)},c.prototype.writeEnumeration=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof t&&(t=a.Enumeration),this.writeInt(e,t)},c.prototype.writeBoolean=function(e,t){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof t&&(t=a.Boolean),this._ensure(3),this._buf[this._offset++]=t,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},c.prototype.writeString=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof t&&(t=a.OctetString);var i=r.byteLength(e);this.writeByte(t),this.writeLength(i),i&&(this._ensure(i),this._buf.write(e,this._offset),this._offset+=i)},c.prototype.writeBuffer=function(e,t){if("number"!=typeof t)throw new TypeError("tag must be a number");if(!r.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(t),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},c.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var t=this;e.forEach((function(e){t.writeString(e)}))},c.prototype.writeOID=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof t&&(t=a.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var i=e.split("."),n=[];n.push(40*parseInt(i[0],10)+parseInt(i[1],10)),i.slice(2).forEach((function(e){!function(e,t){t<128?e.push(t):t<16384?(e.push(t>>>7|128),e.push(127&t)):t<2097152?(e.push(t>>>14|128),e.push(255&(t>>>7|128)),e.push(127&t)):t<268435456?(e.push(t>>>21|128),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t)):(e.push(255&(t>>>28|128)),e.push(255&(t>>>21|128)),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t))}(n,parseInt(e,10))}));var r=this;this._ensure(2+n.length),this.writeByte(t),this.writeLength(n.length),n.forEach((function(e){r.writeByte(e)}))},c.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw o("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},c.prototype.startSequence=function(e){"number"!=typeof e&&(e=a.Sequence|a.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},c.prototype.endSequence=function(){var e=this._seq.pop(),t=e+3,i=this._offset-t;if(i<=127)this._shift(t,i,-2),this._buf[e]=i;else if(i<=255)this._shift(t,i,-1),this._buf[e]=129,this._buf[e+1]=i;else if(i<=65535)this._buf[e]=130,this._buf[e+1]=i>>8,this._buf[e+2]=i;else{if(!(i<=16777215))throw o("Sequence too long");this._shift(t,i,1),this._buf[e]=131,this._buf[e+1]=i>>16,this._buf[e+2]=i>>8,this._buf[e+3]=i}},c.prototype._shift=function(e,t,i){n.ok(void 0!==e),n.ok(void 0!==t),n.ok(i),this._buf.copy(this._buf,e+i,e,e+t),this._offset+=i},c.prototype._ensure=function(e){if(n.ok(e),this._size-this._offset<e){var t=this._size*this._options.growthFactor;t-this._offset<e&&(t+=e);var i=r.alloc(t);this._buf.copy(i,0,0,this._offset),this._buf=i,this._size=t}},e.exports=c},476:(e,t,i)=>{var n=i(279);e.exports={Ber:n,BerReader:n.Reader,BerWriter:n.Writer}},2703:(e,t,i)=>{"use strict";var n=i(780).lowlevel.crypto_hash,r=0,a=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function o(e,t,i){return(e[0][t[i+3]]+e[1][t[i+2]]^e[2][t[i+1]])+e[3][t[i]]}function s(e,t){var i,n=0;for(i=0;i<4;i++,r++)r>=t&&(r=0),n=n<<8|e[r];return n}function c(e,t,i){var n,r=new a,o=new Uint32Array(8),c=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(r.expandstate(t,64,e,64),n=0;n<64;n++)r.expand0state(t,64),r.expand0state(e,64);for(n=0;n<8;n++)o[n]=s(c,c.byteLength);for(n=0;n<64;n++)r.enc(o,o.byteLength/8);for(n=0;n<8;n++)i[4*n+3]=o[n]>>>24,i[4*n+2]=o[n]>>>16,i[4*n+1]=o[n]>>>8,i[4*n+0]=o[n]}a.prototype.encipher=function(e,t){void 0===t&&(t=new Uint8Array(e.buffer),0!==e.byteOffset&&(t=t.subarray(e.byteOffset))),e[0]^=this.P[0];for(var i=1;i<16;i+=2)e[1]^=o(this.S,t,0)^this.P[i],e[0]^=o(this.S,t,4)^this.P[i+1];var n=e[0];e[0]=e[1]^this.P[17],e[1]=n},a.prototype.decipher=function(e){var t=new Uint8Array(e.buffer);0!==e.byteOffset&&(t=t.subarray(e.byteOffset)),e[0]^=this.P[17];for(var i=16;i>0;i-=2)e[1]^=o(this.S,t,0)^this.P[i],e[0]^=o(this.S,t,4)^this.P[i-1];var n=e[0];e[0]=e[1]^this.P[0],e[1]=n},a.prototype.expand0state=function(e,t){var i,n,a=new Uint32Array(2),o=new Uint8Array(a.buffer);for(i=0,r=0;i<18;i++)this.P[i]^=s(e,t);for(r=0,i=0;i<18;i+=2)this.encipher(a,o),this.P[i]=a[0],this.P[i+1]=a[1];for(i=0;i<4;i++)for(n=0;n<256;n+=2)this.encipher(a,o),this.S[i][n]=a[0],this.S[i][n+1]=a[1]},a.prototype.expandstate=function(e,t,i,n){var a,o,c=new Uint32Array(2);for(a=0,r=0;a<18;a++)this.P[a]^=s(i,n);for(a=0,r=0;a<18;a+=2)c[0]^=s(e,t),c[1]^=s(e,t),this.encipher(c),this.P[a]=c[0],this.P[a+1]=c[1];for(a=0;a<4;a++)for(o=0;o<256;o+=2)c[0]^=s(e,t),c[1]^=s(e,t),this.encipher(c),this.S[a][o]=c[0],this.S[a][o+1]=c[1];r=0},a.prototype.enc=function(e,t){for(var i=0;i<t;i++)this.encipher(e.subarray(2*i))},a.prototype.dec=function(e,t){for(var i=0;i<t;i++)this.decipher(e.subarray(2*i))},e.exports={BLOCKS:8,HASHSIZE:32,hash:c,pbkdf:function(e,t,i,r,a,o,s){var p,u,l,f,d,h,m=new Uint8Array(64),v=new Uint8Array(64),g=new Uint8Array(32),b=new Uint8Array(32),y=new Uint8Array(r+4),x=o;if(s<1)return-1;if(0===t||0===r||0===o||o>g.byteLength*g.byteLength||r>1<<20)return-1;for(f=Math.floor((o+g.byteLength-1)/g.byteLength),l=Math.floor((o+f-1)/f),p=0;p<r;p++)y[p]=i[p];for(n(m,e,t),h=1;o>0;h++){for(y[r+0]=h>>>24,y[r+1]=h>>>16,y[r+2]=h>>>8,y[r+3]=h,n(v,y,r+4),c(m,v,b),p=g.byteLength;p--;)g[p]=b[p];for(p=1;p<s;p++)for(n(v,b,b.byteLength),c(m,v,b),u=0;u<g.byteLength;u++)g[u]^=b[u];for(l=Math.min(l,o),p=0;p<l&&!((d=p*f+(h-1))>=x);p++)a[d]=g[p];o-=p}return 0}}},46:(e,t,i)=>{"use strict";var n=i(412)("body-parser"),r=Object.create(null);function a(e){return function(){return function(e){var t=r[e];if(void 0!==t)return t;switch(e){case"json":t=i(6035);break;case"raw":t=i(187);break;case"text":t=i(6560);break;case"urlencoded":t=i(4861)}return r[e]=t}(e)}}t=e.exports=n.function((function(e){var i={};if(e)for(var n in e)"type"!==n&&(i[n]=e[n]);var r=t.urlencoded(i),a=t.json(i);return function(e,t,i){a(e,t,(function(n){if(n)return i(n);r(e,t,i)}))}}),"bodyParser: use individual json/urlencoded middlewares"),Object.defineProperty(t,"json",{configurable:!0,enumerable:!0,get:a("json")}),Object.defineProperty(t,"raw",{configurable:!0,enumerable:!0,get:a("raw")}),Object.defineProperty(t,"text",{configurable:!0,enumerable:!0,get:a("text")}),Object.defineProperty(t,"urlencoded",{configurable:!0,enumerable:!0,get:a("urlencoded")})},3211:(e,t,i)=>{"use strict";var n=i(9009),r=i(1045),a=i(4914),o=i(338),s=i(8761);e.exports=function(e,t,i,c,p,u){var l,f,d=u;e._body=!0;var h=null!==d.encoding?d.encoding:null,m=d.verify;try{l=(f=function(e,t,i){var r,a=(e.headers["content-encoding"]||"identity").toLowerCase(),o=e.headers["content-length"];if(t('content-encoding "%s"',a),!1===i&&"identity"!==a)throw n(415,"content encoding unsupported",{encoding:a,type:"encoding.unsupported"});switch(a){case"deflate":r=s.createInflate(),t("inflate body"),e.pipe(r);break;case"gzip":r=s.createGunzip(),t("gunzip body"),e.pipe(r);break;case"identity":(r=e).length=o;break;default:throw n(415,'unsupported content encoding "'+a+'"',{encoding:a,type:"encoding.unsupported"})}return r}(e,p,d.inflate)).length,f.length=void 0}catch(e){return i(e)}if(d.length=l,d.encoding=m?null:h,null===d.encoding&&null!==h&&!a.encodingExists(h))return i(n(415,'unsupported charset "'+h.toUpperCase()+'"',{charset:h.toLowerCase(),type:"charset.unsupported"}));p("read body"),r(f,d,(function(r,s){var u;if(r)return u="encoding.unsupported"===r.type?n(415,'unsupported charset "'+h.toUpperCase()+'"',{charset:h.toLowerCase(),type:"charset.unsupported"}):n(400,r),f.resume(),void o(e,(function(){i(n(400,u))}));if(m)try{p("verify body"),m(e,t,s,h)}catch(e){return void i(n(403,e,{body:s,type:e.type||"entity.verify.failed"}))}var l=s;try{p("parse body"),l="string"!=typeof s&&null!==h?a.decode(s,h):s,e.body=c(l)}catch(e){return void i(n(400,e,{body:l,type:e.type||"entity.parse.failed"}))}i()}))}},6035:(e,t,i)=>{"use strict";var n=i(9830),r=i(7811),a=i(9009),o=i(5158)("body-parser:json"),s=i(3211),c=i(273);e.exports=function(e){var t=e||{},i="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,l=!1!==t.inflate,f=t.reviver,d=!1!==t.strict,h=t.type||"application/json",m=t.verify||!1;if(!1!==m&&"function"!=typeof m)throw new TypeError("option verify must be function");var v="function"!=typeof h?function(e){return function(t){return Boolean(c(t,e))}}(h):h;function g(e){if(0===e.length)return{};if(d){var t=(i=e,p.exec(i)[1]);if("{"!==t&&"["!==t)throw o("strict violation"),function(e,t){var i=e.indexOf(t),n=e.substring(0,i)+"#";try{throw JSON.parse(n),new SyntaxError("strict violation")}catch(e){return u(e,{message:e.message.replace("#",t),stack:e.stack})}}(e,t)}var i;try{return o("parse json"),JSON.parse(e,f)}catch(e){throw u(e,{message:e.message,stack:e.stack})}}return function(e,t,n){if(e._body)return o("body already parsed"),void n();if(e.body=e.body||{},!c.hasBody(e))return o("skip empty body"),void n();if(o("content-type %j",e.headers["content-type"]),!v(e))return o("skip parsing"),void n();var p=function(e){try{return(r.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-"!==p.substr(0,4))return o("invalid charset"),void n(a(415,'unsupported charset "'+p.toUpperCase()+'"',{charset:p,type:"charset.unsupported"}));s(e,t,n,g,o,{encoding:p,inflate:l,limit:i,verify:m})}};var p=/^[\x20\x09\x0a\x0d]*(.)/;function u(e,t){for(var i=Object.getOwnPropertyNames(e),n=0;n<i.length;n++){var r=i[n];"stack"!==r&&"message"!==r&&delete e[r]}return e.stack=t.stack.replace(e.message,t.message),e.message=t.message,e}},187:(e,t,i)=>{"use strict";var n=i(9830),r=i(5158)("body-parser:raw"),a=i(3211),o=i(273);e.exports=function(e){var t=e||{},i=!1!==t.inflate,s="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,c=t.type||"application/octet-stream",p=t.verify||!1;if(!1!==p&&"function"!=typeof p)throw new TypeError("option verify must be function");var u="function"!=typeof c?function(e){return function(t){return Boolean(o(t,e))}}(c):c;function l(e){return e}return function(e,t,n){return e._body?(r("body already parsed"),void n()):(e.body=e.body||{},o.hasBody(e)?(r("content-type %j",e.headers["content-type"]),u(e)?void a(e,t,n,l,r,{encoding:null,inflate:i,limit:s,verify:p}):(r("skip parsing"),void n())):(r("skip empty body"),void n()))}}},6560:(e,t,i)=>{"use strict";var n=i(9830),r=i(7811),a=i(5158)("body-parser:text"),o=i(3211),s=i(273);e.exports=function(e){var t=e||{},i=t.defaultCharset||"utf-8",c=!1!==t.inflate,p="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,u=t.type||"text/plain",l=t.verify||!1;if(!1!==l&&"function"!=typeof l)throw new TypeError("option verify must be function");var f="function"!=typeof u?function(e){return function(t){return Boolean(s(t,e))}}(u):u;function d(e){return e}return function(e,t,n){if(e._body)return a("body already parsed"),void n();if(e.body=e.body||{},!s.hasBody(e))return a("skip empty body"),void n();if(a("content-type %j",e.headers["content-type"]),!f(e))return a("skip parsing"),void n();var u=function(e){try{return(r.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||i;o(e,t,n,d,a,{encoding:u,inflate:c,limit:p,verify:l})}}},4861:(e,t,i)=>{"use strict";var n=i(9830),r=i(7811),a=i(9009),o=i(5158)("body-parser:urlencoded"),s=i(412)("body-parser"),c=i(3211),p=i(273);e.exports=function(e){var t=e||{};void 0===t.extended&&s("undefined extended: provide extended option");var i=!1!==t.extended,u=!1!==t.inflate,d="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,h=t.type||"application/x-www-form-urlencoded",m=t.verify||!1;if(!1!==m&&"function"!=typeof m)throw new TypeError("option verify must be function");var v=i?function(e){var t=void 0!==e.parameterLimit?e.parameterLimit:1e3,i=f("qs");if(isNaN(t)||t<1)throw new TypeError("option parameterLimit must be a positive number");return isFinite(t)&&(t|=0),function(e){var n=l(e,t);if(void 0===n)throw o("too many parameters"),a(413,"too many parameters",{type:"parameters.too.many"});var r=Math.max(100,n);return o("parse extended urlencoding"),i(e,{allowPrototypes:!0,arrayLimit:r,depth:1/0,parameterLimit:t})}}(t):function(e){var t=void 0!==e.parameterLimit?e.parameterLimit:1e3,i=f("querystring");if(isNaN(t)||t<1)throw new TypeError("option parameterLimit must be a positive number");return isFinite(t)&&(t|=0),function(e){if(void 0===l(e,t))throw o("too many parameters"),a(413,"too many parameters",{type:"parameters.too.many"});return o("parse urlencoding"),i(e,void 0,void 0,{maxKeys:t})}}(t),g="function"!=typeof h?function(e){return function(t){return Boolean(p(t,e))}}(h):h;function b(e){return e.length?v(e):{}}return function(e,t,i){if(e._body)return o("body already parsed"),void i();if(e.body=e.body||{},!p.hasBody(e))return o("skip empty body"),void i();if(o("content-type %j",e.headers["content-type"]),!g(e))return o("skip parsing"),void i();var n=function(e){try{return(r.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-8"!==n)return o("invalid charset"),void i(a(415,'unsupported charset "'+n.toUpperCase()+'"',{charset:n,type:"charset.unsupported"}));c(e,t,i,b,o,{debug:o,encoding:n,inflate:u,limit:d,verify:m})}};var u=Object.create(null);function l(e,t){for(var i=0,n=0;-1!==(n=e.indexOf("&",n));)if(n++,++i===t)return;return i}function f(e){var t=u[e];if(void 0!==t)return t.parse;switch(e){case"qs":t=i(129);break;case"querystring":t=i(1191)}return u[e]=t,t.parse}},5420:e=>{var t=Object.prototype.toString,i="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return a=e,"ArrayBuffer"===t.call(a).slice(8,-1)?function(e,t,n){t>>>=0;var r=e.byteLength-t;if(r<0)throw new RangeError("'offset' is out of bounds");if(void 0===n)n=r;else if((n>>>=0)>r)throw new RangeError("'length' is out of bounds");return i?Buffer.from(e.slice(t,t+n)):new Buffer(new Uint8Array(e.slice(t,t+n)))}(e,n,r):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');return i?Buffer.from(e,t):new Buffer(e,t)}(e,n):i?Buffer.from(e):new Buffer(e);var a}},9830:e=>{"use strict";e.exports=function(e,t){return"string"==typeof e?o(e):"number"==typeof e?a(e,t):null},e.exports.format=a,e.exports.parse=o;var t=/\B(?=(\d{3})+(?!\d))/g,i=/(?:\.0*|(\.[^0]+)0+)$/,n={b:1,kb:1024,mb:1<<20,gb:1<<30,tb:Math.pow(1024,4),pb:Math.pow(1024,5)},r=/^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;function a(e,r){if(!Number.isFinite(e))return null;var a=Math.abs(e),o=r&&r.thousandsSeparator||"",s=r&&r.unitSeparator||"",c=r&&void 0!==r.decimalPlaces?r.decimalPlaces:2,p=Boolean(r&&r.fixedDecimals),u=r&&r.unit||"";u&&n[u.toLowerCase()]||(u=a>=n.pb?"PB":a>=n.tb?"TB":a>=n.gb?"GB":a>=n.mb?"MB":a>=n.kb?"KB":"B");var l=(e/n[u.toLowerCase()]).toFixed(c);return p||(l=l.replace(i,"$1")),o&&(l=l.replace(t,o)),l+s+u}function o(e){if("number"==typeof e&&!isNaN(e))return e;if("string"!=typeof e)return null;var t,i=r.exec(e),a="b";return i?(t=parseFloat(i[1]),a=i[4].toLowerCase()):(t=parseInt(e,10),a="b"),Math.floor(n[a]*t)}},6890:(e,t,i)=>{var n=i(1451).Writable,r=i(4378),a=i(5420);if("undefined"==typeof Uint8Array)var o=i(1666).U2;else o=Uint8Array;function s(e,t){if(!(this instanceof s))return new s(e,t);"function"==typeof e&&(t=e,e={}),e||(e={});var i=e.encoding,r=!1;i?"u8"!==(i=String(i).toLowerCase())&&"uint8"!==i||(i="uint8array"):r=!0,n.call(this,{objectMode:!0}),this.encoding=i,this.shouldInferEncoding=r,t&&this.on("finish",(function(){t(this.getBody())})),this.body=[]}function c(e){return"string"==typeof e||(t=e,/Array\]$/.test(Object.prototype.toString.call(t)))||e&&"function"==typeof e.subarray;var t}e.exports=s,r(s,n),s.prototype._write=function(e,t,i){this.body.push(e),i()},s.prototype.inferEncoding=function(e){var t=void 0===e?this.body[0]:e;return Buffer.isBuffer(t)?"buffer":"undefined"!=typeof Uint8Array&&t instanceof Uint8Array?"uint8array":Array.isArray(t)?"array":"string"==typeof t?"string":"[object Object]"===Object.prototype.toString.call(t)?"object":"buffer"},s.prototype.getBody=function(){return this.encoding||0!==this.body.length?(this.shouldInferEncoding&&(this.encoding=this.inferEncoding()),"array"===this.encoding?function(e){for(var t=[],i=0;i<e.length;i++)t.push.apply(t,e[i]);return t}(this.body):"string"===this.encoding?function(e){for(var t=[],i=0;i<e.length;i++){var n=e[i];"string"==typeof n||Buffer.isBuffer(n)?t.push(n):c(n)?t.push(a(n)):t.push(a(String(n)))}return t=Buffer.isBuffer(e[0])?(t=Buffer.concat(t)).toString("utf8"):t.join("")}(this.body):"buffer"===this.encoding?function(e){for(var t=[],i=0;i<e.length;i++){var n=e[i];Buffer.isBuffer(n)?t.push(n):c(n)?t.push(a(n)):t.push(a(String(n)))}return Buffer.concat(t)}(this.body):"uint8array"===this.encoding?function(e){for(var t=0,i=0;i<e.length;i++)"string"==typeof e[i]&&(e[i]=a(e[i])),t+=e[i].length;for(var n=new o(t),r=(i=0,0);i<e.length;i++)for(var s=e[i],c=0;c<s.length;c++)n[r++]=s[c];return n}(this.body):this.body):[]},Array.isArray},7389:(e,t,i)=>{"use strict";e.exports=function(e,t){var i=t||{};return function(e){var t=e.parameters,i=e.type;if(!i||"string"!=typeof i||!d.test(i))throw new TypeError("invalid type");var n=String(i).toLowerCase();if(t&&"object"==typeof t)for(var r,a=Object.keys(t).sort(),o=0;o<a.length;o++){var s="*"===(r=a[o]).substr(-1)?w(t[r]):x(t[r]);n+="; "+r+"="+s}return n}(new E(i.type||"attachment",function(e,t){if(void 0!==e){var i={};if("string"!=typeof e)throw new TypeError("filename must be a string");if(void 0===t&&(t=!0),"string"!=typeof t&&"boolean"!=typeof t)throw new TypeError("fallback must be a string or boolean");if("string"==typeof t&&c.test(t))throw new TypeError("fallback must be ISO-8859-1 string");var r=n(e),a=f.test(r),s="string"!=typeof t?t&&g(r):n(t),p="string"==typeof s&&s!==r;return(p||!a||o.test(r))&&(i["filename*"]=r),(a||p)&&(i.filename=p?s:r),i}}(e,i.fallback)))},e.exports.parse=function(e){if(!e||"string"!=typeof e)throw new TypeError("argument string is required");var t=m.exec(e);if(!t)throw new TypeError("invalid type format");var i,n,r=t[0].length,a=t[1].toLowerCase(),o=[],s={};for(r=l.lastIndex=";"===t[0].substr(-1)?r-1:r;t=l.exec(e);){if(t.index!==r)throw new TypeError("invalid parameter format");if(r+=t[0].length,i=t[1].toLowerCase(),n=t[2],-1!==o.indexOf(i))throw new TypeError("invalid duplicate parameter");o.push(i),i.indexOf("*")+1!==i.length?"string"!=typeof s[i]&&('"'===n[0]&&(n=n.substr(1,n.length-2).replace(p,"$1")),s[i]=n):(i=i.slice(0,-1),n=v(n),s[i]=n)}if(-1!==r&&r!==e.length)throw new TypeError("invalid parameter format");return new E(a,s)};var n=i(5622).basename,r=i(9509).Buffer,a=/[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g,o=/%[0-9A-Fa-f]{2}/,s=/%([0-9A-Fa-f]{2})/g,c=/[^\x20-\x7e\xa0-\xff]/g,p=/\\([\u0000-\u007f])/g,u=/([\\"])/g,l=/;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g,f=/^[\x20-\x7e\x80-\xff]+$/,d=/^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/,h=/^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/,m=/^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;function v(e){var t=h.exec(e);if(!t)throw new TypeError("invalid extended field value");var i,n=t[1].toLowerCase(),a=t[2].replace(s,b);switch(n){case"iso-8859-1":i=g(a);break;case"utf-8":i=r.from(a,"binary").toString("utf8");break;default:throw new TypeError("unsupported charset in extended field")}return i}function g(e){return String(e).replace(c,"?")}function b(e,t){return String.fromCharCode(parseInt(t,16))}function y(e){return"%"+String(e).charCodeAt(0).toString(16).toUpperCase()}function x(e){return'"'+String(e).replace(u,"\\$1")+'"'}function w(e){var t=String(e);return"UTF-8''"+encodeURIComponent(t).replace(a,y)}function E(e,t){this.type=e,this.parameters=t}},7811:(e,t)=>{"use strict";var i=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,n=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,r=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,a=/\\([\u000b\u0020-\u00ff])/g,o=/([\\"])/g,s=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function c(e){var t=String(e);if(r.test(t))return t;if(t.length>0&&!n.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(o,"\\$1")+'"'}function p(e){this.parameters=Object.create(null),this.type=e}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,i=e.type;if(!i||!s.test(i))throw new TypeError("invalid type");var n=i;if(t&&"object"==typeof t)for(var a,o=Object.keys(t).sort(),p=0;p<o.length;p++){if(a=o[p],!r.test(a))throw new TypeError("invalid parameter name");n+="; "+a+"="+c(t[a])}return n},t.parse=function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;if("function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]),"string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var n=t.indexOf(";"),r=-1!==n?t.substr(0,n).trim():t.trim();if(!s.test(r))throw new TypeError("invalid media type");var o=new p(r.toLowerCase());if(-1!==n){var c,u,l;for(i.lastIndex=n;u=i.exec(t);){if(u.index!==n)throw new TypeError("invalid parameter format");n+=u[0].length,c=u[1].toLowerCase(),'"'===(l=u[2])[0]&&(l=l.substr(1,l.length-2).replace(a,"$1")),o.parameters[c]=l}if(n!==t.length)throw new TypeError("invalid parameter format")}return o}},1365:(e,t,i)=>{var n=i(6417);function r(e){return n.createHash("sha1").update(e).digest("hex")}t.sign=function(e,t){if("string"!=typeof e)throw new TypeError("Cookie value must be provided as a string.");if("string"!=typeof t)throw new TypeError("Secret string must be provided.");return e+"."+n.createHmac("sha256",t).update(e).digest("base64").replace(/\=+$/,"")},t.unsign=function(e,i){if("string"!=typeof e)throw new TypeError("Signed cookie string must be provided.");if("string"!=typeof i)throw new TypeError("Secret string must be provided.");var n=e.slice(0,e.lastIndexOf("."));return r(t.sign(n,i))==r(e)&&n}},6489:(e,t)=>{"use strict";t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var n={},a=t||{},s=e.split(r),c=a.decode||i,p=0;p<s.length;p++){var u=s[p],l=u.indexOf("=");if(!(l<0)){var f=u.substr(0,l).trim(),d=u.substr(++l,u.length).trim();'"'==d[0]&&(d=d.slice(1,-1)),null==n[f]&&(n[f]=o(d,c))}}return n},t.serialize=function(e,t,i){var r=i||{},o=r.encode||n;if("function"!=typeof o)throw new TypeError("option encode is invalid");if(!a.test(e))throw new TypeError("argument name is invalid");var s=o(t);if(s&&!a.test(s))throw new TypeError("argument val is invalid");var c=e+"="+s;if(null!=r.maxAge){var p=r.maxAge-0;if(isNaN(p))throw new Error("maxAge should be a Number");c+="; Max-Age="+Math.floor(p)}if(r.domain){if(!a.test(r.domain))throw new TypeError("option domain is invalid");c+="; Domain="+r.domain}if(r.path){if(!a.test(r.path))throw new TypeError("option path is invalid");c+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");c+="; Expires="+r.expires.toUTCString()}if(r.httpOnly&&(c+="; HttpOnly"),r.secure&&(c+="; Secure"),r.sameSite)switch("string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite){case!0:c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"strict":c+="; SameSite=Strict";break;case"none":c+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return c};var i=decodeURIComponent,n=encodeURIComponent,r=/; */,a=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function o(e,t){try{return t(e)}catch(t){return e}}},7846:(e,t,i)=>{!function(){"use strict";var t=i(7418),n=i(5181),r={origin:"*",methods:"GET,HEAD,PUT,PATCH,POST,DELETE",preflightContinue:!1,optionsSuccessStatus:204};function a(e){return"string"==typeof e||e instanceof String}function o(e,t){if(Array.isArray(t)){for(var i=0;i<t.length;++i)if(o(e,t[i]))return!0;return!1}return a(t)?e===t:t instanceof RegExp?t.test(e):!!t}function s(e,t){var i,n=t.headers.origin,r=[];return e.origin&&"*"!==e.origin?a(e.origin)?(r.push([{key:"Access-Control-Allow-Origin",value:e.origin}]),r.push([{key:"Vary",value:"Origin"}])):(i=o(n,e.origin),r.push([{key:"Access-Control-Allow-Origin",value:!!i&&n}]),r.push([{key:"Vary",value:"Origin"}])):r.push([{key:"Access-Control-Allow-Origin",value:"*"}]),r}function c(e){return!0===e.credentials?{key:"Access-Control-Allow-Credentials",value:"true"}:null}function p(e){var t=e.exposedHeaders;return t?(t.join&&(t=t.join(",")),t&&t.length?{key:"Access-Control-Expose-Headers",value:t}:null):null}function u(e,t){for(var i=0,r=e.length;i<r;i++){var a=e[i];a&&(Array.isArray(a)?u(a,t):"Vary"===a.key&&a.value?n(t,a.value):a.value&&t.setHeader(a.key,a.value))}}e.exports=function(e){var i=null;return i="function"==typeof e?e:function(t,i){i(null,e)},function(e,n,a){i(e,(function(i,o){if(i)a(i);else{var l=t({},r,o),f=null;l.origin&&"function"==typeof l.origin?f=l.origin:l.origin&&(f=function(e,t){t(null,l.origin)}),f?f(e.headers.origin,(function(t,i){t||!i?a(t):(l.origin=i,function(e,t,i,n){var r=[];"OPTIONS"===(t.method&&t.method.toUpperCase&&t.method.toUpperCase())?(r.push(s(e,t)),r.push(c(e)),r.push(function(e){var t=e.methods;return t.join&&(t=e.methods.join(",")),{key:"Access-Control-Allow-Methods",value:t}}(e)),r.push(function(e,t){var i=e.allowedHeaders||e.headers,n=[];return i?i.join&&(i=i.join(",")):(i=t.headers["access-control-request-headers"],n.push([{key:"Vary",value:"Access-Control-Request-Headers"}])),i&&i.length&&n.push([{key:"Access-Control-Allow-Headers",value:i}]),n}(e,t)),r.push(function(e){var t=("number"==typeof e.maxAge||e.maxAge)&&e.maxAge.toString();return t&&t.length?{key:"Access-Control-Max-Age",value:t}:null}(e)),r.push(p(e)),u(r,i),e.preflightContinue?n():(i.statusCode=e.optionsSuccessStatus,i.setHeader("Content-Length","0"),i.end())):(r.push(s(e,t)),r.push(c(e)),r.push(p(e)),u(r,i),n())}(l,e,n,a))})):a()}}))}}}()},1227:(e,t,i)=>{function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(t=e.exports=i(1658)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var i=this.useColors;if(e[0]=(i?"%c":"")+this.namespace+(i?" %c":" ")+e[0]+(i?"%c ":" ")+"+"+t.humanize(this.diff),i){var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var r=0,a=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(r++,"%c"===e&&(a=r))})),e.splice(a,0,n)}},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())},1658:(e,t,i)=>{var n;function r(e){function i(){if(i.enabled){var e=i,r=+new Date,a=r-(n||r);e.diff=a,e.prev=n,e.curr=r,n=r;for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];o[0]=t.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(i,n){if("%%"===i)return i;c++;var r=t.formatters[n];if("function"==typeof r){var a=o[c];i=r.call(e,a),o.splice(c,1),c--}return i})),t.formatArgs.call(e,o);var p=i.log||t.log||console.log.bind(console);p.apply(e,o)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var i,n=0;for(i in e)n=(n<<5)-n+e.charCodeAt(i),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),"function"==typeof t.init&&t.init(i),i}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var i=("string"==typeof e?e:"").split(/[\s,]+/),n=i.length,r=0;r<n;r++)i[r]&&("-"===(e=i[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var i,n;for(i=0,n=t.skips.length;i<n;i++)if(t.skips[i].test(e))return!1;for(i=0,n=t.names.length;i<n;i++)if(t.names[i].test(e))return!0;return!1},t.humanize=i(7824),t.names=[],t.skips=[],t.formatters={}},5158:(e,t,i)=>{"undefined"!=typeof process&&"renderer"===process.type?e.exports=i(1227):e.exports=i(39)},39:(e,t,i)=>{var n=i(3867),r=i(1669);(t=e.exports=i(1658)).init=function(e){e.inspectOpts={};for(var i=Object.keys(t.inspectOpts),n=0;n<i.length;n++)e.inspectOpts[i[n]]=t.inspectOpts[i[n]]},t.log=function(){return o.write(r.format.apply(r,arguments)+"\n")},t.formatArgs=function(e){var i=this.namespace;if(this.useColors){var n=this.color,r="  [3"+n+";1m"+i+" [0m";e[0]=r+e[0].split("\n").join("\n"+r),e.push("[3"+n+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+i+" "+e[0]},t.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},t.load=s,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(a)},t.colors=[6,2,3,4,5,1],t.inspectOpts=Object.keys(process.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,t){var i=t.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,t){return t.toUpperCase()})),n=process.env[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[i]=n,e}),{});var a=parseInt(process.env.DEBUG_FD,10)||2;1!==a&&2!==a&&r.deprecate((function(){}),"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var o=1===a?process.stdout:2===a?process.stderr:function(e){var t;switch(process.binding("tty_wrap").guessHandleType(e)){case"TTY":(t=new n.WriteStream(e))._type="tty",t._handle&&t._handle.unref&&t._handle.unref();break;case"FILE":(t=new(i(5747).SyncWriteStream)(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(t=new(i(1631).Socket)({fd:e,readable:!1,writable:!0})).readable=!1,t.read=null,t._type="pipe",t._handle&&t._handle.unref&&t._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return t.fd=e,t._isStdio=!0,t}(a);function s(){return process.env.DEBUG}t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)},t.enable(s())},412:(module,__unused_webpack_exports,__webpack_require__)=>{var callSiteToString=__webpack_require__(2316).callSiteToString,eventListenerCount=__webpack_require__(2316).eventListenerCount,relative=__webpack_require__(5622).relative;module.exports=depd;var basePath=process.cwd();function containsNamespace(e,t){for(var i=e.split(/[ ,]+/),n=String(t).toLowerCase(),r=0;r<i.length;r++){var a=i[r];if(a&&("*"===a||a.toLowerCase()===n))return!0}return!1}function convertDataDescriptorToAccessor(e,t,i){var n=Object.getOwnPropertyDescriptor(e,t),r=n.value;return n.get=function(){return r},n.writable&&(n.set=function(e){return r=e}),delete n.value,delete n.writable,Object.defineProperty(e,t,n),n}function createArgumentsString(e){for(var t="",i=0;i<e;i++)t+=", arg"+i;return t.substr(2)}function createStackString(e){var t=this.name+": "+this.namespace;this.message&&(t+=" deprecated "+this.message);for(var i=0;i<e.length;i++)t+="\n    at "+callSiteToString(e[i]);return t}function depd(e){if(!e)throw new TypeError("argument namespace is required");var t=callSiteLocation(getStack()[1])[0];function i(e){log.call(i,e)}return i._file=t,i._ignored=isignored(e),i._namespace=e,i._traced=istraced(e),i._warned=Object.create(null),i.function=wrapfunction,i.property=wrapproperty,i}function isignored(e){return!!process.noDeprecation||containsNamespace(process.env.NO_DEPRECATION||"",e)}function istraced(e){return!!process.traceDeprecation||containsNamespace(process.env.TRACE_DEPRECATION||"",e)}function log(e,t){var i=0!==eventListenerCount(process,"deprecation");if(i||!this._ignored){var n,r,a,o,s=0,c=!1,p=getStack(),u=this._file;for(t?(o=t,(a=callSiteLocation(p[1])).name=o.name,u=a[0]):a=o=callSiteLocation(p[s=2]);s<p.length;s++)if((r=(n=callSiteLocation(p[s]))[0])===u)c=!0;else if(r===this._file)u=this._file;else if(c)break;var l=n?o.join(":")+"__"+n.join(":"):void 0;if(void 0===l||!(l in this._warned)){this._warned[l]=!0;var f=e;if(f||(f=a!==o&&a.name?defaultMessage(a):defaultMessage(o)),i){var d=DeprecationError(this._namespace,f,p.slice(s));process.emit("deprecation",d)}else{var h=(process.stderr.isTTY?formatColor:formatPlain).call(this,f,n,p.slice(s));process.stderr.write(h+"\n","utf8")}}}}function callSiteLocation(e){var t=e.getFileName()||"<anonymous>",i=e.getLineNumber(),n=e.getColumnNumber();e.isEval()&&(t=e.getEvalOrigin()+", "+t);var r=[t,i,n];return r.callSite=e,r.name=e.getFunctionName(),r}function defaultMessage(e){var t=e.callSite,i=e.name;i||(i="<anonymous@"+formatLocation(e)+">");var n=t.getThis(),r=n&&t.getTypeName();return"Object"===r&&(r=void 0),"Function"===r&&(r=n.name||r),r&&t.getMethodName()?r+"."+i:i}function formatPlain(e,t,i){var n=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var r=0;r<i.length;r++)n+="\n    at "+callSiteToString(i[r]);return n}return t&&(n+=" at "+formatLocation(t)),n}function formatColor(e,t,i){var n="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var r=0;r<i.length;r++)n+="\n    [36mat "+callSiteToString(i[r])+"[39m";return n}return t&&(n+=" [36m"+formatLocation(t)+"[39m"),n}function formatLocation(e){return relative(basePath,e[0])+":"+e[1]+":"+e[2]}function getStack(){var e=Error.stackTraceLimit,t={},i=Error.prepareStackTrace;Error.prepareStackTrace=prepareObjectStackTrace,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(t);var n=t.stack.slice(1);return Error.prepareStackTrace=i,Error.stackTraceLimit=e,n}function prepareObjectStackTrace(e,t){return t}function wrapfunction(fn,message){if("function"!=typeof fn)throw new TypeError("argument fn must be a function");var args=createArgumentsString(fn.length),deprecate=this,stack=getStack(),site=callSiteLocation(stack[1]);site.name=fn.name;var deprecatedfn=eval("(function ("+args+') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');return deprecatedfn}function wrapproperty(e,t,i){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var n=Object.getOwnPropertyDescriptor(e,t);if(!n)throw new TypeError("must call property on owner object");if(!n.configurable)throw new TypeError("property must be configurable");var r=this,a=callSiteLocation(getStack()[1]);a.name=t,"value"in n&&(n=convertDataDescriptorToAccessor(e,t,i));var o=n.get,s=n.set;"function"==typeof o&&(n.get=function(){return log.call(r,i,a),o.apply(this,arguments)}),"function"==typeof s&&(n.set=function(){return log.call(r,i,a),s.apply(this,arguments)}),Object.defineProperty(e,t,n)}function DeprecationError(e,t,i){var n,r=new Error;return Object.defineProperty(r,"constructor",{value:DeprecationError}),Object.defineProperty(r,"message",{configurable:!0,enumerable:!1,value:t,writable:!0}),Object.defineProperty(r,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(r,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(r,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==n?n:n=createStackString.call(this,i)},set:function(e){n=e}}),r}},5868:e=>{"use strict";e.exports=function(e){var t,i=!0,n=function(e){var t,i="";if(e.isNative()?i="native":e.isEval()?(t=e.getScriptNameOrSourceURL())||(i=e.getEvalOrigin()):t=e.getFileName(),t){i+=t;var n=e.getLineNumber();if(null!=n){i+=":"+n;var r=e.getColumnNumber();r&&(i+=":"+r)}}return i||"unknown source"}(e),r=e.getFunctionName(),a=e.isConstructor(),o="";if(!(e.isToplevel()||a)){var s=e.getMethodName(),c=(t=e.receiver).constructor&&t.constructor.name||null;r?(c&&0!==r.indexOf(c)&&(o+=c+"."),o+=r,s&&r.lastIndexOf("."+s)!==r.length-s.length-1&&(o+=" [as "+s+"]")):o+=c+"."+(s||"<anonymous>")}else a?o+="new "+(r||"<anonymous>"):r?o+=r:(i=!1,o+=n);return i&&(o+=" ("+n+")"),o}},1671:e=>{"use strict";e.exports=function(e,t){return e.listeners(t).length}},2316:(e,t,i)=>{"use strict";var n=i(8614).EventEmitter;function r(e,t,i){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var n=i();return Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}),n}})}function a(e){return e.toString()}r(e.exports,"callSiteToString",(function(){var e=Error.stackTraceLimit,t={},n=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t},Error.stackTraceLimit=2,Error.captureStackTrace(t);var r=t.stack.slice();return Error.prepareStackTrace=n,Error.stackTraceLimit=e,r[0].toString?a:i(5868)})),r(e.exports,"eventListenerCount",(function(){return n.listenerCount||i(1671)}))},6149:(e,t,i)=>{"use strict";var n=i(5747).ReadStream,r=i(2413);function a(){"number"==typeof this.fd&&this.close()}e.exports=function(e){return e instanceof n?function(e){return e.destroy(),"function"==typeof e.close&&e.on("open",a),e}(e):e instanceof r?("function"==typeof e.destroy&&e.destroy(),e):e}},4331:e=>{"use strict";function t(e,t){return function(i){for(var n=new Array(arguments.length),r=this,a="error"===e?i:null,o=0;o<n.length;o++)n[o]=arguments[o];t(a,r,e,n)}}e.exports=function(e,i){if(!Array.isArray(e))throw new TypeError("arg must be an array of [ee, events...] arrays");for(var n=[],r=0;r<e.length;r++){var a=e[r];if(!Array.isArray(a)||a.length<2)throw new TypeError("each array member must be [ee, events...]");for(var o=a[0],s=1;s<a.length;s++){var c=a[s],p=t(c,u);o.on(c,p),n.push({ee:o,event:c,fn:p})}}function u(){l(),i.apply(null,arguments)}function l(){for(var e,t=0;t<n.length;t++)(e=n[t]).ee.removeListener(e.event,e.fn)}function f(e){i=e}return f.cancel=l,f}},517:e=>{"use strict";e.exports=function(e){return String(e).replace(i,"$1�$2").replace(t,encodeURI)};var t=/(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g,i=/(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g},2114:e=>{"use strict";function t(e,t){for(const i in t)Object.defineProperty(e,i,{value:t[i],enumerable:!0,configurable:!0});return e}e.exports=function(e,i,n){if(!e||"string"==typeof e)throw new TypeError("Please pass an Error to err-code");n||(n={}),"object"==typeof i&&(n=i,i=void 0),null!=i&&(n.code=i);try{return t(e,n)}catch(i){n.message=e.message,n.stack=e.stack;const r=function(){};return r.prototype=Object.create(Object.getPrototypeOf(e)),t(new r,n)}}},5573:e=>{"use strict";var t=/["'&<>]/;e.exports=function(e){var i,n=""+e,r=t.exec(n);if(!r)return n;var a="",o=0,s=0;for(o=r.index;o<n.length;o++){switch(n.charCodeAt(o)){case 34:i="&quot;";break;case 38:i="&amp;";break;case 39:i="&#39;";break;case 60:i="&lt;";break;case 62:i="&gt;";break;default:continue}s!==o&&(a+=n.substring(s,o)),s=o+1,a+=i}return s!==o?a+n.substring(s,o):a}},5859:(e,t,i)=>{"use strict";e.exports=function(e,t){if(null==e)throw new TypeError("argument entity is required");var i,o=(i=e,"function"==typeof r&&i instanceof r||i&&"object"==typeof i&&"ctime"in i&&"[object Date]"===a.call(i.ctime)&&"mtime"in i&&"[object Date]"===a.call(i.mtime)&&"ino"in i&&"number"==typeof i.ino&&"size"in i&&"number"==typeof i.size),s=t&&"boolean"==typeof t.weak?t.weak:o;if(!o&&"string"!=typeof e&&!Buffer.isBuffer(e))throw new TypeError("argument entity must be string, Buffer, or fs.Stats");var c,p,u=o?(p=(c=e).mtime.getTime().toString(16),'"'+c.size.toString(16)+"-"+p+'"'):function(e){if(0===e.length)return'"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';var t=n.createHash("sha1").update(e,"utf8").digest("base64").substring(0,27);return'"'+("string"==typeof e?Buffer.byteLength(e,"utf8"):e.length).toString(16)+"-"+t+'"'}(e);return s?"W/"+u:u};var n=i(6417),r=i(5747).Stats,a=Object.prototype.toString},9268:(e,t,i)=>{"use strict";e.exports=i(5499)},8346:(e,t,i)=>{"use strict";var n=i(7838),r=i(9483),a=i(8873),o=i(1735),s=i(7667),c=i(5158)("express:application"),p=i(8706),u=i(8605),l=i(4265).compileETag,f=i(4265).compileQueryParser,d=i(4265).compileTrust,h=i(412)("express"),m=i(2521),v=i(1322),g=i(5622).resolve,b=i(6644),y=Array.prototype.slice,x=e.exports={},w="@@symbol:trust_proxy_default";function E(e){"test"!==this.get("env")&&console.error(e.stack||e.toString())}x.init=function(){this.cache={},this.engines={},this.settings={},this.defaultConfiguration()},x.defaultConfiguration=function(){var e="production";this.enable("x-powered-by"),this.set("etag","weak"),this.set("env",e),this.set("query parser","extended"),this.set("subdomain offset",2),this.set("trust proxy",!1),Object.defineProperty(this.settings,w,{configurable:!0,value:!0}),c("booting in %s mode",e),this.on("mount",(function(e){!0===this.settings[w]&&"function"==typeof e.settings["trust proxy fn"]&&(delete this.settings["trust proxy"],delete this.settings["trust proxy fn"]),b(this.request,e.request),b(this.response,e.response),b(this.engines,e.engines),b(this.settings,e.settings)})),this.locals=Object.create(null),this.mountpath="/",this.locals.settings=this.settings,this.set("view",p),this.set("views",g("views")),this.set("jsonp callback name","callback"),this.enable("view cache"),Object.defineProperty(this,"router",{get:function(){throw new Error("'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.")}})},x.lazyrouter=function(){this._router||(this._router=new r({caseSensitive:this.enabled("case sensitive routing"),strict:this.enabled("strict routing")}),this._router.use(s(this.get("query parser fn"))),this._router.use(o.init(this)))},x.handle=function(e,t,i){var r=this._router,a=i||n(e,t,{env:this.get("env"),onerror:E.bind(this)});if(!r)return c("no routes defined on app"),void a();r.handle(e,t,a)},x.use=function(e){var t=0,i="/";if("function"!=typeof e){for(var n=e;Array.isArray(n)&&0!==n.length;)n=n[0];"function"!=typeof n&&(t=1,i=e)}var r=m(y.call(arguments,t));if(0===r.length)throw new TypeError("app.use() requires a middleware function");this.lazyrouter();var a=this._router;return r.forEach((function(e){if(!e||!e.handle||!e.set)return a.use(i,e);c(".use app under %s",i),e.mountpath=i,e.parent=this,a.use(i,(function(t,i,n){var r=t.app;e.handle(t,i,(function(e){b(t,r.request),b(i,r.response),n(e)}))})),e.emit("mount",this)}),this),this},x.route=function(e){return this.lazyrouter(),this._router.route(e)},x.engine=function(e,t){if("function"!=typeof t)throw new Error("callback function required");var i="."!==e[0]?"."+e:e;return this.engines[i]=t,this},x.param=function(e,t){if(this.lazyrouter(),Array.isArray(e)){for(var i=0;i<e.length;i++)this.param(e[i],t);return this}return this._router.param(e,t),this},x.set=function(e,t){if(1===arguments.length)return this.settings[e];switch(c('set "%s" to %o',e,t),this.settings[e]=t,e){case"etag":this.set("etag fn",l(t));break;case"query parser":this.set("query parser fn",f(t));break;case"trust proxy":this.set("trust proxy fn",d(t)),Object.defineProperty(this.settings,w,{configurable:!0,value:!1})}return this},x.path=function(){return this.parent?this.parent.path()+this.mountpath:""},x.enabled=function(e){return Boolean(this.set(e))},x.disabled=function(e){return!this.set(e)},x.enable=function(e){return this.set(e,!0)},x.disable=function(e){return this.set(e,!1)},a.forEach((function(e){x[e]=function(t){if("get"===e&&1===arguments.length)return this.set(t);this.lazyrouter();var i=this._router.route(t);return i[e].apply(i,y.call(arguments,1)),this}})),x.all=function(e){this.lazyrouter();for(var t=this._router.route(e),i=y.call(arguments,1),n=0;n<a.length;n++)t[a[n]].apply(t,i);return this},x.del=h.function(x.delete,"app.del: Use app.delete instead"),x.render=function(e,t,i){var n,r=this.cache,a=i,o=this.engines,s=t,c={};if("function"==typeof t&&(a=t,s={}),v(c,this.locals),s._locals&&v(c,s._locals),v(c,s),null==c.cache&&(c.cache=this.enabled("view cache")),c.cache&&(n=r[e]),!n){if(!(n=new(this.get("view"))(e,{defaultEngine:this.get("view engine"),root:this.get("views"),engines:o})).path){var p=Array.isArray(n.root)&&n.root.length>1?'directories "'+n.root.slice(0,-1).join('", "')+'" or "'+n.root[n.root.length-1]+'"':'directory "'+n.root+'"',u=new Error('Failed to lookup view "'+e+'" in views '+p);return u.view=n,a(u)}c.cache&&(r[e]=n)}!function(e,t,i){try{e.render(t,i)}catch(e){i(e)}}(n,c,a)},x.listen=function(){var e=u.createServer(this);return e.listen.apply(e,arguments)}},5499:(e,t,i)=>{"use strict";var n=i(46),r=i(8614).EventEmitter,a=i(6182),o=i(8346),s=i(5369),c=i(9483),p=i(5828),u=i(2914);(t=e.exports=function(){var e=function(t,i,n){e.handle(t,i,n)};return a(e,r.prototype,!1),a(e,o,!1),e.request=Object.create(p,{app:{configurable:!0,enumerable:!0,writable:!0,value:e}}),e.response=Object.create(u,{app:{configurable:!0,enumerable:!0,writable:!0,value:e}}),e.init(),e}).application=o,t.request=p,t.response=u,t.Route=s,t.Router=c,t.json=n.json,t.query=i(7667),t.raw=n.raw,t.static=i(8636),t.text=n.text,t.urlencoded=n.urlencoded,["bodyParser","compress","cookieSession","session","logger","cookieParser","favicon","responseTime","errorHandler","timeout","methodOverride","vhost","csrf","directory","limit","multipart","staticCache"].forEach((function(e){Object.defineProperty(t,e,{get:function(){throw new Error("Most middleware (like "+e+") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.")},configurable:!0})}))},1735:(e,t,i)=>{"use strict";var n=i(6644);t.init=function(e){return function(t,i,r){e.enabled("x-powered-by")&&i.setHeader("X-Powered-By","Express"),t.res=i,i.req=t,t.next=r,n(t,e.request),n(i,e.response),i.locals=i.locals||Object.create(null),r()}}},7667:(e,t,i)=>{"use strict";var n=i(1322),r=i(8317),a=i(129);e.exports=function(e){var t=n({},e),i=a.parse;return"function"==typeof e&&(i=e,t=void 0),void 0!==t&&void 0===t.allowPrototypes&&(t.allowPrototypes=!0),function(e,n,a){if(!e.query){var o=r(e).query;e.query=i(o,t)}a()}}},5828:(e,t,i)=>{"use strict";var n=i(9078),r=i(412)("express"),a=i(1631).isIP,o=i(273),s=i(8605),c=i(9635),p=i(4622),u=i(8317),l=i(2611),f=Object.create(s.IncomingMessage.prototype);function d(e,t,i){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:i})}e.exports=f,f.get=f.header=function(e){if(!e)throw new TypeError("name argument is required to req.get");if("string"!=typeof e)throw new TypeError("name must be a string to req.get");var t=e.toLowerCase();switch(t){case"referer":case"referrer":return this.headers.referrer||this.headers.referer;default:return this.headers[t]}},f.accepts=function(){var e=n(this);return e.types.apply(e,arguments)},f.acceptsEncodings=function(){var e=n(this);return e.encodings.apply(e,arguments)},f.acceptsEncoding=r.function(f.acceptsEncodings,"req.acceptsEncoding: Use acceptsEncodings instead"),f.acceptsCharsets=function(){var e=n(this);return e.charsets.apply(e,arguments)},f.acceptsCharset=r.function(f.acceptsCharsets,"req.acceptsCharset: Use acceptsCharsets instead"),f.acceptsLanguages=function(){var e=n(this);return e.languages.apply(e,arguments)},f.acceptsLanguage=r.function(f.acceptsLanguages,"req.acceptsLanguage: Use acceptsLanguages instead"),f.range=function(e,t){var i=this.get("Range");if(i)return p(e,i,t)},f.param=function(e,t){var i=this.params||{},n=this.body||{},a=this.query||{},o=1===arguments.length?"name":"name, default";return r("req.param("+o+"): Use req.params, req.body, or req.query instead"),null!=i[e]&&i.hasOwnProperty(e)?i[e]:null!=n[e]?n[e]:null!=a[e]?a[e]:t},f.is=function(e){var t=e;if(!Array.isArray(e)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return o(this,t)},d(f,"protocol",(function(){var e=this.connection.encrypted?"https":"http";if(!this.app.get("trust proxy fn")(this.connection.remoteAddress,0))return e;var t=this.get("X-Forwarded-Proto")||e,i=t.indexOf(",");return-1!==i?t.substring(0,i).trim():t.trim()})),d(f,"secure",(function(){return"https"===this.protocol})),d(f,"ip",(function(){var e=this.app.get("trust proxy fn");return l(this,e)})),d(f,"ips",(function(){var e=this.app.get("trust proxy fn"),t=l.all(this,e);return t.reverse().pop(),t})),d(f,"subdomains",(function(){var e=this.hostname;if(!e)return[];var t=this.app.get("subdomain offset");return(a(e)?[e]:e.split(".").reverse()).slice(t)})),d(f,"path",(function(){return u(this).pathname})),d(f,"hostname",(function(){var e=this.app.get("trust proxy fn"),t=this.get("X-Forwarded-Host");if(t&&e(this.connection.remoteAddress,0)?-1!==t.indexOf(",")&&(t=t.substring(0,t.indexOf(",")).trimRight()):t=this.get("Host"),t){var i="["===t[0]?t.indexOf("]")+1:0,n=t.indexOf(":",i);return-1!==n?t.substring(0,n):t}})),d(f,"host",r.function((function(){return this.hostname}),"req.host: Use req.hostname instead")),d(f,"fresh",(function(){var e=this.method,t=this.res,i=t.statusCode;return("GET"===e||"HEAD"===e)&&(i>=200&&i<300||304===i)&&c(this.headers,{etag:t.get("ETag"),"last-modified":t.get("Last-Modified")})})),d(f,"stale",(function(){return!this.fresh})),d(f,"xhr",(function(){return"xmlhttprequest"===(this.get("X-Requested-With")||"").toLowerCase()}))},2914:(e,t,i)=>{"use strict";var n=i(9509).Buffer,r=i(7389),a=i(412)("express"),o=i(517),s=i(5573),c=i(8605),p=i(4265).isAbsolute,u=i(338),l=i(5622),f=i(4917),d=i(1322),h=i(1365).sign,m=i(4265).normalizeType,v=i(4265).normalizeTypes,g=i(4265).setCharset,b=i(6489),y=i(329),x=l.extname,w=y.mime,E=l.resolve,_=i(5181),S=Object.create(c.ServerResponse.prototype);e.exports=S;var k=/;\s*charset\s*=/;function T(e,t,i,n){var r,a=!1;function o(){if(!a){a=!0;var e=new Error("Request aborted");e.code="ECONNABORTED",n(e)}}function s(e){a||(a=!0,n(e))}t.on("directory",(function(){if(!a){a=!0;var e=new Error("EISDIR, read");e.code="EISDIR",n(e)}})),t.on("end",(function(){a||(a=!0,n())})),t.on("error",s),t.on("file",(function(){r=!1})),t.on("stream",(function(){r=!0})),u(e,(function(e){return e&&"ECONNRESET"===e.code?o():e?s(e):void(a||setImmediate((function(){!1===r||a?a||(a=!0,n()):o()})))})),i.headers&&t.on("headers",(function(e){for(var t=i.headers,n=Object.keys(t),r=0;r<n.length;r++){var a=n[r];e.setHeader(a,t[a])}})),t.pipe(e)}function A(e,t,i,n){var r=t||i?JSON.stringify(e,t,i):JSON.stringify(e);return n&&(r=r.replace(/[<>&]/g,(function(e){switch(e.charCodeAt(0)){case 60:return"\\u003c";case 62:return"\\u003e";case 38:return"\\u0026";default:return e}}))),r}S.status=function(e){return this.statusCode=e,this},S.links=function(e){var t=this.get("Link")||"";return t&&(t+=", "),this.set("Link",t+Object.keys(e).map((function(t){return"<"+e[t]+'>; rel="'+t+'"'})).join(", "))},S.send=function(e){var t,i,r=e,o=this.req,s=this.app;switch(2===arguments.length&&("number"!=typeof arguments[0]&&"number"==typeof arguments[1]?(a("res.send(body, status): Use res.status(status).send(body) instead"),this.statusCode=arguments[1]):(a("res.send(status, body): Use res.status(status).send(body) instead"),this.statusCode=arguments[0],r=arguments[1])),"number"==typeof r&&1===arguments.length&&(this.get("Content-Type")||this.type("txt"),a("res.send(status): Use res.sendStatus(status) instead"),this.statusCode=r,r=f[r]),typeof r){case"string":this.get("Content-Type")||this.type("html");break;case"boolean":case"number":case"object":if(null===r)r="";else{if(!n.isBuffer(r))return this.json(r);this.get("Content-Type")||this.type("bin")}}"string"==typeof r&&(t="utf8","string"==typeof(i=this.get("Content-Type"))&&this.set("Content-Type",g(i,"utf-8")));var c,p,u=s.get("etag fn"),l=!this.get("ETag")&&"function"==typeof u;return void 0!==r&&(n.isBuffer(r)?c=r.length:!l&&r.length<1e3?c=n.byteLength(r,t):(r=n.from(r,t),t=void 0,c=r.length),this.set("Content-Length",c)),l&&void 0!==c&&(p=u(r,t))&&this.set("ETag",p),o.fresh&&(this.statusCode=304),204!==this.statusCode&&304!==this.statusCode||(this.removeHeader("Content-Type"),this.removeHeader("Content-Length"),this.removeHeader("Transfer-Encoding"),r=""),"HEAD"===o.method?this.end():this.end(r,t),this},S.json=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(a("res.json(obj, status): Use res.status(status).json(obj) instead"),this.statusCode=arguments[1]):(a("res.json(status, obj): Use res.status(status).json(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var i=this.app,n=i.get("json escape"),r=i.get("json replacer"),o=i.get("json spaces"),s=A(t,r,o,n);return this.get("Content-Type")||this.set("Content-Type","application/json"),this.send(s)},S.jsonp=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(a("res.jsonp(obj, status): Use res.status(status).json(obj) instead"),this.statusCode=arguments[1]):(a("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var i=this.app,n=i.get("json escape"),r=i.get("json replacer"),o=i.get("json spaces"),s=A(t,r,o,n),c=this.req.query[i.get("jsonp callback name")];return this.get("Content-Type")||(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","application/json")),Array.isArray(c)&&(c=c[0]),"string"==typeof c&&0!==c.length&&(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","text/javascript"),s="/**/ typeof "+(c=c.replace(/[^\[\]\w$.]/g,""))+" === 'function' && "+c+"("+(s=s.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029"))+");"),this.send(s)},S.sendStatus=function(e){var t=f[e]||String(e);return this.statusCode=e,this.type("txt"),this.send(t)},S.sendFile=function(e,t,i){var n=i,r=this.req,a=r.next,o=t||{};if(!e)throw new TypeError("path argument is required to res.sendFile");if("string"!=typeof e)throw new TypeError("path must be a string to res.sendFile");if("function"==typeof t&&(n=t,o={}),!o.root&&!p(e))throw new TypeError("path must be absolute or specify root to res.sendFile");var s=encodeURI(e);T(this,y(r,s,o),o,(function(e){return n?n(e):e&&"EISDIR"===e.code?a():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&a(e))}))},S.sendfile=function(e,t,i){var n=i,r=this.req,a=r.next,o=t||{};"function"==typeof t&&(n=t,o={}),T(this,y(r,e,o),o,(function(e){return n?n(e):e&&"EISDIR"===e.code?a():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&a(e))}))},S.sendfile=a.function(S.sendfile,"res.sendfile: Use res.sendFile instead"),S.download=function(e,t,i,n){var a=n,o=t,s=i||null;"function"==typeof t?(a=t,o=null,s=null):"function"==typeof i&&(a=i,s=null);var c={"Content-Disposition":r(o||e)};if(s&&s.headers)for(var p=Object.keys(s.headers),u=0;u<p.length;u++){var l=p[u];"content-disposition"!==l.toLowerCase()&&(c[l]=s.headers[l])}(s=Object.create(s)).headers=c;var f=E(e);return this.sendFile(f,s,a)},S.contentType=S.type=function(e){var t=-1===e.indexOf("/")?w.lookup(e):e;return this.set("Content-Type",t)},S.format=function(e){var t=this.req,i=t.next,n=e.default;n&&delete e.default;var r=Object.keys(e),a=r.length>0&&t.accepts(r);if(this.vary("Accept"),a)this.set("Content-Type",m(a).value),e[a](t,this,i);else if(n)n();else{var o=new Error("Not Acceptable");o.status=o.statusCode=406,o.types=v(r).map((function(e){return e.value})),i(o)}return this},S.attachment=function(e){return e&&this.type(x(e)),this.set("Content-Disposition",r(e)),this},S.append=function(e,t){var i=this.get(e),n=t;return i&&(n=Array.isArray(i)?i.concat(t):Array.isArray(t)?[i].concat(t):[i,t]),this.set(e,n)},S.set=S.header=function(e,t){if(2===arguments.length){var i=Array.isArray(t)?t.map(String):String(t);if("content-type"===e.toLowerCase()){if(Array.isArray(i))throw new TypeError("Content-Type cannot be set to an Array");if(!k.test(i)){var n=w.charsets.lookup(i.split(";")[0]);n&&(i+="; charset="+n.toLowerCase())}}this.setHeader(e,i)}else for(var r in e)this.set(r,e[r]);return this},S.get=function(e){return this.getHeader(e)},S.clearCookie=function(e,t){var i=d({expires:new Date(1),path:"/"},t);return this.cookie(e,"",i)},S.cookie=function(e,t,i){var n=d({},i),r=this.req.secret,a=n.signed;if(a&&!r)throw new Error('cookieParser("secret") required for signed cookies');var o="object"==typeof t?"j:"+JSON.stringify(t):String(t);return a&&(o="s:"+h(o,r)),"maxAge"in n&&(n.expires=new Date(Date.now()+n.maxAge),n.maxAge/=1e3),null==n.path&&(n.path="/"),this.append("Set-Cookie",b.serialize(e,String(o),n)),this},S.location=function(e){var t=e;return"back"===e&&(t=this.req.get("Referrer")||"/"),this.set("Location",o(t))},S.redirect=function(e){var t,i=e,r=302;2===arguments.length&&("number"==typeof arguments[0]?(r=arguments[0],i=arguments[1]):(a("res.redirect(url, status): Use res.redirect(status, url) instead"),r=arguments[1])),i=this.location(i).get("Location"),this.format({text:function(){t=f[r]+". Redirecting to "+i},html:function(){var e=s(i);t="<p>"+f[r]+'. Redirecting to <a href="'+e+'">'+e+"</a></p>"},default:function(){t=""}}),this.statusCode=r,this.set("Content-Length",n.byteLength(t)),"HEAD"===this.req.method?this.end():this.end(t)},S.vary=function(e){return!e||Array.isArray(e)&&!e.length?(a("res.vary(): Provide a field name"),this):(_(this,e),this)},S.render=function(e,t,i){var n=this.req.app,r=i,a=t||{},o=this.req,s=this;"function"==typeof t&&(r=t,a={}),a._locals=s.locals,r=r||function(e,t){if(e)return o.next(e);s.send(t)},n.render(e,a,r)}},9483:(e,t,i)=>{"use strict";var n=i(5369),r=i(3342),a=i(8873),o=i(1322),s=i(5158)("express:router"),c=i(412)("express"),p=i(2521),u=i(8317),l=i(6644),f=/^\[object (\S+)\]$/,d=Array.prototype.slice,h=Object.prototype.toString,m=e.exports=function(e){var t=e||{};function i(e,t,n){i.handle(e,t,n)}return l(i,m),i.params={},i._params=[],i.caseSensitive=t.caseSensitive,i.mergeParams=t.mergeParams,i.strict=t.strict,i.stack=[],i};function v(e,t){for(var i=0;i<t.length;i++){var n=t[i];-1===e.indexOf(n)&&e.push(n)}}function g(e){var t=typeof e;return"object"!==t?t:h.call(e).replace(f,"$1")}function b(e,t){try{return e.match(t)}catch(e){return e}}m.param=function(e,t){if("function"==typeof e)return c("router.param(fn): Refactor to use path params"),void this._params.push(e);var i,n=this._params,r=n.length;":"===e[0]&&(c("router.param("+JSON.stringify(e)+", fn): Use router.param("+JSON.stringify(e.substr(1))+", fn) instead"),e=e.substr(1));for(var a=0;a<r;++a)(i=n[a](e,t))&&(t=i);if("function"!=typeof t)throw new Error("invalid param() call for "+e+", got "+t);return(this.params[e]=this.params[e]||[]).push(t),this},m.handle=function(e,t,i){var n=this;s("dispatching %s %s",e.method,e.url);var r,a,c=0,p=function(e){if("string"==typeof e&&0!==e.length&&"/"!==e[0]){var t=e.indexOf("?"),i=-1!==t?t:e.length,n=e.substr(0,i).indexOf("://");return-1!==n?e.substr(0,e.indexOf("/",3+n)):void 0}}(e.url)||"",l="",f=!1,d={},h=[],m=n.stack,g=e.params,y=e.baseUrl||"",x=function(e,t){for(var i=new Array(arguments.length-2),n=new Array(arguments.length-2),r=0;r<i.length;r++)i[r]=arguments[r+2],n[r]=t[i[r]];return function(){for(var r=0;r<i.length;r++)t[i[r]]=n[r];return e.apply(this,arguments)}}(i,e,"baseUrl","next","params");function w(i){var r="route"===i?null:i;if(f&&(e.url=e.url.substr(1),f=!1),0!==l.length&&(e.baseUrl=y,e.url=p+l+e.url.substr(p.length),l=""),"router"!==r)if(c>=m.length)setImmediate(x,r);else{var a,E,_,S=function(e){try{return u(e).pathname}catch(e){return}}(e);if(null==S)return x(r);for(;!0!==E&&c<m.length;)if(E=b(a=m[c++],S),_=a.route,"boolean"!=typeof E&&(r=r||E),!0===E&&_)if(r)E=!1;else{var k=e.method,T=_._handles_method(k);T||"OPTIONS"!==k||v(h,_._options()),T||"HEAD"===k||(E=!1)}if(!0!==E)return x(r);_&&(e.route=_),e.params=n.mergeParams?function(e,t){if("object"!=typeof t||!t)return e;var i=o({},t);if(!(0 in e)||!(0 in t))return o(i,e);for(var n=0,r=0;n in e;)n++;for(;r in t;)r++;for(n--;n>=0;n--)e[n+r]=e[n],n<r&&delete e[n];return o(i,e)}(a.params,g):a.params;var A=a.path;n.process_params(a,d,e,t,(function(i){return i?w(r||i):_?a.handle_request(e,t,w):void function(i,n,r,a){if(0!==r.length){var o=a[r.length];if(o&&"/"!==o&&"."!==o)return w(n);s("trim prefix (%s) from url %s",r,e.url),l=r,e.url=p+e.url.substr(p.length+l.length),p||"/"===e.url[0]||(e.url="/"+e.url,f=!0),e.baseUrl=y+("/"===l[l.length-1]?l.substring(0,l.length-1):l)}s("%s %s : %s",i.name,r,e.originalUrl),n?i.handle_error(n,e,t,w):i.handle_request(e,t,w)}(a,r,A,S)}))}else setImmediate(x,null)}e.next=w,"OPTIONS"===e.method&&(r=x,a=function(e,i){if(i||0===h.length)return e(i);!function(e,t,i){try{var n=t.join(",");e.set("Allow",n),e.send(n)}catch(e){i(e)}}(t,h,e)},x=function(){var e=new Array(arguments.length+1);e[0]=r;for(var t=0,i=arguments.length;t<i;t++)e[t+1]=arguments[t];a.apply(this,e)}),e.baseUrl=y,e.originalUrl=e.originalUrl||e.url,w()},m.process_params=function(e,t,i,n,r){var a=this.params,o=e.keys;if(!o||0===o.length)return r();var s,c,p,u,l,f=0,d=0;function h(e){return e?r(e):f>=o.length?r():(d=0,c=o[f++],s=c.name,p=i.params[s],u=a[s],l=t[s],void 0!==p&&u?l&&(l.match===p||l.error&&"route"!==l.error)?(i.params[s]=l.value,h(l.error)):(t[s]=l={error:null,match:p,value:p},void m()):h())}function m(e){var t=u[d++];if(l.value=i.params[c.name],e)return l.error=e,void h(e);if(!t)return h();try{t(i,n,m,p,c.name)}catch(e){m(e)}}h()},m.use=function(e){var t=0,i="/";if("function"!=typeof e){for(var n=e;Array.isArray(n)&&0!==n.length;)n=n[0];"function"!=typeof n&&(t=1,i=e)}var a=p(d.call(arguments,t));if(0===a.length)throw new TypeError("Router.use() requires a middleware function");for(var o=0;o<a.length;o++){if("function"!=typeof(e=a[o]))throw new TypeError("Router.use() requires a middleware function but got a "+g(e));s("use %o %s",i,e.name||"<anonymous>");var c=new r(i,{sensitive:this.caseSensitive,strict:!1,end:!1},e);c.route=void 0,this.stack.push(c)}return this},m.route=function(e){var t=new n(e),i=new r(e,{sensitive:this.caseSensitive,strict:this.strict,end:!0},t.dispatch.bind(t));return i.route=t,this.stack.push(i),t},a.concat("all").forEach((function(e){m[e]=function(t){var i=this.route(t);return i[e].apply(i,d.call(arguments,1)),this}}))},3342:(e,t,i)=>{"use strict";var n=i(4779),r=i(5158)("express:router:layer"),a=Object.prototype.hasOwnProperty;function o(e,t,i){if(!(this instanceof o))return new o(e,t,i);r("new %o",e);var a=t||{};this.handle=i,this.name=i.name||"<anonymous>",this.params=void 0,this.path=void 0,this.regexp=n(e,this.keys=[],a),this.regexp.fast_star="*"===e,this.regexp.fast_slash="/"===e&&!1===a.end}function s(e){if("string"!=typeof e||0===e.length)return e;try{return decodeURIComponent(e)}catch(t){throw t instanceof URIError&&(t.message="Failed to decode param '"+e+"'",t.status=t.statusCode=400),t}}e.exports=o,o.prototype.handle_error=function(e,t,i,n){var r=this.handle;if(4!==r.length)return n(e);try{r(e,t,i,n)}catch(e){n(e)}},o.prototype.handle_request=function(e,t,i){var n=this.handle;if(n.length>3)return i();try{n(e,t,i)}catch(e){i(e)}},o.prototype.match=function(e){var t;if(null!=e){if(this.regexp.fast_slash)return this.params={},this.path="",!0;if(this.regexp.fast_star)return this.params={0:s(e)},this.path=e,!0;t=this.regexp.exec(e)}if(!t)return this.params=void 0,this.path=void 0,!1;this.params={},this.path=t[0];for(var i=this.keys,n=this.params,r=1;r<t.length;r++){var o=i[r-1].name,c=s(t[r]);void 0===c&&a.call(n,o)||(n[o]=c)}return!0}},5369:(e,t,i)=>{"use strict";var n=i(5158)("express:router:route"),r=i(2521),a=i(3342),o=i(8873),s=Array.prototype.slice,c=Object.prototype.toString;function p(e){this.path=e,this.stack=[],n("new %o",e),this.methods={}}e.exports=p,p.prototype._handles_method=function(e){if(this.methods._all)return!0;var t=e.toLowerCase();return"head"!==t||this.methods.head||(t="get"),Boolean(this.methods[t])},p.prototype._options=function(){var e=Object.keys(this.methods);this.methods.get&&!this.methods.head&&e.push("head");for(var t=0;t<e.length;t++)e[t]=e[t].toUpperCase();return e},p.prototype.dispatch=function(e,t,i){var n=0,r=this.stack;if(0===r.length)return i();var a=e.method.toLowerCase();"head"!==a||this.methods.head||(a="get"),e.route=this,function o(s){if(s&&"route"===s)return i();if(s&&"router"===s)return i(s);var c=r[n++];return c?c.method&&c.method!==a?o(s):void(s?c.handle_error(s,e,t,o):c.handle_request(e,t,o)):i(s)}()},p.prototype.all=function(){for(var e=r(s.call(arguments)),t=0;t<e.length;t++){var i=e[t];if("function"!=typeof i){var n=c.call(i),o="Route.all() requires a callback function but got a "+n;throw new TypeError(o)}var p=a("/",{},i);p.method=void 0,this.methods._all=!0,this.stack.push(p)}return this},o.forEach((function(e){p.prototype[e]=function(){for(var t=r(s.call(arguments)),i=0;i<t.length;i++){var o=t[i];if("function"!=typeof o){var p=c.call(o),u="Route."+e+"() requires a callback function but got a "+p;throw new Error(u)}n("%s %o",e,this.path);var l=a("/",{},o);l.method=e,this.methods[e]=!0,this.stack.push(l)}return this}}))},4265:(e,t,i)=>{"use strict";var n=i(9509).Buffer,r=i(7389),a=i(7811),o=i(412)("express"),s=i(2521),c=i(329).mime,p=i(5859),u=i(2611),l=i(129),f=i(1191);function d(e){return function(t,i){var r=n.isBuffer(t)?t:n.from(t,i);return p(r,e)}}function h(e){return l.parse(e,{allowPrototypes:!0})}function m(){return{}}t.etag=d({weak:!1}),t.wetag=d({weak:!0}),t.isAbsolute=function(e){return"/"===e[0]||":"===e[1]&&("\\"===e[2]||"/"===e[2])||"\\\\"===e.substring(0,2)||void 0},t.flatten=o.function(s,"utils.flatten: use array-flatten npm module instead"),t.normalizeType=function(e){return~e.indexOf("/")?function(e,t){for(var i=e.split(/ *; */),n={value:i[0],quality:1,params:{},originalIndex:void 0},r=1;r<i.length;++r){var a=i[r].split(/ *= */);"q"===a[0]?n.quality=parseFloat(a[1]):n.params[a[0]]=a[1]}return n}(e):{value:c.lookup(e),params:{}}},t.normalizeTypes=function(e){for(var i=[],n=0;n<e.length;++n)i.push(t.normalizeType(e[n]));return i},t.contentDisposition=o.function(r,"utils.contentDisposition: use content-disposition npm module instead"),t.compileETag=function(e){var i;if("function"==typeof e)return e;switch(e){case!0:i=t.wetag;break;case!1:break;case"strong":i=t.etag;break;case"weak":i=t.wetag;break;default:throw new TypeError("unknown value for etag function: "+e)}return i},t.compileQueryParser=function(e){var t;if("function"==typeof e)return e;switch(e){case!0:t=f.parse;break;case!1:t=m;break;case"extended":t=h;break;case"simple":t=f.parse;break;default:throw new TypeError("unknown value for query parser function: "+e)}return t},t.compileTrust=function(e){return"function"==typeof e?e:!0===e?function(){return!0}:"number"==typeof e?function(t,i){return i<e}:("string"==typeof e&&(e=e.split(/ *, */)),u.compile(e||[]))},t.setCharset=function(e,t){if(!e||!t)return e;var i=a.parse(e);return i.parameters.charset=t,a.format(i)}},8706:(e,t,i)=>{"use strict";var n=i(5158)("express:view"),r=i(5622),a=i(5747),o=r.dirname,s=r.basename,c=r.extname,p=r.join,u=r.resolve;function l(e,t){var r=t||{};if(this.defaultEngine=r.defaultEngine,this.ext=c(e),this.name=e,this.root=r.root,!this.ext&&!this.defaultEngine)throw new Error("No default engine was specified and no extension was provided.");var a=e;if(this.ext||(this.ext="."!==this.defaultEngine[0]?"."+this.defaultEngine:this.defaultEngine,a+=this.ext),!r.engines[this.ext]){var o=this.ext.substr(1);n('require "%s"',o);var s=i(8967)(o).__express;if("function"!=typeof s)throw new Error('Module "'+o+'" does not provide a view engine.');r.engines[this.ext]=s}this.engine=r.engines[this.ext],this.path=this.lookup(a)}function f(e){n('stat "%s"',e);try{return a.statSync(e)}catch(e){return}}e.exports=l,l.prototype.lookup=function(e){var t,i=[].concat(this.root);n('lookup "%s"',e);for(var r=0;r<i.length&&!t;r++){var a=i[r],c=u(a,e),p=o(c),l=s(c);t=this.resolve(p,l)}return t},l.prototype.render=function(e,t){n('render "%s"',this.path),this.engine(this.path,e,t)},l.prototype.resolve=function(e,t){var i=this.ext,n=p(e,t),r=f(n);return r&&r.isFile()||(r=f(n=p(e,s(t,i),"index"+i)))&&r.isFile()?n:void 0}},8967:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=8967,e.exports=t},7838:(e,t,i)=>{"use strict";var n=i(5158)("finalhandler"),r=i(517),a=i(5573),o=i(338),s=i(8317),c=i(4917),p=i(8170),u=/\x20{2}/g,l=/\n/g,f="function"==typeof setImmediate?setImmediate:function(e){process.nextTick(e.bind.apply(e,arguments))},d=o.isFinished;function h(e){return"boolean"!=typeof e.headersSent?Boolean(e._header):e.headersSent}e.exports=function(e,t,i){var m=i||{},v=m.env||"production",g=m.onerror;return function(i){var m,b,y;if(i||!h(t)){if(i?(void 0===(y=function(e){return"number"==typeof e.status&&e.status>=400&&e.status<600?e.status:"number"==typeof e.statusCode&&e.statusCode>=400&&e.statusCode<600?e.statusCode:void 0}(i))?y=function(e){var t=e.statusCode;return("number"!=typeof t||t<400||t>599)&&(t=500),t}(t):m=function(e){if(e.headers&&"object"==typeof e.headers){for(var t=Object.create(null),i=Object.keys(e.headers),n=0;n<i.length;n++){var r=i[n];t[r]=e.headers[r]}return t}}(i),b=function(e,t,i){var n;return"production"!==i&&((n=e.stack)||"function"!=typeof e.toString||(n=e.toString())),n||c[t]}(i,y,v)):(y=404,b="Cannot "+e.method+" "+r(function(e){try{return s.original(e).pathname}catch(e){return"resource"}}(e))),n("default %s",y),i&&g&&f(g,i,e,t),h(t))return n("cannot %d after headers sent",y),void e.socket.destroy();!function(e,t,i,n,r){function s(){var o=function(e){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>'+a(e).replace(l,"<br>").replace(u," &nbsp;")+"</pre>\n</body>\n</html>\n"}(r);t.statusCode=i,t.statusMessage=c[i],function(e,t){if(t)for(var i=Object.keys(t),n=0;n<i.length;n++){var r=i[n];e.setHeader(r,t[r])}}(t,n),t.setHeader("Content-Security-Policy","default-src 'none'"),t.setHeader("X-Content-Type-Options","nosniff"),t.setHeader("Content-Type","text/html; charset=utf-8"),t.setHeader("Content-Length",Buffer.byteLength(o,"utf8")),"HEAD"!==e.method?t.end(o,"utf8"):t.end()}d(e)?s():(p(e),o(e,s),e.resume())}(e,t,y,m,b)}else n("cannot 404 after headers sent")}}},271:e=>{"use strict";e.exports=function(e){if(!e)throw new TypeError("argument req is required");var t=function(e){for(var t=e.length,i=[],n=e.length,r=e.length-1;r>=0;r--)switch(e.charCodeAt(r)){case 32:n===t&&(n=t=r);break;case 44:n!==t&&i.push(e.substring(n,t)),n=t=r;break;default:n=r}return n!==t&&i.push(e.substring(n,t)),i}(e.headers["x-forwarded-for"]||"");return[e.connection.remoteAddress].concat(t)}},9635:e=>{"use strict";var t=/(?:^|,)\s*?no-cache\s*?(?:,|$)/;function i(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,n){var r=e["if-modified-since"],a=e["if-none-match"];if(!r&&!a)return!1;var o=e["cache-control"];if(o&&t.test(o))return!1;if(a&&"*"!==a){var s=n.etag;if(!s)return!1;for(var c=!0,p=function(e){for(var t=0,i=[],n=0,r=0,a=e.length;r<a;r++)switch(e.charCodeAt(r)){case 32:n===t&&(n=t=r+1);break;case 44:i.push(e.substring(n,t)),n=t=r+1;break;default:t=r+1}return i.push(e.substring(n,t)),i}(a),u=0;u<p.length;u++){var l=p[u];if(l===s||l==="W/"+s||"W/"+l===s){c=!1;break}}if(c)return!1}if(r){var f=n["last-modified"];if(!(f&&i(f)<=i(r)))return!1}return!0}},9009:(e,t,i)=>{"use strict";var n,r,a,o=i(412)("http-errors"),s=i(6644),c=i(4917),p=i(4378),u=i(2953);function l(e){return Number(String(e).charAt(0)+"00")}function f(e,t){var i=Object.getOwnPropertyDescriptor(e,"name");i&&i.configurable&&(i.value=t,Object.defineProperty(e,"name",i))}e.exports=function e(){for(var t,i,n=500,r={},a=0;a<arguments.length;a++){var s=arguments[a];if(s instanceof Error)n=(t=s).status||t.statusCode||n;else switch(typeof s){case"string":i=s;break;case"number":n=s,0!==a&&o("non-first-argument status code; replace with createError("+s+", ...)");break;case"object":r=s}}"number"==typeof n&&(n<400||n>=600)&&o("non-error status code; use only 4xx or 5xx status codes"),("number"!=typeof n||!c[n]&&(n<400||n>=600))&&(n=500);var p=e[n]||e[l(n)];for(var u in t||(t=p?new p(i):new Error(i||c[n]),Error.captureStackTrace(t,e)),p&&t instanceof p&&t.status===n||(t.expose=n<500,t.status=t.statusCode=n),r)"status"!==u&&"statusCode"!==u&&(t[u]=r[u]);return t},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return p(e,Error),e}(),n=e.exports,r=c.codes,a=e.exports.HttpError,r.forEach((function(e){var t,i=u(c[e]);switch(l(e)){case 400:t=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function r(e){var t=null!=e?e:c[i],a=new Error(t);return Error.captureStackTrace(a,r),s(a,r.prototype),Object.defineProperty(a,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),a}return p(r,e),f(r,n),r.prototype.status=i,r.prototype.statusCode=i,r.prototype.expose=!0,r}(a,i,e);break;case 500:t=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function r(e){var t=null!=e?e:c[i],a=new Error(t);return Error.captureStackTrace(a,r),s(a,r.prototype),Object.defineProperty(a,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),a}return p(r,e),f(r,n),r.prototype.status=i,r.prototype.statusCode=i,r.prototype.expose=!1,r}(a,i,e)}t&&(n[e]=t,n[i]=t)})),n["I'mateapot"]=o.function(n.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')},688:(e,t,i)=>{"use strict";var n=i(2399).Buffer;t._dbcs=p;for(var r=-1,a=-10,o=-1e3,s=new Array(256),c=0;c<256;c++)s[c]=r;function p(e,t){if(this.encodingName=e.encodingName,!e)throw new Error("DBCS codec is called without the data.");if(!e.table)throw new Error("Encoding '"+this.encodingName+"' has no data.");var i=e.table();this.decodeTables=[],this.decodeTables[0]=s.slice(0),this.decodeTableSeq=[];for(var n=0;n<i.length;n++)this._addDecodeChunk(i[n]);this.defaultCharUnicode=t.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var a={};if(e.encodeSkipVals)for(n=0;n<e.encodeSkipVals.length;n++){var c=e.encodeSkipVals[n];if("number"==typeof c)a[c]=!0;else for(var p=c.from;p<=c.to;p++)a[p]=!0}if(this._fillEncodeTable(0,0,a),e.encodeAdd)for(var u in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,u)&&this._setEncodeChar(u.charCodeAt(0),e.encodeAdd[u]);if(this.defCharSB=this.encodeTable[0][t.defaultCharSingleByte.charCodeAt(0)],this.defCharSB===r&&(this.defCharSB=this.encodeTable[0]["?"]),this.defCharSB===r&&(this.defCharSB="?".charCodeAt(0)),"function"==typeof e.gb18030){this.gb18030=e.gb18030();var l=this.decodeTables.length,f=this.decodeTables[l]=s.slice(0),d=this.decodeTables.length,h=this.decodeTables[d]=s.slice(0);for(n=129;n<=254;n++){var m=o-this.decodeTables[0][n],v=this.decodeTables[m];for(p=48;p<=57;p++)v[p]=o-l}for(n=129;n<=254;n++)f[n]=o-d;for(n=48;n<=57;n++)h[n]=-2}}function u(e,t){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=t.encodeTable,this.encodeTableSeq=t.encodeTableSeq,this.defaultCharSingleByte=t.defCharSB,this.gb18030=t.gb18030}function l(e,t){this.nodeIdx=0,this.prevBuf=n.alloc(0),this.decodeTables=t.decodeTables,this.decodeTableSeq=t.decodeTableSeq,this.defaultCharUnicode=t.defaultCharUnicode,this.gb18030=t.gb18030}function f(e,t){if(e[0]>t)return-1;for(var i=0,n=e.length;i<n-1;){var r=i+Math.floor((n-i+1)/2);e[r]<=t?i=r:n=r}return i}p.prototype.encoder=u,p.prototype.decoder=l,p.prototype._getDecodeTrieNode=function(e){for(var t=[];e>0;e>>=8)t.push(255&e);0==t.length&&t.push(0);for(var i=this.decodeTables[0],n=t.length-1;n>0;n--){var a=i[t[n]];if(a==r)i[t[n]]=o-this.decodeTables.length,this.decodeTables.push(i=s.slice(0));else{if(!(a<=o))throw new Error("Overwrite byte in "+this.encodingName+", addr: "+e.toString(16));i=this.decodeTables[o-a]}}return i},p.prototype._addDecodeChunk=function(e){var t=parseInt(e[0],16),i=this._getDecodeTrieNode(t);t&=255;for(var n=1;n<e.length;n++){var r=e[n];if("string"==typeof r)for(var o=0;o<r.length;){var s=r.charCodeAt(o++);if(55296<=s&&s<56320){var c=r.charCodeAt(o++);if(!(56320<=c&&c<57344))throw new Error("Incorrect surrogate pair in "+this.encodingName+" at chunk "+e[0]);i[t++]=65536+1024*(s-55296)+(c-56320)}else if(4080<s&&s<=4095){for(var p=4095-s+2,u=[],l=0;l<p;l++)u.push(r.charCodeAt(o++));i[t++]=a-this.decodeTableSeq.length,this.decodeTableSeq.push(u)}else i[t++]=s}else{if("number"!=typeof r)throw new Error("Incorrect type '"+typeof r+"' given in "+this.encodingName+" at chunk "+e[0]);var f=i[t-1]+1;for(o=0;o<r;o++)i[t++]=f++}}if(t>255)throw new Error("Incorrect chunk in "+this.encodingName+" at addr "+e[0]+": too long"+t)},p.prototype._getEncodeBucket=function(e){var t=e>>8;return void 0===this.encodeTable[t]&&(this.encodeTable[t]=s.slice(0)),this.encodeTable[t]},p.prototype._setEncodeChar=function(e,t){var i=this._getEncodeBucket(e),n=255&e;i[n]<=a?this.encodeTableSeq[a-i[n]][-1]=t:i[n]==r&&(i[n]=t)},p.prototype._setEncodeSequence=function(e,t){var i,n=e[0],o=this._getEncodeBucket(n),s=255&n;o[s]<=a?i=this.encodeTableSeq[a-o[s]]:(i={},o[s]!==r&&(i[-1]=o[s]),o[s]=a-this.encodeTableSeq.length,this.encodeTableSeq.push(i));for(var c=1;c<e.length-1;c++){var p=i[n];"object"==typeof p?i=p:(i=i[n]={},void 0!==p&&(i[-1]=p))}i[n=e[e.length-1]]=t},p.prototype._fillEncodeTable=function(e,t,i){for(var n=this.decodeTables[e],r=0;r<256;r++){var s=n[r],c=t+r;i[c]||(s>=0?this._setEncodeChar(s,c):s<=o?this._fillEncodeTable(o-s,c<<8,i):s<=a&&this._setEncodeSequence(this.decodeTableSeq[a-s],c))}},u.prototype.write=function(e){for(var t=n.alloc(e.length*(this.gb18030?4:3)),i=this.leadSurrogate,o=this.seqObj,s=-1,c=0,p=0;;){if(-1===s){if(c==e.length)break;var u=e.charCodeAt(c++)}else u=s,s=-1;if(55296<=u&&u<57344)if(u<56320){if(-1===i){i=u;continue}i=u,u=r}else-1!==i?(u=65536+1024*(i-55296)+(u-56320),i=-1):u=r;else-1!==i&&(s=u,u=r,i=-1);var l=r;if(void 0!==o&&u!=r){var d=o[u];if("object"==typeof d){o=d;continue}"number"==typeof d?l=d:null==d&&void 0!==(d=o[-1])&&(l=d,s=u),o=void 0}else if(u>=0){var h=this.encodeTable[u>>8];if(void 0!==h&&(l=h[255&u]),l<=a){o=this.encodeTableSeq[a-l];continue}if(l==r&&this.gb18030){var m=f(this.gb18030.uChars,u);if(-1!=m){l=this.gb18030.gbChars[m]+(u-this.gb18030.uChars[m]),t[p++]=129+Math.floor(l/12600),l%=12600,t[p++]=48+Math.floor(l/1260),l%=1260,t[p++]=129+Math.floor(l/10),l%=10,t[p++]=48+l;continue}}}l===r&&(l=this.defaultCharSingleByte),l<256?t[p++]=l:l<65536?(t[p++]=l>>8,t[p++]=255&l):(t[p++]=l>>16,t[p++]=l>>8&255,t[p++]=255&l)}return this.seqObj=o,this.leadSurrogate=i,t.slice(0,p)},u.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=n.alloc(10),t=0;if(this.seqObj){var i=this.seqObj[-1];void 0!==i&&(i<256?e[t++]=i:(e[t++]=i>>8,e[t++]=255&i)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[t++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,t)}},u.prototype.findIdx=f,l.prototype.write=function(e){var t=n.alloc(2*e.length),i=this.nodeIdx,s=this.prevBuf,c=this.prevBuf.length,p=-this.prevBuf.length;c>0&&(s=n.concat([s,e.slice(0,10)]));for(var u=0,l=0;u<e.length;u++){var d,h=u>=0?e[u]:s[u+c];if((d=this.decodeTables[i][h])>=0);else if(d===r)u=p,d=this.defaultCharUnicode.charCodeAt(0);else if(-2===d){var m=p>=0?e.slice(p,u+1):s.slice(p+c,u+1+c),v=12600*(m[0]-129)+1260*(m[1]-48)+10*(m[2]-129)+(m[3]-48),g=f(this.gb18030.gbChars,v);d=this.gb18030.uChars[g]+v-this.gb18030.gbChars[g]}else{if(d<=o){i=o-d;continue}if(!(d<=a))throw new Error("iconv-lite internal error: invalid decoding table value "+d+" at "+i+"/"+h);for(var b=this.decodeTableSeq[a-d],y=0;y<b.length-1;y++)d=b[y],t[l++]=255&d,t[l++]=d>>8;d=b[b.length-1]}if(d>65535){d-=65536;var x=55296+Math.floor(d/1024);t[l++]=255&x,t[l++]=x>>8,d=56320+d%1024}t[l++]=255&d,t[l++]=d>>8,i=0,p=u+1}return this.nodeIdx=i,this.prevBuf=p>=0?e.slice(p):s.slice(p+c),t.slice(0,l).toString("ucs2")},l.prototype.end=function(){for(var e="";this.prevBuf.length>0;){e+=this.defaultCharUnicode;var t=this.prevBuf.slice(1);this.prevBuf=n.alloc(0),this.nodeIdx=0,t.length>0&&(e+=this.write(t))}return this.nodeIdx=0,e}},5990:(e,t,i)=>{"use strict";e.exports={shiftjis:{type:"_dbcs",table:function(){return i(4108)},encodeAdd:{"¥":92,"‾":126},encodeSkipVals:[{from:60736,to:63808}]},csshiftjis:"shiftjis",mskanji:"shiftjis",sjis:"shiftjis",windows31j:"shiftjis",ms31j:"shiftjis",xsjis:"shiftjis",windows932:"shiftjis",ms932:"shiftjis",932:"shiftjis",cp932:"shiftjis",eucjp:{type:"_dbcs",table:function(){return i(2417)},encodeAdd:{"¥":92,"‾":126}},gb2312:"cp936",gb231280:"cp936",gb23121980:"cp936",csgb2312:"cp936",csiso58gb231280:"cp936",euccn:"cp936",windows936:"cp936",ms936:"cp936",936:"cp936",cp936:{type:"_dbcs",table:function(){return i(7803)}},gbk:{type:"_dbcs",table:function(){return i(7803).concat(i(7419))}},xgbk:"gbk",isoir58:"gbk",gb18030:{type:"_dbcs",table:function(){return i(7803).concat(i(7419))},gb18030:function(){return i(6351)},encodeSkipVals:[128],encodeAdd:{"€":41699}},chinese:"gb18030",windows949:"cp949",ms949:"cp949",949:"cp949",cp949:{type:"_dbcs",table:function(){return i(7013)}},cseuckr:"cp949",csksc56011987:"cp949",euckr:"cp949",isoir149:"cp949",korean:"cp949",ksc56011987:"cp949",ksc56011989:"cp949",ksc5601:"cp949",windows950:"cp950",ms950:"cp950",950:"cp950",cp950:{type:"_dbcs",table:function(){return i(3104)}},big5:"big5hkscs",big5hkscs:{type:"_dbcs",table:function(){return i(3104).concat(i(3612))},encodeSkipVals:[41676]},cnbig5:"big5hkscs",csbig5:"big5hkscs",xxbig5:"big5hkscs"}},6934:(e,t,i)=>{"use strict";for(var n=[i(1025),i(1279),i(758),i(9068),i(288),i(7018),i(688),i(5990)],r=0;r<n.length;r++){var a=n[r];for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(t[o]=a[o])}},1025:(e,t,i)=>{"use strict";var n=i(2399).Buffer;function r(e,t){this.enc=e.encodingName,this.bomAware=e.bomAware,"base64"===this.enc?this.encoder=c:"cesu8"===this.enc&&(this.enc="utf8",this.encoder=p,"💩"!==n.from("eda0bdedb2a9","hex").toString()&&(this.decoder=u,this.defaultCharUnicode=t.defaultCharUnicode))}e.exports={utf8:{type:"_internal",bomAware:!0},cesu8:{type:"_internal",bomAware:!0},unicode11utf8:"utf8",ucs2:{type:"_internal",bomAware:!0},utf16le:"ucs2",binary:{type:"_internal"},base64:{type:"_internal"},hex:{type:"_internal"},_internal:r},r.prototype.encoder=s,r.prototype.decoder=o;var a=i(4304).StringDecoder;function o(e,t){a.call(this,t.enc)}function s(e,t){this.enc=t.enc}function c(e,t){this.prevStr=""}function p(e,t){}function u(e,t){this.acc=0,this.contBytes=0,this.accBytes=0,this.defaultCharUnicode=t.defaultCharUnicode}a.prototype.end||(a.prototype.end=function(){}),o.prototype=a.prototype,s.prototype.write=function(e){return n.from(e,this.enc)},s.prototype.end=function(){},c.prototype.write=function(e){var t=(e=this.prevStr+e).length-e.length%4;return this.prevStr=e.slice(t),e=e.slice(0,t),n.from(e,"base64")},c.prototype.end=function(){return n.from(this.prevStr,"base64")},p.prototype.write=function(e){for(var t=n.alloc(3*e.length),i=0,r=0;r<e.length;r++){var a=e.charCodeAt(r);a<128?t[i++]=a:a<2048?(t[i++]=192+(a>>>6),t[i++]=128+(63&a)):(t[i++]=224+(a>>>12),t[i++]=128+(a>>>6&63),t[i++]=128+(63&a))}return t.slice(0,i)},p.prototype.end=function(){},u.prototype.write=function(e){for(var t=this.acc,i=this.contBytes,n=this.accBytes,r="",a=0;a<e.length;a++){var o=e[a];128!=(192&o)?(i>0&&(r+=this.defaultCharUnicode,i=0),o<128?r+=String.fromCharCode(o):o<224?(t=31&o,i=1,n=1):o<240?(t=15&o,i=2,n=1):r+=this.defaultCharUnicode):i>0?(t=t<<6|63&o,n++,0==--i&&(r+=2===n&&t<128&&t>0||3===n&&t<2048?this.defaultCharUnicode:String.fromCharCode(t))):r+=this.defaultCharUnicode}return this.acc=t,this.contBytes=i,this.accBytes=n,r},u.prototype.end=function(){var e=0;return this.contBytes>0&&(e+=this.defaultCharUnicode),e}},9068:(e,t,i)=>{"use strict";var n=i(2399).Buffer;function r(e,t){if(!e)throw new Error("SBCS codec is called without the data.");if(!e.chars||128!==e.chars.length&&256!==e.chars.length)throw new Error("Encoding '"+e.type+"' has incorrect 'chars' (must be of len 128 or 256)");if(128===e.chars.length){for(var i="",r=0;r<128;r++)i+=String.fromCharCode(r);e.chars=i+e.chars}this.decodeBuf=n.from(e.chars,"ucs2");var a=n.alloc(65536,t.defaultCharSingleByte.charCodeAt(0));for(r=0;r<e.chars.length;r++)a[e.chars.charCodeAt(r)]=r;this.encodeBuf=a}function a(e,t){this.encodeBuf=t.encodeBuf}function o(e,t){this.decodeBuf=t.decodeBuf}t._sbcs=r,r.prototype.encoder=a,r.prototype.decoder=o,a.prototype.write=function(e){for(var t=n.alloc(e.length),i=0;i<e.length;i++)t[i]=this.encodeBuf[e.charCodeAt(i)];return t},a.prototype.end=function(){},o.prototype.write=function(e){for(var t=this.decodeBuf,i=n.alloc(2*e.length),r=0,a=0,o=0;o<e.length;o++)r=2*e[o],i[a=2*o]=t[r],i[a+1]=t[r+1];return i.toString("ucs2")},o.prototype.end=function(){}},7018:e=>{"use strict";e.exports={437:"cp437",737:"cp737",775:"cp775",850:"cp850",852:"cp852",855:"cp855",856:"cp856",857:"cp857",858:"cp858",860:"cp860",861:"cp861",862:"cp862",863:"cp863",864:"cp864",865:"cp865",866:"cp866",869:"cp869",874:"windows874",922:"cp922",1046:"cp1046",1124:"cp1124",1125:"cp1125",1129:"cp1129",1133:"cp1133",1161:"cp1161",1162:"cp1162",1163:"cp1163",1250:"windows1250",1251:"windows1251",1252:"windows1252",1253:"windows1253",1254:"windows1254",1255:"windows1255",1256:"windows1256",1257:"windows1257",1258:"windows1258",28591:"iso88591",28592:"iso88592",28593:"iso88593",28594:"iso88594",28595:"iso88595",28596:"iso88596",28597:"iso88597",28598:"iso88598",28599:"iso88599",28600:"iso885910",28601:"iso885911",28603:"iso885913",28604:"iso885914",28605:"iso885915",28606:"iso885916",windows874:{type:"_sbcs",chars:"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},win874:"windows874",cp874:"windows874",windows1250:{type:"_sbcs",chars:"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},win1250:"windows1250",cp1250:"windows1250",windows1251:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},win1251:"windows1251",cp1251:"windows1251",windows1252:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},win1252:"windows1252",cp1252:"windows1252",windows1253:{type:"_sbcs",chars:"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},win1253:"windows1253",cp1253:"windows1253",windows1254:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},win1254:"windows1254",cp1254:"windows1254",windows1255:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},win1255:"windows1255",cp1255:"windows1255",windows1256:{type:"_sbcs",chars:"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"},win1256:"windows1256",cp1256:"windows1256",windows1257:{type:"_sbcs",chars:"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"},win1257:"windows1257",cp1257:"windows1257",windows1258:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},win1258:"windows1258",cp1258:"windows1258",iso88591:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28591:"iso88591",iso88592:{type:"_sbcs",chars:" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},cp28592:"iso88592",iso88593:{type:"_sbcs",chars:" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"},cp28593:"iso88593",iso88594:{type:"_sbcs",chars:" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"},cp28594:"iso88594",iso88595:{type:"_sbcs",chars:" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"},cp28595:"iso88595",iso88596:{type:"_sbcs",chars:" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"},cp28596:"iso88596",iso88597:{type:"_sbcs",chars:" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},cp28597:"iso88597",iso88598:{type:"_sbcs",chars:" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},cp28598:"iso88598",iso88599:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},cp28599:"iso88599",iso885910:{type:"_sbcs",chars:" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"},cp28600:"iso885910",iso885911:{type:"_sbcs",chars:" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},cp28601:"iso885911",iso885913:{type:"_sbcs",chars:" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"},cp28603:"iso885913",iso885914:{type:"_sbcs",chars:" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"},cp28604:"iso885914",iso885915:{type:"_sbcs",chars:" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28605:"iso885915",iso885916:{type:"_sbcs",chars:" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"},cp28606:"iso885916",cp437:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm437:"cp437",csibm437:"cp437",cp737:{type:"_sbcs",chars:"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "},ibm737:"cp737",csibm737:"cp737",cp775:{type:"_sbcs",chars:"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "},ibm775:"cp775",csibm775:"cp775",cp850:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm850:"cp850",csibm850:"cp850",cp852:{type:"_sbcs",chars:"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "},ibm852:"cp852",csibm852:"cp852",cp855:{type:"_sbcs",chars:"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "},ibm855:"cp855",csibm855:"cp855",cp856:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm856:"cp856",csibm856:"cp856",cp857:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "},ibm857:"cp857",csibm857:"cp857",cp858:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm858:"cp858",csibm858:"cp858",cp860:{type:"_sbcs",chars:"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm860:"cp860",csibm860:"cp860",cp861:{type:"_sbcs",chars:"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm861:"cp861",csibm861:"cp861",cp862:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm862:"cp862",csibm862:"cp862",cp863:{type:"_sbcs",chars:"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm863:"cp863",csibm863:"cp863",cp864:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"},ibm864:"cp864",csibm864:"cp864",cp865:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm865:"cp865",csibm865:"cp865",cp866:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "},ibm866:"cp866",csibm866:"cp866",cp869:{type:"_sbcs",chars:"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "},ibm869:"cp869",csibm869:"cp869",cp922:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"},ibm922:"cp922",csibm922:"cp922",cp1046:{type:"_sbcs",chars:"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"},ibm1046:"cp1046",csibm1046:"cp1046",cp1124:{type:"_sbcs",chars:" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"},ibm1124:"cp1124",csibm1124:"cp1124",cp1125:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "},ibm1125:"cp1125",csibm1125:"cp1125",cp1129:{type:"_sbcs",chars:" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1129:"cp1129",csibm1129:"cp1129",cp1133:{type:"_sbcs",chars:" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"},ibm1133:"cp1133",csibm1133:"cp1133",cp1161:{type:"_sbcs",chars:"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "},ibm1161:"cp1161",csibm1161:"cp1161",cp1162:{type:"_sbcs",chars:"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},ibm1162:"cp1162",csibm1162:"cp1162",cp1163:{type:"_sbcs",chars:" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1163:"cp1163",csibm1163:"cp1163",maccroatian:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"},maccyrillic:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},macgreek:{type:"_sbcs",chars:"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"},maciceland:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macroman:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macromania:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macthai:{type:"_sbcs",chars:"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\ufeff​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"},macturkish:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"},macukraine:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},koi8r:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8u:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8ru:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8t:{type:"_sbcs",chars:"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},armscii8:{type:"_sbcs",chars:" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"},rk1048:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},tcvn:{type:"_sbcs",chars:"\0ÚỤỪỬỮ\b\t\n\v\f\rỨỰỲỶỸÝỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"},georgianacademy:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},georgianps:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},pt154:{type:"_sbcs",chars:"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},viscii:{type:"_sbcs",chars:"\0ẲẴẪ\b\t\n\v\f\rỶỸỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"},iso646cn:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},iso646jp:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},hproman8:{type:"_sbcs",chars:" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"},macintosh:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},ascii:{type:"_sbcs",chars:"��������������������������������������������������������������������������������������������������������������������������������"},tis620:{type:"_sbcs",chars:"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"}}},288:e=>{"use strict";e.exports={10029:"maccenteuro",maccenteuro:{type:"_sbcs",chars:"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"},808:"cp808",ibm808:"cp808",cp808:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "},mik:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ascii8bit:"ascii",usascii:"ascii",ansix34:"ascii",ansix341968:"ascii",ansix341986:"ascii",csascii:"ascii",cp367:"ascii",ibm367:"ascii",isoir6:"ascii",iso646us:"ascii",iso646irv:"ascii",us:"ascii",latin1:"iso88591",latin2:"iso88592",latin3:"iso88593",latin4:"iso88594",latin5:"iso88599",latin6:"iso885910",latin7:"iso885913",latin8:"iso885914",latin9:"iso885915",latin10:"iso885916",csisolatin1:"iso88591",csisolatin2:"iso88592",csisolatin3:"iso88593",csisolatin4:"iso88594",csisolatincyrillic:"iso88595",csisolatinarabic:"iso88596",csisolatingreek:"iso88597",csisolatinhebrew:"iso88598",csisolatin5:"iso88599",csisolatin6:"iso885910",l1:"iso88591",l2:"iso88592",l3:"iso88593",l4:"iso88594",l5:"iso88599",l6:"iso885910",l7:"iso885913",l8:"iso885914",l9:"iso885915",l10:"iso885916",isoir14:"iso646jp",isoir57:"iso646cn",isoir100:"iso88591",isoir101:"iso88592",isoir109:"iso88593",isoir110:"iso88594",isoir144:"iso88595",isoir127:"iso88596",isoir126:"iso88597",isoir138:"iso88598",isoir148:"iso88599",isoir157:"iso885910",isoir166:"tis620",isoir179:"iso885913",isoir199:"iso885914",isoir203:"iso885915",isoir226:"iso885916",cp819:"iso88591",ibm819:"iso88591",cyrillic:"iso88595",arabic:"iso88596",arabic8:"iso88596",ecma114:"iso88596",asmo708:"iso88596",greek:"iso88597",greek8:"iso88597",ecma118:"iso88597",elot928:"iso88597",hebrew:"iso88598",hebrew8:"iso88598",turkish:"iso88599",turkish8:"iso88599",thai:"iso885911",thai8:"iso885911",celtic:"iso885914",celtic8:"iso885914",isoceltic:"iso885914",tis6200:"tis620",tis62025291:"tis620",tis62025330:"tis620",1e4:"macroman",10006:"macgreek",10007:"maccyrillic",10079:"maciceland",10081:"macturkish",cspc8codepage437:"cp437",cspc775baltic:"cp775",cspc850multilingual:"cp850",cspcp852:"cp852",cspc862latinhebrew:"cp862",cpgr:"cp869",msee:"cp1250",mscyrl:"cp1251",msansi:"cp1252",msgreek:"cp1253",msturk:"cp1254",mshebr:"cp1255",msarab:"cp1256",winbaltrim:"cp1257",cp20866:"koi8r",20866:"koi8r",ibm878:"koi8r",cskoi8r:"koi8r",cp21866:"koi8u",21866:"koi8u",ibm1168:"koi8u",strk10482002:"rk1048",tcvn5712:"tcvn",tcvn57121:"tcvn",gb198880:"iso646cn",cn:"iso646cn",csiso14jisc6220ro:"iso646jp",jisc62201969ro:"iso646jp",jp:"iso646jp",cshproman8:"hproman8",r8:"hproman8",roman8:"hproman8",xroman8:"hproman8",ibm1051:"hproman8",mac:"macintosh",csmacintosh:"macintosh"}},3612:e=>{"use strict";e.exports=JSON.parse('[["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]')},7803:e=>{"use strict";e.exports=JSON.parse('[["0","\\u0000",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]')},7013:e=>{"use strict";e.exports=JSON.parse('[["0","\\u0000",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]')},3104:e=>{"use strict";e.exports=JSON.parse('[["0","\\u0000",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]')},2417:e=>{"use strict";e.exports=JSON.parse('[["0","\\u0000",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]')},6351:e=>{"use strict";e.exports=JSON.parse('{"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}')},7419:e=>{"use strict";e.exports=JSON.parse('[["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc",""],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]]')},4108:e=>{"use strict";e.exports=JSON.parse('[["0","\\u0000",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]')},1279:(e,t,i)=>{"use strict";var n=i(2399).Buffer;function r(){}function a(){}function o(){this.overflowByte=-1}function s(e,t){this.iconv=t}function c(e,t){void 0===(e=e||{}).addBOM&&(e.addBOM=!0),this.encoder=t.iconv.getEncoder("utf-16le",e)}function p(e,t){this.decoder=null,this.initialBytes=[],this.initialBytesLen=0,this.options=e||{},this.iconv=t.iconv}function u(e,t){var i=t||"utf-16le";if(e.length>=2)if(254==e[0]&&255==e[1])i="utf-16be";else if(255==e[0]&&254==e[1])i="utf-16le";else{for(var n=0,r=0,a=Math.min(e.length-e.length%2,64),o=0;o<a;o+=2)0===e[o]&&0!==e[o+1]&&r++,0!==e[o]&&0===e[o+1]&&n++;r>n?i="utf-16be":r<n&&(i="utf-16le")}return i}t.utf16be=r,r.prototype.encoder=a,r.prototype.decoder=o,r.prototype.bomAware=!0,a.prototype.write=function(e){for(var t=n.from(e,"ucs2"),i=0;i<t.length;i+=2){var r=t[i];t[i]=t[i+1],t[i+1]=r}return t},a.prototype.end=function(){},o.prototype.write=function(e){if(0==e.length)return"";var t=n.alloc(e.length+1),i=0,r=0;for(-1!==this.overflowByte&&(t[0]=e[0],t[1]=this.overflowByte,i=1,r=2);i<e.length-1;i+=2,r+=2)t[r]=e[i+1],t[r+1]=e[i];return this.overflowByte=i==e.length-1?e[e.length-1]:-1,t.slice(0,r).toString("ucs2")},o.prototype.end=function(){},t.utf16=s,s.prototype.encoder=c,s.prototype.decoder=p,c.prototype.write=function(e){return this.encoder.write(e)},c.prototype.end=function(){return this.encoder.end()},p.prototype.write=function(e){if(!this.decoder){if(this.initialBytes.push(e),this.initialBytesLen+=e.length,this.initialBytesLen<16)return"";var t=u(e=n.concat(this.initialBytes),this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options),this.initialBytes.length=this.initialBytesLen=0}return this.decoder.write(e)},p.prototype.end=function(){if(!this.decoder){var e=n.concat(this.initialBytes),t=u(e,this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options);var i=this.decoder.write(e),r=this.decoder.end();return r?i+r:i}return this.decoder.end()}},758:(e,t,i)=>{"use strict";var n=i(2399).Buffer;function r(e,t){this.iconv=t}t.utf7=r,t.unicode11utf7="utf7",r.prototype.encoder=o,r.prototype.decoder=s,r.prototype.bomAware=!0;var a=/[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;function o(e,t){this.iconv=t.iconv}function s(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}o.prototype.write=function(e){return n.from(e.replace(a,function(e){return"+"+("+"===e?"":this.iconv.encode(e,"utf16-be").toString("base64").replace(/=+$/,""))+"-"}.bind(this)))},o.prototype.end=function(){};for(var c=/[A-Za-z0-9\/+]/,p=[],u=0;u<256;u++)p[u]=c.test(String.fromCharCode(u));var l="+".charCodeAt(0),f="-".charCodeAt(0),d="&".charCodeAt(0);function h(e,t){this.iconv=t}function m(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=n.alloc(6),this.base64AccumIdx=0}function v(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}s.prototype.write=function(e){for(var t="",i=0,r=this.inBase64,a=this.base64Accum,o=0;o<e.length;o++)if(r){if(!p[e[o]]){if(o==i&&e[o]==f)t+="+";else{var s=a+e.slice(i,o).toString();t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}e[o]!=f&&o--,i=o+1,r=!1,a=""}}else e[o]==l&&(t+=this.iconv.decode(e.slice(i,o),"ascii"),i=o+1,r=!0);if(r){var c=(s=a+e.slice(i).toString()).length-s.length%8;a=s.slice(c),s=s.slice(0,c),t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=r,this.base64Accum=a,t},s.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(n.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e},t.utf7imap=h,h.prototype.encoder=m,h.prototype.decoder=v,h.prototype.bomAware=!0,m.prototype.write=function(e){for(var t=this.inBase64,i=this.base64Accum,r=this.base64AccumIdx,a=n.alloc(5*e.length+10),o=0,s=0;s<e.length;s++){var c=e.charCodeAt(s);32<=c&&c<=126?(t&&(r>0&&(o+=a.write(i.slice(0,r).toString("base64").replace(/\//g,",").replace(/=+$/,""),o),r=0),a[o++]=f,t=!1),t||(a[o++]=c,c===d&&(a[o++]=f))):(t||(a[o++]=d,t=!0),t&&(i[r++]=c>>8,i[r++]=255&c,r==i.length&&(o+=a.write(i.toString("base64").replace(/\//g,","),o),r=0)))}return this.inBase64=t,this.base64AccumIdx=r,a.slice(0,o)},m.prototype.end=function(){var e=n.alloc(10),t=0;return this.inBase64&&(this.base64AccumIdx>0&&(t+=e.write(this.base64Accum.slice(0,this.base64AccumIdx).toString("base64").replace(/\//g,",").replace(/=+$/,""),t),this.base64AccumIdx=0),e[t++]=f,this.inBase64=!1),e.slice(0,t)};var g=p.slice();g[",".charCodeAt(0)]=!0,v.prototype.write=function(e){for(var t="",i=0,r=this.inBase64,a=this.base64Accum,o=0;o<e.length;o++)if(r){if(!g[e[o]]){if(o==i&&e[o]==f)t+="&";else{var s=a+e.slice(i,o).toString().replace(/,/g,"/");t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}e[o]!=f&&o--,i=o+1,r=!1,a=""}}else e[o]==d&&(t+=this.iconv.decode(e.slice(i,o),"ascii"),i=o+1,r=!0);if(r){var c=(s=a+e.slice(i).toString().replace(/,/g,"/")).length-s.length%8;a=s.slice(c),s=s.slice(0,c),t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=r,this.base64Accum=a,t},v.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(n.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e}},5395:(e,t)=>{"use strict";function i(e,t){this.encoder=e,this.addBOM=!0}function n(e,t){this.decoder=e,this.pass=!1,this.options=t||{}}t.PrependBOM=i,i.prototype.write=function(e){return this.addBOM&&(e="\ufeff"+e,this.addBOM=!1),this.encoder.write(e)},i.prototype.end=function(){return this.encoder.end()},t.StripBOM=n,n.prototype.write=function(e){var t=this.decoder.write(e);return this.pass||!t||("\ufeff"===t[0]&&(t=t.slice(1),"function"==typeof this.options.stripBOM&&this.options.stripBOM()),this.pass=!0),t},n.prototype.end=function(){return this.decoder.end()}},8544:(e,t,i)=>{"use strict";var n=i(4293).Buffer;e.exports=function(e){var t=void 0;e.supportsNodeEncodingsExtension=!(n.from||new n(0)instanceof Uint8Array),e.extendNodeEncodings=function(){if(!t){if(t={},!e.supportsNodeEncodingsExtension)return console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node"),void console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");var r={hex:!0,utf8:!0,"utf-8":!0,ascii:!0,binary:!0,base64:!0,ucs2:!0,"ucs-2":!0,utf16le:!0,"utf-16le":!0};n.isNativeEncoding=function(e){return e&&r[e.toLowerCase()]};var a=i(4293).SlowBuffer;if(t.SlowBufferToString=a.prototype.toString,a.prototype.toString=function(i,r,a){return i=String(i||"utf8").toLowerCase(),n.isNativeEncoding(i)?t.SlowBufferToString.call(this,i,r,a):(void 0===r&&(r=0),void 0===a&&(a=this.length),e.decode(this.slice(r,a),i))},t.SlowBufferWrite=a.prototype.write,a.prototype.write=function(i,r,a,o){if(isFinite(r))isFinite(a)||(o=a,a=void 0);else{var s=o;o=r,r=a,a=s}r=+r||0;var c=this.length-r;if(a?(a=+a)>c&&(a=c):a=c,o=String(o||"utf8").toLowerCase(),n.isNativeEncoding(o))return t.SlowBufferWrite.call(this,i,r,a,o);if(i.length>0&&(a<0||r<0))throw new RangeError("attempt to write beyond buffer bounds");var p=e.encode(i,o);return p.length<a&&(a=p.length),p.copy(this,r,0,a),a},t.BufferIsEncoding=n.isEncoding,n.isEncoding=function(t){return n.isNativeEncoding(t)||e.encodingExists(t)},t.BufferByteLength=n.byteLength,n.byteLength=a.byteLength=function(i,r){return r=String(r||"utf8").toLowerCase(),n.isNativeEncoding(r)?t.BufferByteLength.call(this,i,r):e.encode(i,r).length},t.BufferToString=n.prototype.toString,n.prototype.toString=function(i,r,a){return i=String(i||"utf8").toLowerCase(),n.isNativeEncoding(i)?t.BufferToString.call(this,i,r,a):(void 0===r&&(r=0),void 0===a&&(a=this.length),e.decode(this.slice(r,a),i))},t.BufferWrite=n.prototype.write,n.prototype.write=function(i,r,a,o){var s=r,c=a,p=o;if(isFinite(r))isFinite(a)||(o=a,a=void 0);else{var u=o;o=r,r=a,a=u}if(o=String(o||"utf8").toLowerCase(),n.isNativeEncoding(o))return t.BufferWrite.call(this,i,s,c,p);r=+r||0;var l=this.length-r;if(a?(a=+a)>l&&(a=l):a=l,i.length>0&&(a<0||r<0))throw new RangeError("attempt to write beyond buffer bounds");var f=e.encode(i,o);return f.length<a&&(a=f.length),f.copy(this,r,0,a),a},e.supportsStreams){var o=i(2413).Readable;t.ReadableSetEncoding=o.prototype.setEncoding,o.prototype.setEncoding=function(t,i){this._readableState.decoder=e.getDecoder(t,i),this._readableState.encoding=t},o.prototype.collect=e._collect}}},e.undoExtendNodeEncodings=function(){if(e.supportsNodeEncodingsExtension){if(!t)throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");delete n.isNativeEncoding;var r=i(4293).SlowBuffer;if(r.prototype.toString=t.SlowBufferToString,r.prototype.write=t.SlowBufferWrite,n.isEncoding=t.BufferIsEncoding,n.byteLength=t.BufferByteLength,n.prototype.toString=t.BufferToString,n.prototype.write=t.BufferWrite,e.supportsStreams){var a=i(2413).Readable;a.prototype.setEncoding=t.ReadableSetEncoding,delete a.prototype.collect}t=void 0}}}},4914:(e,t,i)=>{"use strict";var n=i(2399).Buffer,r=i(5395),a=e.exports;a.encodings=null,a.defaultCharUnicode="�",a.defaultCharSingleByte="?",a.encode=function(e,t,i){e=""+(e||"");var r=a.getEncoder(t,i),o=r.write(e),s=r.end();return s&&s.length>0?n.concat([o,s]):o},a.decode=function(e,t,i){"string"==typeof e&&(a.skipDecodeWarning||(console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding"),a.skipDecodeWarning=!0),e=n.from(""+(e||""),"binary"));var r=a.getDecoder(t,i),o=r.write(e),s=r.end();return s?o+s:o},a.encodingExists=function(e){try{return a.getCodec(e),!0}catch(e){return!1}},a.toEncoding=a.encode,a.fromEncoding=a.decode,a._codecDataCache={},a.getCodec=function(e){a.encodings||(a.encodings=i(6934));for(var t=a._canonicalizeEncoding(e),n={};;){var r=a._codecDataCache[t];if(r)return r;var o=a.encodings[t];switch(typeof o){case"string":t=o;break;case"object":for(var s in o)n[s]=o[s];n.encodingName||(n.encodingName=t),t=o.type;break;case"function":return n.encodingName||(n.encodingName=t),r=new o(n,a),a._codecDataCache[n.encodingName]=r,r;default:throw new Error("Encoding not recognized: '"+e+"' (searched as: '"+t+"')")}}},a._canonicalizeEncoding=function(e){return(""+e).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g,"")},a.getEncoder=function(e,t){var i=a.getCodec(e),n=new i.encoder(t,i);return i.bomAware&&t&&t.addBOM&&(n=new r.PrependBOM(n,t)),n},a.getDecoder=function(e,t){var i=a.getCodec(e),n=new i.decoder(t,i);return!i.bomAware||t&&!1===t.stripBOM||(n=new r.StripBOM(n,t)),n};var o="undefined"!=typeof process&&process.versions&&process.versions.node;if(o){var s=o.split(".").map(Number);(s[0]>0||s[1]>=10)&&i(8044)(a),i(8544)(a)}},8044:(e,t,i)=>{"use strict";var n=i(4293).Buffer,r=i(2413).Transform;function a(e,t){this.conv=e,(t=t||{}).decodeStrings=!1,r.call(this,t)}function o(e,t){this.conv=e,(t=t||{}).encoding=this.encoding="utf8",r.call(this,t)}e.exports=function(e){e.encodeStream=function(t,i){return new a(e.getEncoder(t,i),i)},e.decodeStream=function(t,i){return new o(e.getDecoder(t,i),i)},e.supportsStreams=!0,e.IconvLiteEncoderStream=a,e.IconvLiteDecoderStream=o,e._collect=o.prototype.collect},a.prototype=Object.create(r.prototype,{constructor:{value:a}}),a.prototype._transform=function(e,t,i){if("string"!=typeof e)return i(new Error("Iconv encoding stream needs strings as its input."));try{var n=this.conv.write(e);n&&n.length&&this.push(n),i()}catch(e){i(e)}},a.prototype._flush=function(e){try{var t=this.conv.end();t&&t.length&&this.push(t),e()}catch(t){e(t)}},a.prototype.collect=function(e){var t=[];return this.on("error",e),this.on("data",(function(e){t.push(e)})),this.on("end",(function(){e(null,n.concat(t))})),this},o.prototype=Object.create(r.prototype,{constructor:{value:o}}),o.prototype._transform=function(e,t,i){if(!n.isBuffer(e))return i(new Error("Iconv decoding stream needs buffers as its input."));try{var r=this.conv.write(e);r&&r.length&&this.push(r,this.encoding),i()}catch(e){i(e)}},o.prototype._flush=function(e){try{var t=this.conv.end();t&&t.length&&this.push(t,this.encoding),e()}catch(t){e(t)}},o.prototype.collect=function(e){var t="";return this.on("error",e),this.on("data",(function(e){t+=e})),this.on("end",(function(){e(null,t)})),this}},4378:(e,t,i)=>{try{var n=i(1669);if("function"!=typeof n.inherits)throw"";e.exports=n.inherits}catch(t){e.exports=i(5717)}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}},6512:function(e,t,i){e=i.nmd(e),function(){var t,i,n,r,a,o,s,c;i={},null!==e&&e.exports?e.exports=i:this.ipaddr=i,s=function(e,t,i,n){var r,a;if(e.length!==t.length)throw new Error("ipaddr: cannot match CIDR for objects with different lengths");for(r=0;n>0;){if((a=i-n)<0&&(a=0),e[r]>>a!=t[r]>>a)return!1;n-=i,r+=1}return!0},i.subnetMatch=function(e,t,i){var n,r,a,o,s;for(a in null==i&&(i="unicast"),t)for(!(o=t[a])[0]||o[0]instanceof Array||(o=[o]),n=0,r=o.length;n<r;n++)if(s=o[n],e.kind()===s[0].kind()&&e.match.apply(e,s))return a;return i},i.IPv4=function(){function e(e){var t,i,n;if(4!==e.length)throw new Error("ipaddr: ipv4 octet count should be 4");for(t=0,i=e.length;t<i;t++)if(!(0<=(n=e[t])&&n<=255))throw new Error("ipaddr: ipv4 octet should fit in 8 bits");this.octets=e}return e.prototype.kind=function(){return"ipv4"},e.prototype.toString=function(){return this.octets.join(".")},e.prototype.toNormalizedString=function(){return this.toString()},e.prototype.toByteArray=function(){return this.octets.slice(0)},e.prototype.match=function(e,t){var i;if(void 0===t&&(e=(i=e)[0],t=i[1]),"ipv4"!==e.kind())throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");return s(this.octets,e.octets,8,t)},e.prototype.SpecialRanges={unspecified:[[new e([0,0,0,0]),8]],broadcast:[[new e([255,255,255,255]),32]],multicast:[[new e([224,0,0,0]),4]],linkLocal:[[new e([169,254,0,0]),16]],loopback:[[new e([127,0,0,0]),8]],carrierGradeNat:[[new e([100,64,0,0]),10]],private:[[new e([10,0,0,0]),8],[new e([172,16,0,0]),12],[new e([192,168,0,0]),16]],reserved:[[new e([192,0,0,0]),24],[new e([192,0,2,0]),24],[new e([192,88,99,0]),24],[new e([198,51,100,0]),24],[new e([203,0,113,0]),24],[new e([240,0,0,0]),4]]},e.prototype.range=function(){return i.subnetMatch(this,this.SpecialRanges)},e.prototype.toIPv4MappedAddress=function(){return i.IPv6.parse("::ffff:"+this.toString())},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,i,n,r,a,o;for(o={0:8,128:7,192:6,224:5,240:4,248:3,252:2,254:1,255:0},e=0,r=!1,t=i=3;i>=0;t=i+=-1){if(!((n=this.octets[t])in o))return null;if(a=o[n],r&&0!==a)return null;8!==a&&(r=!0),e+=a}return 32-e},e}(),n="(0?\\d+|0x[a-f0-9]+)",r={fourOctet:new RegExp("^"+n+"\\."+n+"\\."+n+"\\."+n+"$","i"),longValue:new RegExp("^"+n+"$","i")},i.IPv4.parser=function(e){var t,i,n,a,o;if(i=function(e){return"0"===e[0]&&"x"!==e[1]?parseInt(e,8):parseInt(e)},t=e.match(r.fourOctet))return function(){var e,r,a,o;for(o=[],e=0,r=(a=t.slice(1,6)).length;e<r;e++)n=a[e],o.push(i(n));return o}();if(t=e.match(r.longValue)){if((o=i(t[1]))>4294967295||o<0)throw new Error("ipaddr: address outside defined range");return function(){var e,t;for(t=[],a=e=0;e<=24;a=e+=8)t.push(o>>a&255);return t}().reverse()}return null},i.IPv6=function(){function e(e,t){var i,n,r,a,o,s;if(16===e.length)for(this.parts=[],i=n=0;n<=14;i=n+=2)this.parts.push(e[i]<<8|e[i+1]);else{if(8!==e.length)throw new Error("ipaddr: ipv6 part count should be 8 or 16");this.parts=e}for(r=0,a=(s=this.parts).length;r<a;r++)if(!(0<=(o=s[r])&&o<=65535))throw new Error("ipaddr: ipv6 part should fit in 16 bits");t&&(this.zoneId=t)}return e.prototype.kind=function(){return"ipv6"},e.prototype.toString=function(){return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/,"::")},e.prototype.toRFC5952String=function(){var e,t,i,n,r;for(n=/((^|:)(0(:|$)){2,})/g,r=this.toNormalizedString(),e=0,t=-1;i=n.exec(r);)i[0].length>t&&(e=i.index,t=i[0].length);return t<0?r:r.substring(0,e)+"::"+r.substring(e+t)},e.prototype.toByteArray=function(){var e,t,i,n,r;for(e=[],t=0,i=(r=this.parts).length;t<i;t++)n=r[t],e.push(n>>8),e.push(255&n);return e},e.prototype.toNormalizedString=function(){var e,t,i;return e=function(){var e,i,n,r;for(r=[],e=0,i=(n=this.parts).length;e<i;e++)t=n[e],r.push(t.toString(16));return r}.call(this).join(":"),i="",this.zoneId&&(i="%"+this.zoneId),e+i},e.prototype.toFixedLengthString=function(){var e,t,i;return e=function(){var e,i,n,r;for(r=[],e=0,i=(n=this.parts).length;e<i;e++)t=n[e],r.push(t.toString(16).padStart(4,"0"));return r}.call(this).join(":"),i="",this.zoneId&&(i="%"+this.zoneId),e+i},e.prototype.match=function(e,t){var i;if(void 0===t&&(e=(i=e)[0],t=i[1]),"ipv6"!==e.kind())throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");return s(this.parts,e.parts,16,t)},e.prototype.SpecialRanges={unspecified:[new e([0,0,0,0,0,0,0,0]),128],linkLocal:[new e([65152,0,0,0,0,0,0,0]),10],multicast:[new e([65280,0,0,0,0,0,0,0]),8],loopback:[new e([0,0,0,0,0,0,0,1]),128],uniqueLocal:[new e([64512,0,0,0,0,0,0,0]),7],ipv4Mapped:[new e([0,0,0,0,0,65535,0,0]),96],rfc6145:[new e([0,0,0,0,65535,0,0,0]),96],rfc6052:[new e([100,65435,0,0,0,0,0,0]),96],"6to4":[new e([8194,0,0,0,0,0,0,0]),16],teredo:[new e([8193,0,0,0,0,0,0,0]),32],reserved:[[new e([8193,3512,0,0,0,0,0,0]),32]]},e.prototype.range=function(){return i.subnetMatch(this,this.SpecialRanges)},e.prototype.isIPv4MappedAddress=function(){return"ipv4Mapped"===this.range()},e.prototype.toIPv4Address=function(){var e,t,n;if(!this.isIPv4MappedAddress())throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");return e=(n=this.parts.slice(-2))[0],t=n[1],new i.IPv4([e>>8,255&e,t>>8,255&t])},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,i,n,r,a,o;for(o={0:16,32768:15,49152:14,57344:13,61440:12,63488:11,64512:10,65024:9,65280:8,65408:7,65472:6,65504:5,65520:4,65528:3,65532:2,65534:1,65535:0},e=0,r=!1,t=i=7;i>=0;t=i+=-1){if(!((n=this.parts[t])in o))return null;if(a=o[n],r&&0!==a)return null;16!==a&&(r=!0),e+=a}return 128-e},e}(),a="(?:[0-9a-f]+::?)+",c="%[0-9a-z]{1,}",o={zoneIndex:new RegExp(c,"i"),native:new RegExp("^(::)?("+a+")?([0-9a-f]+)?(::)?("+c+")?$","i"),transitional:new RegExp("^((?:"+a+")|(?:::)(?:"+a+")?)"+n+"\\."+n+"\\."+n+"\\."+n+"(%[0-9a-z]{1,})?$","i")},t=function(e,t){var i,n,r,a,s,c;if(e.indexOf("::")!==e.lastIndexOf("::"))return null;for((c=(e.match(o.zoneIndex)||[])[0])&&(c=c.substring(1),e=e.replace(/%.+$/,"")),i=0,n=-1;(n=e.indexOf(":",n+1))>=0;)i++;if("::"===e.substr(0,2)&&i--,"::"===e.substr(-2,2)&&i--,i>t)return null;for(s=t-i,a=":";s--;)a+="0:";return":"===(e=e.replace("::",a))[0]&&(e=e.slice(1)),":"===e[e.length-1]&&(e=e.slice(0,-1)),{parts:t=function(){var t,i,n,a;for(a=[],t=0,i=(n=e.split(":")).length;t<i;t++)r=n[t],a.push(parseInt(r,16));return a}(),zoneId:c}},i.IPv6.parser=function(e){var i,n,r,a,s,c,p;if(o.native.test(e))return t(e,8);if((a=e.match(o.transitional))&&(p=a[6]||"",(i=t(a[1].slice(0,-1)+p,6)).parts)){for(n=0,r=(c=[parseInt(a[2]),parseInt(a[3]),parseInt(a[4]),parseInt(a[5])]).length;n<r;n++)if(!(0<=(s=c[n])&&s<=255))return null;return i.parts.push(c[0]<<8|c[1]),i.parts.push(c[2]<<8|c[3]),{parts:i.parts,zoneId:i.zoneId}}return null},i.IPv4.isIPv4=i.IPv6.isIPv6=function(e){return null!==this.parser(e)},i.IPv4.isValid=function(e){try{return new this(this.parser(e)),!0}catch(e){return!1}},i.IPv4.isValidFourPartDecimal=function(e){return!(!i.IPv4.isValid(e)||!e.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/))},i.IPv6.isValid=function(e){var t;if("string"==typeof e&&-1===e.indexOf(":"))return!1;try{return new this((t=this.parser(e)).parts,t.zoneId),!0}catch(e){return!1}},i.IPv4.parse=function(e){var t;if(null===(t=this.parser(e)))throw new Error("ipaddr: string is not formatted like ip address");return new this(t)},i.IPv6.parse=function(e){var t;if(null===(t=this.parser(e)).parts)throw new Error("ipaddr: string is not formatted like ip address");return new this(t.parts,t.zoneId)},i.IPv4.parseCIDR=function(e){var t,i,n;if((i=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(i[2]))>=0&&t<=32)return n=[this.parse(i[1]),t],Object.defineProperty(n,"toString",{value:function(){return this.join("/")}}),n;throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range")},i.IPv4.subnetMaskFromPrefixLength=function(e){var t,i,n;if((e=parseInt(e))<0||e>32)throw new Error("ipaddr: invalid IPv4 prefix length");for(n=[0,0,0,0],i=0,t=Math.floor(e/8);i<t;)n[i]=255,i++;return t<4&&(n[t]=Math.pow(2,e%8)-1<<8-e%8),new this(n)},i.IPv4.broadcastAddressFromCIDR=function(e){var t,i,n,r,a;try{for(n=(t=this.parseCIDR(e))[0].toByteArray(),a=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),r=[],i=0;i<4;)r.push(parseInt(n[i],10)|255^parseInt(a[i],10)),i++;return new this(r)}catch(e){throw new Error("ipaddr: the address does not have IPv4 CIDR format")}},i.IPv4.networkAddressFromCIDR=function(e){var t,i,n,r,a;try{for(n=(t=this.parseCIDR(e))[0].toByteArray(),a=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),r=[],i=0;i<4;)r.push(parseInt(n[i],10)&parseInt(a[i],10)),i++;return new this(r)}catch(e){throw new Error("ipaddr: the address does not have IPv4 CIDR format")}},i.IPv6.parseCIDR=function(e){var t,i,n;if((i=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(i[2]))>=0&&t<=128)return n=[this.parse(i[1]),t],Object.defineProperty(n,"toString",{value:function(){return this.join("/")}}),n;throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range")},i.isValid=function(e){return i.IPv6.isValid(e)||i.IPv4.isValid(e)},i.parse=function(e){if(i.IPv6.isValid(e))return i.IPv6.parse(e);if(i.IPv4.isValid(e))return i.IPv4.parse(e);throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format")},i.parseCIDR=function(e){try{return i.IPv6.parseCIDR(e)}catch(t){try{return i.IPv4.parseCIDR(e)}catch(e){throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format")}}},i.fromByteArray=function(e){var t;if(4===(t=e.length))return new i.IPv4(e);if(16===t)return new i.IPv6(e);throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address")},i.process=function(e){var t;return"ipv6"===(t=this.parse(e)).kind()&&t.isIPv4MappedAddress()?t.toIPv4Address():t}}.call(this)},2577:(e,t)=>{var i=/; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g,n=/^[\u0020-\u007e\u0080-\u00ff]+$/,r=/^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/,a=/\\([\u0000-\u007f])/g,o=/([\\"])/g,s=/^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/,c=/^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/,p=/^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;function u(e){var t=String(e);if(r.test(t))return t;if(t.length>0&&!n.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(o,"\\$1")+'"'}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,i=e.subtype,n=e.suffix,a=e.type;if(!a||!c.test(a))throw new TypeError("invalid type");if(!i||!s.test(i))throw new TypeError("invalid subtype");var o=a+"/"+i;if(n){if(!c.test(n))throw new TypeError("invalid suffix");o+="+"+n}if(t&&"object"==typeof t)for(var p,l=Object.keys(t).sort(),f=0;f<l.length;f++){if(p=l[f],!r.test(p))throw new TypeError("invalid parameter name");o+="; "+p+"="+u(t[p])}return o},t.parse=function(e){if(!e)throw new TypeError("argument string is required");if("object"==typeof e&&(e=function(e){return"function"==typeof e.getHeader?e.getHeader("content-type"):"object"==typeof e.headers?e.headers&&e.headers["content-type"]:void 0}(e)),"string"!=typeof e)throw new TypeError("argument string is required to be a string");var t,n,r,o=e.indexOf(";"),s=function(e){var t=p.exec(e.toLowerCase());if(!t)throw new TypeError("invalid media type");var i,n=t[1],r=t[2],a=r.lastIndexOf("+");return-1!==a&&(i=r.substr(a+1),r=r.substr(0,a)),{type:n,subtype:r,suffix:i}}(-1!==o?e.substr(0,o):e),c={};for(i.lastIndex=o;n=i.exec(e);){if(n.index!==o)throw new TypeError("invalid parameter format");o+=n[0].length,t=n[1].toLowerCase(),'"'===(r=n[2])[0]&&(r=r.substr(1,r.length-2).replace(a,"$1")),c[t]=r}if(-1!==o&&o!==e.length)throw new TypeError("invalid parameter format");return s.parameters=c,s}},6182:e=>{"use strict";e.exports=function(e,i,n){if(!e)throw new TypeError("argument dest is required");if(!i)throw new TypeError("argument src is required");return void 0===n&&(n=!0),Object.getOwnPropertyNames(i).forEach((function(r){if(n||!t.call(e,r)){var a=Object.getOwnPropertyDescriptor(i,r);Object.defineProperty(e,r,a)}})),e};var t=Object.prototype.hasOwnProperty},8873:(e,t,i)=>{"use strict";var n=i(8605);e.exports=n.METHODS&&n.METHODS.map((function(e){return e.toLowerCase()}))||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},3313:e=>{"use strict";e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},5234:(e,t,i)=>{e.exports=i(3313)},983:(e,t,i)=>{"use strict";var n,r,a,o=i(5234),s=i(5622).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function u(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&o[t[1].toLowerCase()];return i&&i.charset?i.charset:!(!t||!p.test(t[1]))&&"UTF-8"}t.charset=u,t.charsets={lookup:u},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var i=-1===e.indexOf("/")?t.lookup(e):e;if(!i)return!1;if(-1===i.indexOf("charset")){var n=t.charset(i);n&&(i+="; charset="+n.toLowerCase())}return i},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var i=c.exec(e),n=i&&t.extensions[i[1].toLowerCase()];return!(!n||!n.length)&&n[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var i=s("x."+e).toLowerCase().substr(1);return i&&t.types[i]||!1},t.types=Object.create(null),n=t.extensions,r=t.types,a=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var t=o[e],i=t.extensions;if(i&&i.length){n[e]=i;for(var s=0;s<i.length;s++){var c=i[s];if(r[c]){var p=a.indexOf(o[r[c]].source),u=a.indexOf(t.source);if("application/octet-stream"!==r[c]&&(p>u||p===u&&"application/"===r[c].substr(0,12)))continue}r[c]=e}}}))},5518:(e,t,i)=>{i(5622);var n=i(5747);function r(){this.types=Object.create(null),this.extensions=Object.create(null)}r.prototype.define=function(e){for(var t in e){for(var i=e[t],n=0;n<i.length;n++)process.env.DEBUG_MIME&&this.types[i[n]]&&console.warn((this._loading||"define()").replace(/.*\//,""),'changes "'+i[n]+'" extension type from '+this.types[i[n]]+" to "+t),this.types[i[n]]=t;this.extensions[t]||(this.extensions[t]=i[0])}},r.prototype.load=function(e){this._loading=e;var t={};n.readFileSync(e,"ascii").split(/[\r\n]+/).forEach((function(e){var i=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[i.shift()]=i})),this.define(t),this._loading=null},r.prototype.lookup=function(e,t){var i=e.replace(/^.*[\.\/\\]/,"").toLowerCase();return this.types[i]||t||this.default_type},r.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var a=new r;a.define(i(2274)),a.default_type=a.lookup("bin"),a.Mime=r,a.charsets={lookup:function(e,t){return/^text\/|^application\/(javascript|json)/.test(e)?"UTF-8":t}},e.exports=a},2274:e=>{"use strict";e.exports=JSON.parse('{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}')},7824:e=>{var t=1e3,i=60*t,n=60*i,r=24*n;function a(e,t,i){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+i:Math.ceil(e/t)+" "+i+"s"}e.exports=function(e,o){o=o||{};var s,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(a){var o=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*n;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===c&&!1===isNaN(e))return o.long?a(s=e,r,"day")||a(s,n,"hour")||a(s,i,"minute")||a(s,t,"second")||s+" ms":function(e){return e>=r?Math.round(e/r)+"d":e>=n?Math.round(e/n)+"h":e>=i?Math.round(e/i)+"m":e>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},159:(e,t,i)=>{"use strict";var n=Object.create(null);function r(e){if(!(this instanceof r))return new r(e);this.request=e}function a(e){var t=n[e];if(void 0!==t)return t;switch(e){case"charset":t=i(8558);break;case"encoding":t=i(4328);break;case"language":t=i(8035);break;case"mediaType":t=i(4097);break;default:throw new Error("Cannot find module '"+e+"'")}return n[e]=t,t}e.exports=r,e.exports.Negotiator=r,r.prototype.charset=function(e){var t=this.charsets(e);return t&&t[0]},r.prototype.charsets=function(e){return(0,a("charset").preferredCharsets)(this.request.headers["accept-charset"],e)},r.prototype.encoding=function(e){var t=this.encodings(e);return t&&t[0]},r.prototype.encodings=function(e){return(0,a("encoding").preferredEncodings)(this.request.headers["accept-encoding"],e)},r.prototype.language=function(e){var t=this.languages(e);return t&&t[0]},r.prototype.languages=function(e){return(0,a("language").preferredLanguages)(this.request.headers["accept-language"],e)},r.prototype.mediaType=function(e){var t=this.mediaTypes(e);return t&&t[0]},r.prototype.mediaTypes=function(e){return(0,a("mediaType").preferredMediaTypes)(this.request.headers.accept,e)},r.prototype.preferredCharset=r.prototype.charset,r.prototype.preferredCharsets=r.prototype.charsets,r.prototype.preferredEncoding=r.prototype.encoding,r.prototype.preferredEncodings=r.prototype.encodings,r.prototype.preferredLanguage=r.prototype.language,r.prototype.preferredLanguages=r.prototype.languages,r.prototype.preferredMediaType=r.prototype.mediaType,r.prototype.preferredMediaTypes=r.prototype.mediaTypes},8558:e=>{"use strict";e.exports=r,e.exports.preferredCharsets=r;var t=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function i(e,i){var n=t.exec(e);if(!n)return null;var r=n[1],a=1;if(n[2])for(var o=n[2].split(";"),s=0;s<o.length;s++){var c=o[s].trim().split("=");if("q"===c[0]){a=parseFloat(c[1]);break}}return{charset:r,q:a,i}}function n(e,t,i){var n=0;if(t.charset.toLowerCase()===e.toLowerCase())n|=1;else if("*"!==t.charset)return null;return{i,o:t.i,q:t.q,s:n}}function r(e,t){var r=function(e){for(var t=e.split(","),n=0,r=0;n<t.length;n++){var a=i(t[n].trim(),n);a&&(t[r++]=a)}return t.length=r,t}(void 0===e?"*":e||"");if(!t)return r.filter(s).sort(a).map(o);var c=t.map((function(e,t){return function(e,t,i){for(var r={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=n(e,t[a],i);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,r,t)}));return c.filter(s).sort(a).map((function(e){return t[c.indexOf(e)]}))}function a(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.charset}function s(e){return e.q>0}},4328:e=>{"use strict";e.exports=r,e.exports.preferredEncodings=r;var t=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function i(e,i){var n=t.exec(e);if(!n)return null;var r=n[1],a=1;if(n[2])for(var o=n[2].split(";"),s=0;s<o.length;s++){var c=o[s].trim().split("=");if("q"===c[0]){a=parseFloat(c[1]);break}}return{encoding:r,q:a,i}}function n(e,t,i){var n=0;if(t.encoding.toLowerCase()===e.toLowerCase())n|=1;else if("*"!==t.encoding)return null;return{i,o:t.i,q:t.q,s:n}}function r(e,t){var r=function(e){for(var t=e.split(","),r=!1,a=1,o=0,s=0;o<t.length;o++){var c=i(t[o].trim(),o);c&&(t[s++]=c,r=r||n("identity",c),a=Math.min(a,c.q||1))}return r||(t[s++]={encoding:"identity",q:a,i:o}),t.length=s,t}(e||"");if(!t)return r.filter(s).sort(a).map(o);var c=t.map((function(e,t){return function(e,t,i){for(var r={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=n(e,t[a],i);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,r,t)}));return c.filter(s).sort(a).map((function(e){return t[c.indexOf(e)]}))}function a(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.encoding}function s(e){return e.q>0}},8035:e=>{"use strict";e.exports=r,e.exports.preferredLanguages=r;var t=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;function i(e,i){var n=t.exec(e);if(!n)return null;var r=n[1],a=n[2],o=r;a&&(o+="-"+a);var s=1;if(n[3])for(var c=n[3].split(";"),p=0;p<c.length;p++){var u=c[p].split("=");"q"===u[0]&&(s=parseFloat(u[1]))}return{prefix:r,suffix:a,q:s,i,full:o}}function n(e,t,n){var r=i(e);if(!r)return null;var a=0;if(t.full.toLowerCase()===r.full.toLowerCase())a|=4;else if(t.prefix.toLowerCase()===r.full.toLowerCase())a|=2;else if(t.full.toLowerCase()===r.prefix.toLowerCase())a|=1;else if("*"!==t.full)return null;return{i:n,o:t.i,q:t.q,s:a}}function r(e,t){var r=function(e){for(var t=e.split(","),n=0,r=0;n<t.length;n++){var a=i(t[n].trim(),n);a&&(t[r++]=a)}return t.length=r,t}(void 0===e?"*":e||"");if(!t)return r.filter(s).sort(a).map(o);var c=t.map((function(e,t){return function(e,t,i){for(var r={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=n(e,t[a],i);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,r,t)}));return c.filter(s).sort(a).map((function(e){return t[c.indexOf(e)]}))}function a(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.full}function s(e){return e.q>0}},4097:e=>{"use strict";e.exports=r,e.exports.preferredMediaTypes=r;var t=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;function i(e,i){var n=t.exec(e);if(!n)return null;var r=Object.create(null),a=1,o=n[2],s=n[1];if(n[3])for(var u=function(e){for(var t=e.split(";"),i=1,n=0;i<t.length;i++)c(t[n])%2==0?t[++n]=t[i]:t[n]+=";"+t[i];for(t.length=n+1,i=0;i<t.length;i++)t[i]=t[i].trim();return t}(n[3]).map(p),l=0;l<u.length;l++){var f=u[l],d=f[0].toLowerCase(),h=f[1],m=h&&'"'===h[0]&&'"'===h[h.length-1]?h.substr(1,h.length-2):h;if("q"===d){a=parseFloat(m);break}r[d]=m}return{type:s,subtype:o,params:r,q:a,i}}function n(e,t,n){var r=i(e),a=0;if(!r)return null;if(t.type.toLowerCase()==r.type.toLowerCase())a|=4;else if("*"!=t.type)return null;if(t.subtype.toLowerCase()==r.subtype.toLowerCase())a|=2;else if("*"!=t.subtype)return null;var o=Object.keys(t.params);if(o.length>0){if(!o.every((function(e){return"*"==t.params[e]||(t.params[e]||"").toLowerCase()==(r.params[e]||"").toLowerCase()})))return null;a|=1}return{i:n,o:t.i,q:t.q,s:a}}function r(e,t){var r=function(e){for(var t=function(e){for(var t=e.split(","),i=1,n=0;i<t.length;i++)c(t[n])%2==0?t[++n]=t[i]:t[n]+=","+t[i];return t.length=n+1,t}(e),n=0,r=0;n<t.length;n++){var a=i(t[n].trim(),n);a&&(t[r++]=a)}return t.length=r,t}(void 0===e?"*/*":e||"");if(!t)return r.filter(s).sort(a).map(o);var p=t.map((function(e,t){return function(e,t,i){for(var r={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=n(e,t[a],i);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,r,t)}));return p.filter(s).sort(a).map((function(e){return t[p.indexOf(e)]}))}function a(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function o(e){return e.type+"/"+e.subtype}function s(e){return e.q>0}function c(e){for(var t=0,i=0;-1!==(i=e.indexOf('"',i));)t++,i++;return t}function p(e){var t,i,n=e.indexOf("=");return-1===n?t=e:(t=e.substr(0,n),i=e.substr(n+1)),[t,i]}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},i=0;i<10;i++)t["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var o,s,c=r(e),p=1;p<arguments.length;p++){for(var u in o=Object(arguments[p]))i.call(o,u)&&(c[u]=o[u]);if(t){s=t(o);for(var l=0;l<s.length;l++)n.call(o,s[l])&&(c[s[l]]=o[s[l]])}}return c}},338:(e,t,i)=>{"use strict";e.exports=function(e,t){return!1!==a(e)?(r(t,null,e),e):(function(e,t){var i=e.__onFinished;i&&i.queue||(i=e.__onFinished=function(e){function t(i){if(e.__onFinished===t&&(e.__onFinished=null),t.queue){var n=t.queue;t.queue=null;for(var r=0;r<n.length;r++)n[r](i,e)}}return t.queue=[],t}(e),function(e,t){var i,r,a=!1;function o(e){i.cancel(),r.cancel(),a=!0,t(e)}function s(t){e.removeListener("socket",s),a||i===r&&(r=n([[t,"error","close"]],o))}i=r=n([[e,"end","finish"]],o),e.socket?s(e.socket):(e.on("socket",s),void 0===e.socket&&function(e,t){var i=e.assignSocket;"function"==typeof i&&(e.assignSocket=function(e){i.call(this,e),t(e)})}(e,s))}(e,i)),i.queue.push(t)}(e,t),e)},e.exports.isFinished=a;var n=i(4331),r="function"==typeof setImmediate?setImmediate:function(e){process.nextTick(e.bind.apply(e,arguments))};function a(e){var t=e.socket;return"boolean"==typeof e.finished?Boolean(e.finished||t&&!t.writable):"boolean"==typeof e.complete?Boolean(e.upgrade||!t||!t.readable||e.complete&&!e.readable):void 0}},8317:(e,t,i)=>{"use strict";var n=i(8835),r=n.parse,a=n.Url;function o(e){var t=e.url;if(void 0!==t){var i=e._parsedUrl;return c(t,i)?i:((i=s(t))._raw=t,e._parsedUrl=i)}}function s(e){if("string"!=typeof e||47!==e.charCodeAt(0))return r(e);for(var t=e,i=null,n=null,o=1;o<e.length;o++)switch(e.charCodeAt(o)){case 63:null===n&&(t=e.substring(0,o),i=e.substring(o+1),n=e.substring(o));break;case 9:case 10:case 12:case 13:case 32:case 35:case 160:case 65279:return r(e)}var s=void 0!==a?new a:{};return s.path=e,s.href=e,s.pathname=t,null!==n&&(s.query=i,s.search=n),s}function c(e,t){return"object"==typeof t&&null!==t&&(void 0===a||t instanceof a)&&t._raw===e}e.exports=o,e.exports.original=function(e){var t=e.originalUrl;if("string"!=typeof t)return o(e);var i=e._parsedOriginalUrl;return c(t,i)?i:((i=s(t))._raw=t,e._parsedOriginalUrl=i)}},4779:e=>{e.exports=function e(i,n,r){n=n||[];var a,o=(r=r||{}).strict,s=!1!==r.end,c=r.sensitive?"":"i",p=0,u=n.length,l=0,f=0;if(i instanceof RegExp){for(;a=t.exec(i.source);)n.push({name:f++,optional:!1,offset:a.index});return i}if(Array.isArray(i))return i=i.map((function(t){return e(t,n,r).source})),new RegExp("(?:"+i.join("|")+")",c);for(i=("^"+i+(o?"":"/"===i[i.length-1]?"?":"/?")).replace(/\/\(/g,"/(?:").replace(/([\/\.])/g,"\\$1").replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g,(function(e,t,i,r,a,o,s,c){t=t||"",i=i||"",a=a||"([^\\/"+i+"]+?)",s=s||"",n.push({name:r,optional:!!s,offset:c+p});var u=(s?"":t)+"(?:"+i+(s?t:"")+a+(o?"((?:[\\/"+i+"].+?)?)":"")+")"+s;return p+=u.length-e.length,u})).replace(/\*/g,(function(e,t){for(var i=n.length;i-- >u&&n[i].offset>t;)n[i].offset+=3;return"(.*)"}));a=t.exec(i);){for(var d=0,h=a.index;"\\"===i.charAt(--h);)d++;d%2!=1&&((u+l===n.length||n[u+l].offset>a.index)&&n.splice(u+l,0,{name:f++,optional:!1,offset:a.index}),l++)}return i+=s?"$":"/"===i[i.length-1]?"":"(?=\\/|$)",new RegExp(i,c)};var t=/\((?!\?)/g},5273:(e,t,i)=>{"use strict";var n=i(2114),r=i(9353),a=Object.prototype.hasOwnProperty;function o(e){return e&&"EPROMISERETRY"===e.code&&a.call(e,"retried")}e.exports=function(e,t){var i,a;return"object"==typeof e&&"function"==typeof t&&(i=t,t=e,e=i),a=r.operation(t),new Promise((function(t,i){a.attempt((function(r){Promise.resolve().then((function(){return e((function(e){throw o(e)&&(e=e.retried),n(new Error("Retrying"),"EPROMISERETRY",{retried:e})}),r)})).then(t,(function(e){o(e)&&(e=e.retried,a.retry(e||new Error))||i(e)}))}))}))}},2611:(e,t,i)=>{"use strict";e.exports=function(e,t){if(!e)throw new TypeError("req argument is required");if(!t)throw new TypeError("trust argument is required");var i=p(e,t);return i[i.length-1]},e.exports.all=p,e.exports.compile=u;var n=i(271),r=i(6512),a=/^[0-9]+$/,o=r.isValid,s=r.parse,c={linklocal:["169.254.0.0/16","fe80::/10"],loopback:["127.0.0.1/8","::1/128"],uniquelocal:["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","fc00::/7"]};function p(e,t){var i=n(e);if(!t)return i;"function"!=typeof t&&(t=u(t));for(var r=0;r<i.length-1;r++)t(i[r],r)||(i.length=r+1);return i}function u(e){if(!e)throw new TypeError("argument is required");var t,i,n,r,a,p,u,d,h;if("string"==typeof e)t=[e];else{if(!Array.isArray(e))throw new TypeError("unsupported trust argument");t=e.slice()}for(var m=0;m<t.length;m++)e=t[m],Object.prototype.hasOwnProperty.call(c,e)&&(e=c[e],t.splice.apply(t,[m,1].concat(e)),m+=e.length-1);return 0===(n=(i=function(e){for(var t=new Array(e.length),i=0;i<e.length;i++)t[i]=l(e[i]);return t}(t)).length)?f:1===n?(a=i[0],p=a[0],u=p.kind(),d="ipv4"===u,h=a[1],function(e){if(!o(e))return!1;var t=s(e);if(t.kind()!==u){if(d&&!t.isIPv4MappedAddress())return!1;t=d?t.toIPv4Address():t.toIPv4MappedAddress()}return t.match(p,h)}):(r=i,function(e){if(!o(e))return!1;for(var t,i=s(e),n=i.kind(),a=0;a<r.length;a++){var c=r[a],p=c[0],u=p.kind(),l=c[1],f=i;if(n!==u){if("ipv4"===u&&!i.isIPv4MappedAddress())continue;t||(t="ipv4"===u?i.toIPv4Address():i.toIPv4MappedAddress()),f=t}if(f.match(p,l))return!0}return!1})}function l(e){var t=e.lastIndexOf("/"),i=-1!==t?e.substring(0,t):e;if(!o(i))throw new TypeError("invalid IP address: "+i);var n=s(i);-1===t&&"ipv6"===n.kind()&&n.isIPv4MappedAddress()&&(n=n.toIPv4Address());var r="ipv6"===n.kind()?128:32,c=-1!==t?e.substring(t+1,e.length):null;if((c=null===c?r:a.test(c)?parseInt(c,10):"ipv4"===n.kind()&&o(c)?function(e){var t=s(e);return"ipv4"===t.kind()?t.prefixLengthFromSubnetMask():null}(c):null)<=0||c>r)throw new TypeError("invalid range on address: "+e);return[n,c]}function f(){return!1}},5798:e=>{"use strict";var t=String.prototype.replace,i=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return t.call(e,i,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},129:(e,t,i)=>{"use strict";var n=i(8261),r=i(5235),a=i(5798);e.exports={formats:a,parse:r,stringify:n}},5235:(e,t,i)=>{"use strict";var n=i(2769),r=Object.prototype.hasOwnProperty,a={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},o=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},s=function(e,t,i){if(e){var n=i.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,o=/(\[[^[\]]*])/.exec(n),s=o?n.slice(0,o.index):n,c=[];if(s){if(!i.plainObjects&&r.call(Object.prototype,s)&&!i.allowPrototypes)return;c.push(s)}for(var p=0;null!==(o=a.exec(n))&&p<i.depth;){if(p+=1,!i.plainObjects&&r.call(Object.prototype,o[1].slice(1,-1))&&!i.allowPrototypes)return;c.push(o[1])}return o&&c.push("["+n.slice(o.index)+"]"),function(e,t,i){for(var n=t,r=e.length-1;r>=0;--r){var a,o=e[r];if("[]"===o&&i.parseArrays)a=[].concat(n);else{a=i.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,c=parseInt(s,10);i.parseArrays||""!==s?!isNaN(c)&&o!==s&&String(c)===s&&c>=0&&i.parseArrays&&c<=i.arrayLimit?(a=[])[c]=n:a[s]=n:a={0:n}}n=a}return n}(c,t,i)}};e.exports=function(e,t){var i=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||n.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth?e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return i.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var i,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,p=t.parameterLimit===1/0?void 0:t.parameterLimit,u=c.split(t.delimiter,p),l=-1,f=t.charset;if(t.charsetSentinel)for(i=0;i<u.length;++i)0===u[i].indexOf("utf8=")&&("utf8=%E2%9C%93"===u[i]?f="utf-8":"utf8=%26%2310003%3B"===u[i]&&(f="iso-8859-1"),l=i,i=u.length);for(i=0;i<u.length;++i)if(i!==l){var d,h,m=u[i],v=m.indexOf("]="),g=-1===v?m.indexOf("="):v+1;-1===g?(d=t.decoder(m,a.decoder,f),h=t.strictNullHandling?null:""):(d=t.decoder(m.slice(0,g),a.decoder,f),h=t.decoder(m.slice(g+1),a.decoder,f)),h&&t.interpretNumericEntities&&"iso-8859-1"===f&&(h=o(h)),h&&t.comma&&h.indexOf(",")>-1&&(h=h.split(",")),r.call(s,d)?s[d]=n.combine(s[d],h):s[d]=h}return s}(e,i):e,p=i.plainObjects?Object.create(null):{},u=Object.keys(c),l=0;l<u.length;++l){var f=u[l],d=s(f,c[f],i);p=n.merge(p,d,i)}return n.compact(p)}},8261:(e,t,i)=>{"use strict";var n=i(2769),r=i(5798),a=Object.prototype.hasOwnProperty,o={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,c=Array.prototype.push,p=function(e,t){c.apply(e,s(t)?t:[t])},u=Date.prototype.toISOString,l={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,formatter:r.formatters[r.default],indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},f=function e(t,i,r,a,o,c,u,f,d,h,m,v,g){var b=t;if("function"==typeof u?b=u(i,b):b instanceof Date?b=h(b):"comma"===r&&s(b)&&(b=b.join(",")),null===b){if(a)return c&&!v?c(i,l.encoder,g):i;b=""}if("string"==typeof b||"number"==typeof b||"boolean"==typeof b||n.isBuffer(b))return c?[m(v?i:c(i,l.encoder,g))+"="+m(c(b,l.encoder,g))]:[m(i)+"="+m(String(b))];var y,x=[];if(void 0===b)return x;if(s(u))y=u;else{var w=Object.keys(b);y=f?w.sort(f):w}for(var E=0;E<y.length;++E){var _=y[E];o&&null===b[_]||(s(b)?p(x,e(b[_],"function"==typeof r?r(i,_):i,r,a,o,c,u,f,d,h,m,v,g)):p(x,e(b[_],i+(d?"."+_:"["+_+"]"),r,a,o,c,u,f,d,h,m,v,g)))}return x};e.exports=function(e,t){var i,n=e,c=function(e){if(!e)return l;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||l.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var i=r.default;if(void 0!==e.format){if(!a.call(r.formatters,e.format))throw new TypeError("Unknown format option provided.");i=e.format}var n=r.formatters[i],o=l.filter;return("function"==typeof e.filter||s(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:l.addQueryPrefix,allowDots:void 0===e.allowDots?l.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:l.charsetSentinel,delimiter:void 0===e.delimiter?l.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:l.encode,encoder:"function"==typeof e.encoder?e.encoder:l.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:l.encodeValuesOnly,filter:o,formatter:n,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:l.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:l.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:l.strictNullHandling}}(t);"function"==typeof c.filter?n=(0,c.filter)("",n):s(c.filter)&&(i=c.filter);var u,d=[];if("object"!=typeof n||null===n)return"";u=t&&t.arrayFormat in o?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=o[u];i||(i=Object.keys(n)),c.sort&&i.sort(c.sort);for(var m=0;m<i.length;++m){var v=i[m];c.skipNulls&&null===n[v]||p(d,f(n[v],v,h,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var g=d.join(c.delimiter),b=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),g.length>0?b+g:""}},2769:e=>{"use strict";var t=Object.prototype.hasOwnProperty,i=Array.isArray,n=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),r=function(e,t){for(var i=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(i[n]=e[n]);return i};e.exports={arrayToObject:r,assign:function(e,t){return Object.keys(t).reduce((function(e,i){return e[i]=t[i],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],o=a.obj[a.prop],s=Object.keys(o),c=0;c<s.length;++c){var p=s[c],u=o[p];"object"==typeof u&&null!==u&&-1===n.indexOf(u)&&(t.push({obj:o,prop:p}),n.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,i){var n=e.replace(/\+/g," ");if("iso-8859-1"===i)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,i){if(0===e.length)return e;var r="string"==typeof e?e:String(e);if("iso-8859-1"===i)return escape(r).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var a="",o=0;o<r.length;++o){var s=r.charCodeAt(o);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?a+=r.charAt(o):s<128?a+=n[s]:s<2048?a+=n[192|s>>6]+n[128|63&s]:s<55296||s>=57344?a+=n[224|s>>12]+n[128|s>>6&63]+n[128|63&s]:(o+=1,s=65536+((1023&s)<<10|1023&r.charCodeAt(o)),a+=n[240|s>>18]+n[128|s>>12&63]+n[128|s>>6&63]+n[128|63&s])}return a},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(n,a,o){if(!a)return n;if("object"!=typeof a){if(i(n))n.push(a);else{if(!n||"object"!=typeof n)return[n,a];(o&&(o.plainObjects||o.allowPrototypes)||!t.call(Object.prototype,a))&&(n[a]=!0)}return n}if(!n||"object"!=typeof n)return[n].concat(a);var s=n;return i(n)&&!i(a)&&(s=r(n,o)),i(n)&&i(a)?(a.forEach((function(i,r){if(t.call(n,r)){var a=n[r];a&&"object"==typeof a&&i&&"object"==typeof i?n[r]=e(a,i,o):n.push(i)}else n[r]=i})),n):Object.keys(a).reduce((function(i,n){var r=a[n];return t.call(i,n)?i[n]=e(i[n],r,o):i[n]=r,i}),s)}}},4622:e=>{"use strict";function t(e,t){return{start:e.start,end:e.end,index:t}}function i(e){return{start:e.start,end:e.end}}function n(e,t){return e.index-t.index}function r(e,t){return e.start-t.start}e.exports=function(e,a,o){if("string"!=typeof a)throw new TypeError("argument str must be a string");var s=a.indexOf("=");if(-1===s)return-2;var c=a.slice(s+1).split(","),p=[];p.type=a.slice(0,s);for(var u=0;u<c.length;u++){var l=c[u].split("-"),f=parseInt(l[0],10),d=parseInt(l[1],10);isNaN(f)?(f=e-d,d=e-1):isNaN(d)&&(d=e-1),d>e-1&&(d=e-1),isNaN(f)||isNaN(d)||f>d||f<0||p.push({start:f,end:d})}return p.length<1?-1:o&&o.combine?function(e){for(var a=e.map(t).sort(r),o=0,s=1;s<a.length;s++){var c=a[s],p=a[o];c.start>p.end+1?a[++o]=c:c.end>p.end&&(p.end=c.end,p.index=Math.min(p.index,c.index))}a.length=o+1;var u=a.sort(n).map(i);return u.type=e.type,u}(p):p}},1045:(e,t,i)=>{"use strict";var n=i(9830),r=i(9009),a=i(4914),o=i(8170);e.exports=function(e,t,i){var r=i,a=t||{};if(!0!==t&&"string"!=typeof t||(a={encoding:t}),"function"==typeof t&&(r=t,a={}),void 0!==r&&"function"!=typeof r)throw new TypeError("argument callback must be a function");if(!r&&!global.Promise)throw new TypeError("argument callback is required");var o=!0!==a.encoding?a.encoding:"utf-8",s=n.parse(a.limit),c=null==a.length||isNaN(a.length)?null:parseInt(a.length,10);return r?p(e,o,c,s,r):new Promise((function(t,i){p(e,o,c,s,(function(e,n){if(e)return i(e);t(n)}))}))};var s=/^Encoding not recognized: /;function c(e){o(e),"function"==typeof e.pause&&e.pause()}function p(e,t,i,n,o){var p=!1;if(null!==n&&null!==i&&i>n)return h(r(413,"request entity too large",{expected:i,length:i,limit:n,type:"entity.too.large"}));var u=e._readableState;if(e._decoder||u&&(u.encoding||u.decoder))return h(r(500,"stream encoding should not be set",{type:"stream.encoding.set"}));var l,f=0;try{l=function(e){if(!e)return null;try{return a.getDecoder(e)}catch(t){if(!s.test(t.message))throw t;throw r(415,"specified encoding unsupported",{encoding:e,type:"encoding.unsupported"})}}(t)}catch(e){return h(e)}var d=l?"":[];function h(){for(var t=new Array(arguments.length),i=0;i<t.length;i++)t[i]=arguments[i];function n(){b(),t[0]&&c(e),o.apply(null,t)}p=!0,n()}function m(){p||h(r(400,"request aborted",{code:"ECONNABORTED",expected:i,length:i,received:f,type:"request.aborted"}))}function v(e){p||(f+=e.length,null!==n&&f>n?h(r(413,"request entity too large",{limit:n,received:f,type:"entity.too.large"})):l?d+=l.write(e):d.push(e))}function g(e){if(!p){if(e)return h(e);null!==i&&f!==i?h(r(400,"request size did not match content length",{expected:i,length:i,received:f,type:"request.size.invalid"})):h(null,l?d+(l.end()||""):Buffer.concat(d))}}function b(){d=null,e.removeListener("aborted",m),e.removeListener("data",v),e.removeListener("end",g),e.removeListener("error",g),e.removeListener("close",b)}e.on("aborted",m),e.on("close",b),e.on("data",v),e.on("end",g),e.on("error",g)}},4012:e=>{"use strict";const t={};function i(e,i,n){n||(n=Error);class r extends n{constructor(e,t,n){super(function(e,t,n){return"string"==typeof i?i:i(e,t,n)}(e,t,n))}}r.prototype.name=n.name,r.prototype.code=e,t[e]=r}function n(e,t){if(Array.isArray(e)){const i=e.length;return e=e.map((e=>String(e))),i>2?`one of ${t} ${e.slice(0,i-1).join(", ")}, or `+e[i-1]:2===i?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}i("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(e,t,i){let r;var a;let o;var s,c;return"string"==typeof t&&(a="not ",t.substr(0,a.length)===a)?(r="must not be",t=t.replace(/^not /,"")):r="must be",o=function(e,t,i){return(void 0===i||i>e.length)&&(i=e.length),e.substring(i-t.length,i)===t}(e," argument")?`The ${e} ${r} ${n(t,"type")}`:`The "${e}" ${s=e,"number"!=typeof c&&(c=0),c+".".length>s.length||-1===s.indexOf(".",c)?"argument":"property"} ${r} ${n(t,"type")}`,o+=". Received type "+typeof i,o}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},6753:(e,t,i)=>{"use strict";var n=Object.keys||function(e){var t=[];for(var i in e)t.push(i);return t};e.exports=p;var r=i(9481),a=i(4229);i(4378)(p,r);for(var o=n(a.prototype),s=0;s<o.length;s++){var c=o[s];p.prototype[c]||(p.prototype[c]=a.prototype[c])}function p(e){if(!(this instanceof p))return new p(e);r.call(this,e),a.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",u)))}function u(){this._writableState.ended||process.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(p.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(p.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(p.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(p.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2725:(e,t,i)=>{"use strict";e.exports=r;var n=i(4605);function r(e){if(!(this instanceof r))return new r(e);n.call(this,e)}i(4378)(r,n),r.prototype._transform=function(e,t,i){i(null,e)}},9481:(e,t,i)=>{"use strict";var n;e.exports=S,S.ReadableState=_,i(8614).EventEmitter;var r,a=function(e,t){return e.listeners(t).length},o=i(9740),s=i(4293).Buffer,c=global.Uint8Array||function(){},p=i(1669);r=p&&p.debuglog?p.debuglog("stream"):function(){};var u,l,f,d=i(7327),h=i(1195),m=i(2457).getHighWaterMark,v=i(4012).q,g=v.ERR_INVALID_ARG_TYPE,b=v.ERR_STREAM_PUSH_AFTER_EOF,y=v.ERR_METHOD_NOT_IMPLEMENTED,x=v.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;i(4378)(S,o);var w=h.errorOrDestroy,E=["error","close","destroy","pause","resume"];function _(e,t,r){n=n||i(6753),e=e||{},"boolean"!=typeof r&&(r=t instanceof n),this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=m(this,e,"readableHighWaterMark",r),this.buffer=new d,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(u||(u=i(2553).s),this.decoder=new u(e.encoding),this.encoding=e.encoding)}function S(e){if(n=n||i(6753),!(this instanceof S))return new S(e);var t=this instanceof n;this._readableState=new _(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),o.call(this)}function k(e,t,i,n,a){r("readableAddChunk",t);var o,p=e._readableState;if(null===t)p.reading=!1,function(e,t){if(r("onEofChunk"),!t.ended){if(t.decoder){var i=t.decoder.end();i&&i.length&&(t.buffer.push(i),t.length+=t.objectMode?1:i.length)}t.ended=!0,t.sync?C(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,R(e)))}}(e,p);else if(a||(o=function(e,t){var i,n;return n=t,s.isBuffer(n)||n instanceof c||"string"==typeof t||void 0===t||e.objectMode||(i=new g("chunk",["string","Buffer","Uint8Array"],t)),i}(p,t)),o)w(e,o);else if(p.objectMode||t&&t.length>0)if("string"==typeof t||p.objectMode||Object.getPrototypeOf(t)===s.prototype||(t=function(e){return s.from(e)}(t)),n)p.endEmitted?w(e,new x):T(e,p,t,!0);else if(p.ended)w(e,new b);else{if(p.destroyed)return!1;p.reading=!1,p.decoder&&!i?(t=p.decoder.write(t),p.objectMode||0!==t.length?T(e,p,t,!1):B(e,p)):T(e,p,t,!1)}else n||(p.reading=!1,B(e,p));return!p.ended&&(p.length<p.highWaterMark||0===p.length)}function T(e,t,i,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",i)):(t.length+=t.objectMode?1:i.length,n?t.buffer.unshift(i):t.buffer.push(i),t.needReadable&&C(e)),B(e,t)}Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),S.prototype.destroy=h.destroy,S.prototype._undestroy=h.undestroy,S.prototype._destroy=function(e,t){t(e)},S.prototype.push=function(e,t){var i,n=this._readableState;return n.objectMode?i=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=s.from(e,t),t=""),i=!0),k(this,e,t,!1,i)},S.prototype.unshift=function(e){return k(this,e,null,!0,!1)},S.prototype.isPaused=function(){return!1===this._readableState.flowing},S.prototype.setEncoding=function(e){u||(u=i(2553).s);var t=new u(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,r="";null!==n;)r+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==r&&this._readableState.buffer.push(r),this._readableState.length=r.length,this};var A=1073741824;function O(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=A?e=A:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function C(e){var t=e._readableState;r("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(r("emitReadable",t.flowing),t.emittedReadable=!0,process.nextTick(R,e))}function R(e){var t=e._readableState;r("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,I(e)}function B(e,t){t.readingMore||(t.readingMore=!0,process.nextTick(N,e,t))}function N(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var i=t.length;if(r("maybeReadMore read 0"),e.read(0),i===t.length)break}t.readingMore=!1}function U(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function P(e){r("readable nexttick read 0"),e.read(0)}function L(e,t){r("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),I(e),t.flowing&&!t.reading&&e.read(0)}function I(e){var t=e._readableState;for(r("flow",t.flowing);t.flowing&&null!==e.read(););}function D(e,t){return 0===t.length?null:(t.objectMode?i=t.buffer.shift():!e||e>=t.length?(i=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):i=t.buffer.consume(e,t.decoder),i);var i}function j(e){var t=e._readableState;r("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,process.nextTick(H,t,e))}function H(e,t){if(r("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var i=t._writableState;(!i||i.autoDestroy&&i.finished)&&t.destroy()}}function M(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1}S.prototype.read=function(e){r("read",e),e=parseInt(e,10);var t=this._readableState,i=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return r("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?j(this):C(this),null;if(0===(e=O(e,t))&&t.ended)return 0===t.length&&j(this),null;var n,a=t.needReadable;return r("need readable",a),(0===t.length||t.length-e<t.highWaterMark)&&r("length less than watermark",a=!0),t.ended||t.reading?r("reading or ended",a=!1):a&&(r("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=O(i,t))),null===(n=e>0?D(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),i!==e&&t.ended&&j(this)),null!==n&&this.emit("data",n),n},S.prototype._read=function(e){w(this,new y("_read()"))},S.prototype.pipe=function(e,t){var i=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,r("pipe count=%d opts=%j",n.pipesCount,t);var o=t&&!1===t.end||e===process.stdout||e===process.stderr?h:s;function s(){r("onend"),e.end()}n.endEmitted?process.nextTick(o):i.once("end",o),e.on("unpipe",(function t(a,o){r("onunpipe"),a===i&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,r("cleanup"),e.removeListener("close",f),e.removeListener("finish",d),e.removeListener("drain",c),e.removeListener("error",l),e.removeListener("unpipe",t),i.removeListener("end",s),i.removeListener("end",h),i.removeListener("data",u),p=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||c())}));var c=function(e){return function(){var t=e._readableState;r("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,I(e))}}(i);e.on("drain",c);var p=!1;function u(t){r("ondata");var a=e.write(t);r("dest.write",a),!1===a&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==M(n.pipes,e))&&!p&&(r("false write response, pause",n.awaitDrain),n.awaitDrain++),i.pause())}function l(t){r("onerror",t),h(),e.removeListener("error",l),0===a(e,"error")&&w(e,t)}function f(){e.removeListener("finish",d),h()}function d(){r("onfinish"),e.removeListener("close",f),h()}function h(){r("unpipe"),i.unpipe(e)}return i.on("data",u),function(e,t,i){if("function"==typeof e.prependListener)return e.prependListener(t,i);e._events&&e._events.error?Array.isArray(e._events.error)?e._events.error.unshift(i):e._events.error=[i,e._events.error]:e.on(t,i)}(e,"error",l),e.once("close",f),e.once("finish",d),e.emit("pipe",i),n.flowing||(r("pipe resume"),i.resume()),e},S.prototype.unpipe=function(e){var t=this._readableState,i={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,i)),this;if(!e){var n=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<r;a++)n[a].emit("unpipe",this,{hasUnpiped:!1});return this}var o=M(t.pipes,e);return-1===o||(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,i)),this},S.prototype.on=function(e,t){var i=o.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,r("on readable",n.length,n.reading),n.length?C(this):n.reading||process.nextTick(P,this))),i},S.prototype.addListener=S.prototype.on,S.prototype.removeListener=function(e,t){var i=o.prototype.removeListener.call(this,e,t);return"readable"===e&&process.nextTick(U,this),i},S.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||process.nextTick(U,this),t},S.prototype.resume=function(){var e=this._readableState;return e.flowing||(r("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,process.nextTick(L,e,t))}(this,e)),e.paused=!1,this},S.prototype.pause=function(){return r("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(r("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},S.prototype.wrap=function(e){var t=this,i=this._readableState,n=!1;for(var a in e.on("end",(function(){if(r("wrapped end"),i.decoder&&!i.ended){var e=i.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(a){r("wrapped data"),i.decoder&&(a=i.decoder.write(a)),i.objectMode&&null==a||(i.objectMode||a&&a.length)&&(t.push(a)||(n=!0,e.pause()))})),e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));for(var o=0;o<E.length;o++)e.on(E[o],this.emit.bind(this,E[o]));return this._read=function(t){r("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(S.prototype[Symbol.asyncIterator]=function(){return void 0===l&&(l=i(5850)),l(this)}),Object.defineProperty(S.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(S.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(S.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),S._fromList=D,Object.defineProperty(S.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(S.from=function(e,t){return void 0===f&&(f=i(6307)),f(S,e,t)})},4605:(e,t,i)=>{"use strict";e.exports=u;var n=i(4012).q,r=n.ERR_METHOD_NOT_IMPLEMENTED,a=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,c=i(6753);function p(e,t){var i=this._transformState;i.transforming=!1;var n=i.writecb;if(null===n)return this.emit("error",new a);i.writechunk=null,i.writecb=null,null!=t&&this.push(t),n(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function u(e){if(!(this instanceof u))return new u(e);c.call(this,e),this._transformState={afterTransform:p.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",l)}function l(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(t,i){f(e,t,i)}))}function f(e,t,i){if(t)return e.emit("error",t);if(null!=i&&e.push(i),e._writableState.length)throw new s;if(e._transformState.transforming)throw new o;return e.push(null)}i(4378)(u,c),u.prototype.push=function(e,t){return this._transformState.needTransform=!1,c.prototype.push.call(this,e,t)},u.prototype._transform=function(e,t,i){i(new r("_transform()"))},u.prototype._write=function(e,t,i){var n=this._transformState;if(n.writecb=i,n.writechunk=e,n.writeencoding=t,!n.transforming){var r=this._readableState;(n.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},u.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},u.prototype._destroy=function(e,t){c.prototype._destroy.call(this,e,(function(e){t(e)}))}},4229:(e,t,i)=>{"use strict";function n(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,i){var n=e.entry;for(e.entry=null;n;){var r=n.callback;t.pendingcb--,r(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}var r;e.exports=S,S.WritableState=_;var a,o={deprecate:i(1159)},s=i(9740),c=i(4293).Buffer,p=global.Uint8Array||function(){},u=i(1195),l=i(2457).getHighWaterMark,f=i(4012).q,d=f.ERR_INVALID_ARG_TYPE,h=f.ERR_METHOD_NOT_IMPLEMENTED,m=f.ERR_MULTIPLE_CALLBACK,v=f.ERR_STREAM_CANNOT_PIPE,g=f.ERR_STREAM_DESTROYED,b=f.ERR_STREAM_NULL_VALUES,y=f.ERR_STREAM_WRITE_AFTER_END,x=f.ERR_UNKNOWN_ENCODING,w=u.errorOrDestroy;function E(){}function _(e,t,a){r=r||i(6753),e=e||{},"boolean"!=typeof a&&(a=t instanceof r),this.objectMode=!!e.objectMode,a&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=l(this,e,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var o=!1===e.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var i=e._writableState,n=i.sync,r=i.writecb;if("function"!=typeof r)throw new m;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(i),t)!function(e,t,i,n,r){--t.pendingcb,i?(process.nextTick(r,n),process.nextTick(R,e,t),e._writableState.errorEmitted=!0,w(e,n)):(r(n),e._writableState.errorEmitted=!0,w(e,n),R(e,t))}(e,i,n,t,r);else{var a=O(i)||e.destroyed;a||i.corked||i.bufferProcessing||!i.bufferedRequest||A(e,i),n?process.nextTick(T,e,i,a,r):T(e,i,a,r)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new n(this)}function S(e){var t=this instanceof(r=r||i(6753));if(!t&&!a.call(S,this))return new S(e);this._writableState=new _(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),s.call(this)}function k(e,t,i,n,r,a,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new g("write")):i?e._writev(r,t.onwrite):e._write(r,a,t.onwrite),t.sync=!1}function T(e,t,i,n){i||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),R(e,t)}function A(e,t){t.bufferProcessing=!0;var i=t.bufferedRequest;if(e._writev&&i&&i.next){var r=t.bufferedRequestCount,a=new Array(r),o=t.corkedRequestsFree;o.entry=i;for(var s=0,c=!0;i;)a[s]=i,i.isBuf||(c=!1),i=i.next,s+=1;a.allBuffers=c,k(e,t,!0,t.length,a,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new n(t),t.bufferedRequestCount=0}else{for(;i;){var p=i.chunk,u=i.encoding,l=i.callback;if(k(e,t,!1,t.objectMode?1:p.length,p,u,l),i=i.next,t.bufferedRequestCount--,t.writing)break}null===i&&(t.lastBufferedRequest=null)}t.bufferedRequest=i,t.bufferProcessing=!1}function O(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function C(e,t){e._final((function(i){t.pendingcb--,i&&w(e,i),t.prefinished=!0,e.emit("prefinish"),R(e,t)}))}function R(e,t){var i=O(t);if(i&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,process.nextTick(C,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return i}i(4378)(S,s),_.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(_.prototype,"buffer",{get:o.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(S,Symbol.hasInstance,{value:function(e){return!!a.call(this,e)||this===S&&e&&e._writableState instanceof _}})):a=function(e){return e instanceof this},S.prototype.pipe=function(){w(this,new v)},S.prototype.write=function(e,t,i){var n,r=this._writableState,a=!1,o=!r.objectMode&&(n=e,c.isBuffer(n)||n instanceof p);return o&&!c.isBuffer(e)&&(e=function(e){return c.from(e)}(e)),"function"==typeof t&&(i=t,t=null),o?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof i&&(i=E),r.ending?function(e,t){var i=new y;w(e,i),process.nextTick(t,i)}(this,i):(o||function(e,t,i,n){var r;return null===i?r=new b:"string"==typeof i||t.objectMode||(r=new d("chunk",["string","Buffer"],i)),!r||(w(e,r),process.nextTick(n,r),!1)}(this,r,e,i))&&(r.pendingcb++,a=function(e,t,i,n,r,a){if(!i){var o=function(e,t,i){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=c.from(t,i)),t}(t,n,r);n!==o&&(i=!0,r="buffer",n=o)}var s=t.objectMode?1:n.length;t.length+=s;var p=t.length<t.highWaterMark;if(p||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:r,isBuf:i,callback:a,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else k(e,t,!1,s,n,r,a);return p}(this,r,o,e,t,i)),a},S.prototype.cork=function(){this._writableState.corked++},S.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||A(this,e))},S.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new x(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(S.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(S.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),S.prototype._write=function(e,t,i){i(new h("_write()"))},S.prototype._writev=null,S.prototype.end=function(e,t,i){var n=this._writableState;return"function"==typeof e?(i=e,e=null,t=null):"function"==typeof t&&(i=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,i){t.ending=!0,R(e,t),i&&(t.finished?process.nextTick(i):e.once("finish",i)),t.ended=!0,e.writable=!1}(this,n,i),this},Object.defineProperty(S.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),S.prototype.destroy=u.destroy,S.prototype._undestroy=u.undestroy,S.prototype._destroy=function(e,t){t(e)}},5850:(e,t,i)=>{"use strict";var n;function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var a=i(8610),o=Symbol("lastResolve"),s=Symbol("lastReject"),c=Symbol("error"),p=Symbol("ended"),u=Symbol("lastPromise"),l=Symbol("handlePromise"),f=Symbol("stream");function d(e,t){return{value:e,done:t}}function h(e){var t=e[o];if(null!==t){var i=e[f].read();null!==i&&(e[u]=null,e[o]=null,e[s]=null,t(d(i,!1)))}}function m(e){process.nextTick(h,e)}var v=Object.getPrototypeOf((function(){})),g=Object.setPrototypeOf((r(n={get stream(){return this[f]},next:function(){var e=this,t=this[c];if(null!==t)return Promise.reject(t);if(this[p])return Promise.resolve(d(void 0,!0));if(this[f].destroyed)return new Promise((function(t,i){process.nextTick((function(){e[c]?i(e[c]):t(d(void 0,!0))}))}));var i,n=this[u];if(n)i=new Promise(function(e,t){return function(i,n){e.then((function(){t[p]?i(d(void 0,!0)):t[l](i,n)}),n)}}(n,this));else{var r=this[f].read();if(null!==r)return Promise.resolve(d(r,!1));i=new Promise(this[l])}return this[u]=i,i}},Symbol.asyncIterator,(function(){return this})),r(n,"return",(function(){var e=this;return new Promise((function(t,i){e[f].destroy(null,(function(e){e?i(e):t(d(void 0,!0))}))}))})),n),v);e.exports=function(e){var t,i=Object.create(g,(r(t={},f,{value:e,writable:!0}),r(t,o,{value:null,writable:!0}),r(t,s,{value:null,writable:!0}),r(t,c,{value:null,writable:!0}),r(t,p,{value:e._readableState.endEmitted,writable:!0}),r(t,l,{value:function(e,t){var n=i[f].read();n?(i[u]=null,i[o]=null,i[s]=null,e(d(n,!1))):(i[o]=e,i[s]=t)},writable:!0}),t));return i[u]=null,a(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=i[s];return null!==t&&(i[u]=null,i[o]=null,i[s]=null,t(e)),void(i[c]=e)}var n=i[o];null!==n&&(i[u]=null,i[o]=null,i[s]=null,n(d(void 0,!0))),i[p]=!0})),e.on("readable",m.bind(null,i)),i}},7327:(e,t,i)=>{"use strict";function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=i(4293).Buffer,s=i(1669).inspect,c=s&&s.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,i;return t=e,(i=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,i=""+t.data;t=t.next;)i+=e+t.data;return i}},{key:"concat",value:function(e){if(0===this.length)return o.alloc(0);for(var t,i,n,r=o.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,i=r,n=s,o.prototype.copy.call(t,i,n),s+=a.data.length,a=a.next;return r}},{key:"consume",value:function(e,t){var i;return e<this.head.data.length?(i=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):i=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),i}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,i=1,n=t.data;for(e-=n.length;t=t.next;){var r=t.data,a=e>r.length?r.length:e;if(a===r.length?n+=r:n+=r.slice(0,e),0==(e-=a)){a===r.length?(++i,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=r.slice(a));break}++i}return this.length-=i,n}},{key:"_getBuffer",value:function(e){var t=o.allocUnsafe(e),i=this.head,n=1;for(i.data.copy(t),e-=i.data.length;i=i.next;){var r=i.data,a=e>r.length?r.length:e;if(r.copy(t,t.length-e,0,a),0==(e-=a)){a===r.length?(++n,i.next?this.head=i.next:this.head=this.tail=null):(this.head=i,i.data=r.slice(a));break}++n}return this.length-=n,t}},{key:c,value:function(e,t){return s(this,function(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}])&&a(t.prototype,i),e}()},1195:e=>{"use strict";function t(e,t){n(e,t),i(e)}function i(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function n(e,t){e.emit("error",t)}e.exports={destroy:function(e,r){var a=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(r?r(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(n,this,e)):process.nextTick(n,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!r&&e?a._writableState?a._writableState.errorEmitted?process.nextTick(i,a):(a._writableState.errorEmitted=!0,process.nextTick(t,a,e)):process.nextTick(t,a,e):r?(process.nextTick(i,a),r(e)):process.nextTick(i,a)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var i=e._readableState,n=e._writableState;i&&i.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},8610:(e,t,i)=>{"use strict";var n=i(4012).q.ERR_STREAM_PREMATURE_CLOSE;function r(){}e.exports=function e(t,i,a){if("function"==typeof i)return e(t,null,i);i||(i={}),a=function(e){var t=!1;return function(){if(!t){t=!0;for(var i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];e.apply(this,n)}}}(a||r);var o=i.readable||!1!==i.readable&&t.readable,s=i.writable||!1!==i.writable&&t.writable,c=function(){t.writable||u()},p=t._writableState&&t._writableState.finished,u=function(){s=!1,p=!0,o||a.call(t)},l=t._readableState&&t._readableState.endEmitted,f=function(){o=!1,l=!0,s||a.call(t)},d=function(e){a.call(t,e)},h=function(){var e;return o&&!l?(t._readableState&&t._readableState.ended||(e=new n),a.call(t,e)):s&&!p?(t._writableState&&t._writableState.ended||(e=new n),a.call(t,e)):void 0},m=function(){t.req.on("finish",u)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",u),t.on("abort",h),t.req?m():t.on("request",m)):s&&!t._writableState&&(t.on("end",c),t.on("close",c)),t.on("end",f),t.on("finish",u),!1!==i.error&&t.on("error",d),t.on("close",h),function(){t.removeListener("complete",u),t.removeListener("abort",h),t.removeListener("request",m),t.req&&t.req.removeListener("finish",u),t.removeListener("end",c),t.removeListener("close",c),t.removeListener("finish",u),t.removeListener("end",f),t.removeListener("error",d),t.removeListener("close",h)}}},6307:(e,t,i)=>{"use strict";function n(e,t,i,n,r,a,o){try{var s=e[a](o),c=s.value}catch(e){return void i(e)}s.done?t(c):Promise.resolve(c).then(n,r)}function r(e){return function(){var t=this,i=arguments;return new Promise((function(r,a){var o=e.apply(t,i);function s(e){n(o,r,a,s,c,"next",e)}function c(e){n(o,r,a,s,c,"throw",e)}s(void 0)}))}}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var s=i(4012).q.ERR_INVALID_ARG_TYPE;e.exports=function(e,t,i){var n;if(t&&"function"==typeof t.next)n=t;else if(t&&t[Symbol.asyncIterator])n=t[Symbol.asyncIterator]();else{if(!t||!t[Symbol.iterator])throw new s("iterable",["Iterable"],t);n=t[Symbol.iterator]()}var c=new e(function(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({objectMode:!0},i)),p=!1;function u(){return l.apply(this,arguments)}function l(){return(l=r((function*(){try{var e=yield n.next(),t=e.value;e.done?c.push(null):c.push(yield t)?u():p=!1}catch(e){c.destroy(e)}}))).apply(this,arguments)}return c._read=function(){p||(p=!0,u())},c}},9946:(e,t,i)=>{"use strict";var n,r=i(4012).q,a=r.ERR_MISSING_ARGS,o=r.ERR_STREAM_DESTROYED;function s(e){if(e)throw e}function c(e,t,r,a){a=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(a);var s=!1;e.on("close",(function(){s=!0})),void 0===n&&(n=i(8610)),n(e,{readable:t,writable:r},(function(e){if(e)return a(e);s=!0,a()}));var c=!1;return function(t){if(!s&&!c)return c=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void a(t||new o("pipe"))}}function p(e){e()}function u(e,t){return e.pipe(t)}function l(e){return e.length?"function"!=typeof e[e.length-1]?s:e.pop():s}e.exports=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n,r=l(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new a("streams");var o=t.map((function(e,i){var a=i<t.length-1;return c(e,a,i>0,(function(e){n||(n=e),e&&o.forEach(p),a||(o.forEach(p),r(n))}))}));return t.reduce(u)}},2457:(e,t,i)=>{"use strict";var n=i(4012).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,i,r){var a=function(e,t,i){return null!=e.highWaterMark?e.highWaterMark:t?e[i]:null}(t,r,i);if(null!=a){if(!isFinite(a)||Math.floor(a)!==a||a<0)throw new n(r?i:"highWaterMark",a);return Math.floor(a)}return e.objectMode?16:16384}}},9740:(e,t,i)=>{e.exports=i(2413)},1451:(e,t,i)=>{var n=i(2413);"disable"===process.env.READABLE_STREAM&&n?(e.exports=n.Readable,Object.assign(e.exports,n),e.exports.Stream=n):((t=e.exports=i(9481)).Stream=n||t,t.Readable=t,t.Writable=i(4229),t.Duplex=i(6753),t.Transform=i(4605),t.PassThrough=i(2725),t.finished=i(8610),t.pipeline=i(9946))},9353:(e,t,i)=>{e.exports=i(1846)},1846:(e,t,i)=>{var n=i(1960);t.operation=function(e){var i=t.timeouts(e);return new n(i,{forever:e&&e.forever,unref:e&&e.unref,maxRetryTime:e&&e.maxRetryTime})},t.timeouts=function(e){if(e instanceof Array)return[].concat(e);var t={retries:10,factor:2,minTimeout:1e3,maxTimeout:1/0,randomize:!1};for(var i in e)t[i]=e[i];if(t.minTimeout>t.maxTimeout)throw new Error("minTimeout is greater than maxTimeout");for(var n=[],r=0;r<t.retries;r++)n.push(this.createTimeout(r,t));return e&&e.forever&&!n.length&&n.push(this.createTimeout(r,t)),n.sort((function(e,t){return e-t})),n},t.createTimeout=function(e,t){var i=t.randomize?Math.random()+1:1,n=Math.round(i*t.minTimeout*Math.pow(t.factor,e));return Math.min(n,t.maxTimeout)},t.wrap=function(e,i,n){if(i instanceof Array&&(n=i,i=null),!n)for(var r in n=[],e)"function"==typeof e[r]&&n.push(r);for(var a=0;a<n.length;a++){var o=n[a],s=e[o];e[o]=function(n){var r=t.operation(i),a=Array.prototype.slice.call(arguments,1),o=a.pop();a.push((function(e){r.retry(e)||(e&&(arguments[0]=r.mainError()),o.apply(this,arguments))})),r.attempt((function(){n.apply(e,a)}))}.bind(e,s),e[o].options=i}}},1960:e=>{function t(e,t){"boolean"==typeof t&&(t={forever:t}),this._originalTimeouts=JSON.parse(JSON.stringify(e)),this._timeouts=e,this._options=t||{},this._maxRetryTime=t&&t.maxRetryTime||1/0,this._fn=null,this._errors=[],this._attempts=1,this._operationTimeout=null,this._operationTimeoutCb=null,this._timeout=null,this._operationStart=null,this._options.forever&&(this._cachedTimeouts=this._timeouts.slice(0))}e.exports=t,t.prototype.reset=function(){this._attempts=1,this._timeouts=this._originalTimeouts},t.prototype.stop=function(){this._timeout&&clearTimeout(this._timeout),this._timeouts=[],this._cachedTimeouts=null},t.prototype.retry=function(e){if(this._timeout&&clearTimeout(this._timeout),!e)return!1;var t=(new Date).getTime();if(e&&t-this._operationStart>=this._maxRetryTime)return this._errors.unshift(new Error("RetryOperation timeout occurred")),!1;this._errors.push(e);var i=this._timeouts.shift();if(void 0===i){if(!this._cachedTimeouts)return!1;this._errors.splice(this._errors.length-1,this._errors.length),this._timeouts=this._cachedTimeouts.slice(0),i=this._timeouts.shift()}var n=this,r=setTimeout((function(){n._attempts++,n._operationTimeoutCb&&(n._timeout=setTimeout((function(){n._operationTimeoutCb(n._attempts)}),n._operationTimeout),n._options.unref&&n._timeout.unref()),n._fn(n._attempts)}),i);return this._options.unref&&r.unref(),!0},t.prototype.attempt=function(e,t){this._fn=e,t&&(t.timeout&&(this._operationTimeout=t.timeout),t.cb&&(this._operationTimeoutCb=t.cb));var i=this;this._operationTimeoutCb&&(this._timeout=setTimeout((function(){i._operationTimeoutCb()}),i._operationTimeout)),this._operationStart=(new Date).getTime(),this._fn(this._attempts)},t.prototype.try=function(e){console.log("Using RetryOperation.try() is deprecated"),this.attempt(e)},t.prototype.start=function(e){console.log("Using RetryOperation.start() is deprecated"),this.attempt(e)},t.prototype.start=t.prototype.try,t.prototype.errors=function(){return this._errors},t.prototype.attempts=function(){return this._attempts},t.prototype.mainError=function(){if(0===this._errors.length)return null;for(var e={},t=null,i=0,n=0;n<this._errors.length;n++){var r=this._errors[n],a=r.message,o=(e[a]||0)+1;e[a]=o,o>=i&&(t=r,i=o)}return t}},9509:(e,t,i)=>{var n=i(4293),r=n.Buffer;function a(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return r(e,t,i)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=n:(a(n,t),t.Buffer=o),a(r,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=r(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},2399:(e,t,i)=>{"use strict";var n,r=i(4293),a=r.Buffer,o={};for(n in r)r.hasOwnProperty(n)&&"SlowBuffer"!==n&&"Buffer"!==n&&(o[n]=r[n]);var s=o.Buffer={};for(n in a)a.hasOwnProperty(n)&&"allocUnsafe"!==n&&"allocUnsafeSlow"!==n&&(s[n]=a[n]);if(o.Buffer.prototype=a.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(e,t,i){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return a(e,t,i)}),s.alloc||(s.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var n=a(e);return t&&0!==t.length?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n}),!o.kStringMaxLength)try{o.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}o.constants||(o.constants={MAX_LENGTH:o.kMaxLength},o.kStringMaxLength&&(o.constants.MAX_STRING_LENGTH=o.kStringMaxLength)),e.exports=o},329:(e,t,i)=>{"use strict";var n=i(9009),r=i(5158)("send"),a=i(412)("send"),o=i(6149),s=i(517),c=i(5573),p=i(5859),u=i(9635),l=i(5747),f=i(5518),d=i(2161),h=i(338),m=i(4622),v=i(5622),g=i(4917),b=i(2413),y=i(1669),x=v.extname,w=v.join,E=v.normalize,_=v.resolve,S=v.sep,k=/^ *bytes=/,T=31536e6,A=/(?:^|[\\/])\.\.(?:[\\/]|$)/;function O(e,t,i){b.call(this);var n=i||{};if(this.options=n,this.path=t,this.req=e,this._acceptRanges=void 0===n.acceptRanges||Boolean(n.acceptRanges),this._cacheControl=void 0===n.cacheControl||Boolean(n.cacheControl),this._etag=void 0===n.etag||Boolean(n.etag),this._dotfiles=void 0!==n.dotfiles?n.dotfiles:"ignore","ignore"!==this._dotfiles&&"allow"!==this._dotfiles&&"deny"!==this._dotfiles)throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');this._hidden=Boolean(n.hidden),void 0!==n.hidden&&a("hidden: use dotfiles: '"+(this._hidden?"allow":"ignore")+"' instead"),void 0===n.dotfiles&&(this._dotfiles=void 0),this._extensions=void 0!==n.extensions?U(n.extensions,"extensions option"):[],this._immutable=void 0!==n.immutable&&Boolean(n.immutable),this._index=void 0!==n.index?U(n.index,"index option"):["index.html"],this._lastModified=void 0===n.lastModified||Boolean(n.lastModified),this._maxage=n.maxAge||n.maxage,this._maxage="string"==typeof this._maxage?d(this._maxage):Number(this._maxage),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),T),this._root=n.root?_(n.root):null,!this._root&&n.from&&this.from(n.from)}function C(e,t,i){return e+" "+(i?i.start+"-"+i.end:"*")+"/"+t}function R(e,t){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>'+e+"</title>\n</head>\n<body>\n<pre>"+t+"</pre>\n</body>\n</html>\n"}function B(e){return"function"!=typeof e.getHeaderNames?Object.keys(e._headers||{}):e.getHeaderNames()}function N(e,t){return("function"!=typeof e.listenerCount?e.listeners(t).length:e.listenerCount(t))>0}function U(e,t){for(var i=[].concat(e||[]),n=0;n<i.length;n++)if("string"!=typeof i[n])throw new TypeError(t+" must be array of strings or false");return i}function P(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,t,i){return new O(e,t,i)},e.exports.mime=f,y.inherits(O,b),O.prototype.etag=a.function((function(e){return this._etag=Boolean(e),r("etag %s",this._etag),this}),"send.etag: pass etag as option"),O.prototype.hidden=a.function((function(e){return this._hidden=Boolean(e),this._dotfiles=void 0,r("hidden %s",this._hidden),this}),"send.hidden: use dotfiles option"),O.prototype.index=a.function((function(e){var t=e?U(e,"paths argument"):[];return r("index %o",e),this._index=t,this}),"send.index: pass index as option"),O.prototype.root=function(e){return this._root=_(String(e)),r("root %s",this._root),this},O.prototype.from=a.function(O.prototype.root,"send.from: pass root as option"),O.prototype.root=a.function(O.prototype.root,"send.root: pass root as option"),O.prototype.maxage=a.function((function(e){return this._maxage="string"==typeof e?d(e):Number(e),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),T),r("max-age %d",this._maxage),this}),"send.maxage: pass maxAge as option"),O.prototype.error=function(e,t){if(N(this,"error"))return this.emit("error",n(e,t,{expose:!1}));var i=this.res,r=g[e]||String(e),a=R("Error",c(r));!function(e){for(var t=B(e),i=0;i<t.length;i++)e.removeHeader(t[i])}(i),t&&t.headers&&function(e,t){for(var i=Object.keys(t),n=0;n<i.length;n++){var r=i[n];e.setHeader(r,t[r])}}(i,t.headers),i.statusCode=e,i.setHeader("Content-Type","text/html; charset=UTF-8"),i.setHeader("Content-Length",Buffer.byteLength(a)),i.setHeader("Content-Security-Policy","default-src 'none'"),i.setHeader("X-Content-Type-Options","nosniff"),i.end(a)},O.prototype.hasTrailingSlash=function(){return"/"===this.path[this.path.length-1]},O.prototype.isConditionalGET=function(){return this.req.headers["if-match"]||this.req.headers["if-unmodified-since"]||this.req.headers["if-none-match"]||this.req.headers["if-modified-since"]},O.prototype.isPreconditionFailure=function(){var e=this.req,t=this.res,i=e.headers["if-match"];if(i){var n=t.getHeader("ETag");return!n||"*"!==i&&function(e){for(var t=0,i=[],n=0,r=0,a=e.length;r<a;r++)switch(e.charCodeAt(r)){case 32:n===t&&(n=t=r+1);break;case 44:i.push(e.substring(n,t)),n=t=r+1;break;default:t=r+1}return i.push(e.substring(n,t)),i}(i).every((function(e){return e!==n&&e!=="W/"+n&&"W/"+e!==n}))}var r=P(e.headers["if-unmodified-since"]);if(!isNaN(r)){var a=P(t.getHeader("Last-Modified"));return isNaN(a)||a>r}return!1},O.prototype.removeContentHeaderFields=function(){for(var e=this.res,t=B(e),i=0;i<t.length;i++){var n=t[i];"content-"===n.substr(0,8)&&"content-location"!==n&&e.removeHeader(n)}},O.prototype.notModified=function(){var e=this.res;r("not modified"),this.removeContentHeaderFields(),e.statusCode=304,e.end()},O.prototype.headersAlreadySent=function(){var e=new Error("Can't set headers after they are sent.");r("headers already sent"),this.error(500,e)},O.prototype.isCachable=function(){var e=this.res.statusCode;return e>=200&&e<300||304===e},O.prototype.onStatError=function(e){switch(e.code){case"ENAMETOOLONG":case"ENOENT":case"ENOTDIR":this.error(404,e);break;default:this.error(500,e)}},O.prototype.isFresh=function(){return u(this.req.headers,{etag:this.res.getHeader("ETag"),"last-modified":this.res.getHeader("Last-Modified")})},O.prototype.isRangeFresh=function(){var e=this.req.headers["if-range"];if(!e)return!0;if(-1!==e.indexOf('"')){var t=this.res.getHeader("ETag");return Boolean(t&&-1!==e.indexOf(t))}return P(this.res.getHeader("Last-Modified"))<=P(e)},O.prototype.redirect=function(e){var t=this.res;if(N(this,"directory"))this.emit("directory",t,e);else if(this.hasTrailingSlash())this.error(403);else{var i=s(function(e){for(var t=0;t<e.length&&"/"===e[t];t++);return t>1?"/"+e.substr(t):e}(this.path+"/")),n=R("Redirecting",'Redirecting to <a href="'+c(i)+'">'+c(i)+"</a>");t.statusCode=301,t.setHeader("Content-Type","text/html; charset=UTF-8"),t.setHeader("Content-Length",Buffer.byteLength(n)),t.setHeader("Content-Security-Policy","default-src 'none'"),t.setHeader("X-Content-Type-Options","nosniff"),t.setHeader("Location",i),t.end(n)}},O.prototype.pipe=function(e){var t=this._root;this.res=e;var i,n=function(e){try{return decodeURIComponent(e)}catch(e){return-1}}(this.path);if(-1===n)return this.error(400),e;if(~n.indexOf("\0"))return this.error(400),e;if(null!==t){if(n&&(n=E("."+S+n)),A.test(n))return r('malicious path "%s"',n),this.error(403),e;i=n.split(S),n=E(w(t,n))}else{if(A.test(n))return r('malicious path "%s"',n),this.error(403),e;i=E(n).split(S),n=_(n)}if(function(e){for(var t=0;t<e.length;t++){var i=e[t];if(i.length>1&&"."===i[0])return!0}return!1}(i)){var a=this._dotfiles;switch(void 0===a&&(a="."===i[i.length-1][0]?this._hidden?"allow":"ignore":"allow"),r('%s dotfile "%s"',a,n),a){case"allow":break;case"deny":return this.error(403),e;case"ignore":default:return this.error(404),e}}return this._index.length&&this.hasTrailingSlash()?(this.sendIndex(n),e):(this.sendFile(n),e)},O.prototype.send=function(e,t){var i=t.size,n=this.options,a={},o=this.res,s=this.req,c=s.headers.range,p=n.start||0;if(function(e){return"boolean"!=typeof e.headersSent?Boolean(e._header):e.headersSent}(o))this.headersAlreadySent();else{if(r('pipe "%s"',e),this.setHeader(e,t),this.type(e),this.isConditionalGET()){if(this.isPreconditionFailure())return void this.error(412);if(this.isCachable()&&this.isFresh())return void this.notModified()}if(i=Math.max(0,i-p),void 0!==n.end){var u=n.end-p+1;i>u&&(i=u)}if(this._acceptRanges&&k.test(c)){if(c=m(i,c,{combine:!0}),this.isRangeFresh()||(r("range stale"),c=-2),-1===c)return r("range unsatisfiable"),o.setHeader("Content-Range",C("bytes",i)),this.error(416,{headers:{"Content-Range":o.getHeader("Content-Range")}});-2!==c&&1===c.length&&(r("range %j",c),o.statusCode=206,o.setHeader("Content-Range",C("bytes",i,c[0])),p+=c[0].start,i=c[0].end-c[0].start+1)}for(var l in n)a[l]=n[l];a.start=p,a.end=Math.max(p,p+i-1),o.setHeader("Content-Length",i),"HEAD"!==s.method?this.stream(e,a):o.end()}},O.prototype.sendFile=function(e){var t=0,i=this;function n(a){if(i._extensions.length<=t)return a?i.onStatError(a):i.error(404);var o=e+"."+i._extensions[t++];r('stat "%s"',o),l.stat(o,(function(e,t){return e?n(e):t.isDirectory()?n():(i.emit("file",o,t),void i.send(o,t))}))}r('stat "%s"',e),l.stat(e,(function(t,r){return t&&"ENOENT"===t.code&&!x(e)&&e[e.length-1]!==S?n(t):t?i.onStatError(t):r.isDirectory()?i.redirect(e):(i.emit("file",e,r),void i.send(e,r))}))},O.prototype.sendIndex=function(e){var t=-1,i=this;!function n(a){if(++t>=i._index.length)return a?i.onStatError(a):i.error(404);var o=w(e,i._index[t]);r('stat "%s"',o),l.stat(o,(function(e,t){return e?n(e):t.isDirectory()?n():(i.emit("file",o,t),void i.send(o,t))}))}()},O.prototype.stream=function(e,t){var i=!1,n=this,r=this.res,a=l.createReadStream(e,t);this.emit("stream",a),a.pipe(r),h(r,(function(){i=!0,o(a)})),a.on("error",(function(e){i||(i=!0,o(a),n.onStatError(e))})),a.on("end",(function(){n.emit("end")}))},O.prototype.type=function(e){var t=this.res;if(!t.getHeader("Content-Type")){var i=f.lookup(e);if(i){var n=f.charsets.lookup(i);r("content-type %s",i),t.setHeader("Content-Type",i+(n?"; charset="+n:""))}else r("no content-type")}},O.prototype.setHeader=function(e,t){var i=this.res;if(this.emit("headers",i,e,t),this._acceptRanges&&!i.getHeader("Accept-Ranges")&&(r("accept ranges"),i.setHeader("Accept-Ranges","bytes")),this._cacheControl&&!i.getHeader("Cache-Control")){var n="public, max-age="+Math.floor(this._maxage/1e3);this._immutable&&(n+=", immutable"),r("cache-control %s",n),i.setHeader("Cache-Control",n)}if(this._lastModified&&!i.getHeader("Last-Modified")){var a=t.mtime.toUTCString();r("modified %s",a),i.setHeader("Last-Modified",a)}if(this._etag&&!i.getHeader("ETag")){var o=p(t);r("etag %s",o),i.setHeader("ETag",o)}}},2161:e=>{var t=1e3,i=60*t,n=60*i,r=24*n;function a(e,t,i,n){var r=t>=1.5*i;return Math.round(e/i)+" "+n+(r?"s":"")}e.exports=function(e,o){o=o||{};var s,c,p=typeof e;if("string"===p&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var o=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*n;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===p&&!1===isNaN(e))return o.long?(s=e,(c=Math.abs(s))>=r?a(s,c,r,"day"):c>=n?a(s,c,n,"hour"):c>=i?a(s,c,i,"minute"):c>=t?a(s,c,t,"second"):s+" ms"):function(e){var a=Math.abs(e);return a>=r?Math.round(e/r)+"d":a>=n?Math.round(e/n)+"h":a>=i?Math.round(e/i)+"m":a>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},8636:(e,t,i)=>{"use strict";var n=i(517),r=i(5573),a=i(8317),o=i(5622).resolve,s=i(329),c=i(8835);e.exports=function(e,t){if(!e)throw new TypeError("root path required");if("string"!=typeof e)throw new TypeError("root path must be a string");var i=Object.create(t||null),p=!1!==i.fallthrough,u=!1!==i.redirect,l=i.setHeaders;if(l&&"function"!=typeof l)throw new TypeError("option setHeaders must be function");i.maxage=i.maxage||i.maxAge||0,i.root=o(e);var f=u?function(e){if(this.hasTrailingSlash())this.error(404);else{var t=a.original(this.req);t.path=null,t.pathname=function(e){for(var t=0;t<e.length&&47===e.charCodeAt(t);t++);return t>1?"/"+e.substr(t):e}(t.pathname+"/");var i=n(c.format(t)),o=("Redirecting",'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Redirecting</title>\n</head>\n<body>\n<pre>'+('Redirecting to <a href="'+r(i)+'">'+r(i)+"</a>")+"</pre>\n</body>\n</html>\n");e.statusCode=301,e.setHeader("Content-Type","text/html; charset=UTF-8"),e.setHeader("Content-Length",Buffer.byteLength(o)),e.setHeader("Content-Security-Policy","default-src 'none'"),e.setHeader("X-Content-Type-Options","nosniff"),e.setHeader("Location",i),e.end(o)}}:function(){this.error(404)};return function(e,t,n){if("GET"!==e.method&&"HEAD"!==e.method)return p?n():(t.statusCode=405,t.setHeader("Allow","GET, HEAD"),t.setHeader("Content-Length","0"),void t.end());var r=!p,o=a.original(e),c=a(e).pathname;"/"===c&&"/"!==o.pathname.substr(-1)&&(c="");var u=s(e,c,i);u.on("directory",f),l&&u.on("headers",l),p&&u.on("file",(function(){r=!0})),u.on("error",(function(e){!r&&e.statusCode<500?n():n(e)})),u.pipe(t)}},e.exports.mime=s.mime},6644:e=>{"use strict";e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i]);return e})},8446:e=>{"use strict";e.exports={errorCode:{generic:"ERR_GENERIC_CLIENT",connect:"ERR_NOT_CONNECTED",badPath:"ERR_BAD_PATH",permission:"EACCES",notexist:"ENOENT",notdir:"ENOTDIR"},targetType:{writeFile:1,readFile:2,writeDir:3,readDir:4,readObj:5,writeObj:6}}},1111:(e,t,i)=>{"use strict";const{Client:n}=i(2353),r=i(5747),a=i(6890),o=i(5273),{join:s,parse:c}=i(5622),{fmtError:p,addTempListeners:u,removeTempListeners:l,haveConnection:f,normalizeRemotePath:d,localExists:h}=i(5933),{errorCode:m}=i(8446);e.exports=class{constructor(e){this.client=new n,this.sftp=void 0,this.clientName=e||"sftp",this.endCalled=!1,this.errorHandled=!1,this.remotePathSep="/",this.remotePlatform="unix",this.debug=void 0,this.client.on("close",(()=>{this.endCalled||(this.debugMsg("Unexpected close event raised by server"),this.sftp=void 0)})),this.client.on("end",(()=>{this.endCalled||(this.debugMsg("Unexpected end event raised by server"),this.sftp=void 0)})),this.client.on("error",(e=>{if(!this.errorHandled)throw p(`Unexpected error: ${e.message}`,"global-error-handler",e.code);this.errorHandled=!1}))}debugMsg(e,t){this.debug&&(t?this.debug(`CLIENT[${this.clientName}]: ${e} ${JSON.stringify(t,null," ")}`):this.debug(`CLIENT[${this.clientName}]: ${e}`))}on(e,t){this.debugMsg(`Adding listener to ${e}`),this.client.on(e,t)}removeListener(e,t){this.debugMsg(`Removing listener from ${e}`),this.client.removeListener(e,t)}sftpConnect(e){let t;return new Promise(((i,n)=>{u(this,"sftpConnect",n),t=()=>{this.client.sftp(((e,t)=>{e?(this.debugMsg(`SFTP channel error: ${e.message} ${e.code}`),n(p(e,"sftpConnect",e.code))):(this.debugMsg("SFTP channel established"),i(t))}))},this.client.on("ready",t).connect(e)})).finally((e=>(this.removeListener("ready",t),l(this.client),e)))}connect(e){return e.debug&&(this.debug=e.debug,this.debugMsg("Debugging turned on")),this.sftp?(this.debugMsg("Already connected - reject"),Promise.reject(p("An existing SFTP connection is already defined","connect",m.connect))):o(((t,i)=>(this.debugMsg(`Connect attempt ${i}`),this.sftpConnect(e).catch((e=>{t(e)})))),{retries:e.retries||1,factor:e.retry_factor||2,minTimeout:e.retry_minTimeout||1e3}).then((e=>{this.sftp=e}))}realPath(e){return new Promise(((t,i)=>{this.debugMsg(`realPath -> ${e}`),u(this,"realPath",i),f(this,"realPath",i)&&this.sftp.realpath(e,((n,r)=>{n&&(this.debugMsg(`realPath Error: ${n.message} Code: ${n.code}`),2===n.code?t(""):i(p(`${n.message} ${e}`,"realPath",n.code))),this.debugMsg(`realPath <- ${r}`),t(r)}))})).finally((e=>(l(this.client),e)))}cwd(){return this.realPath(".")}async stat(e){const t=t=>new Promise(((i,n)=>{this.debugMsg(`stat -> ${t}`),u(this,"stat",n),this.sftp.stat(t,((t,r)=>{t?(this.debugMsg(`stat error ${t.message} code: ${t.code}`),2===t.code||4===t.code?n(p(`No such file: ${e}`,"_stat",m.notexist)):n(p(`${t.message} ${e}`,"_stat",t.code))):(this.debugMsg("stats <- ",r),i({mode:r.mode,uid:r.uid,gid:r.gid,size:r.size,accessTime:1e3*r.atime,modifyTime:1e3*r.mtime,isDirectory:r.isDirectory(),isFile:r.isFile(),isBlockDevice:r.isBlockDevice(),isCharacterDevice:r.isCharacterDevice(),isSymbolicLink:r.isSymbolicLink(),isFIFO:r.isFIFO(),isSocket:r.isSocket()}))}))})).finally((e=>(l(this.client),e)));try{return f(this,"stat"),t(await d(this,e))}catch(e){throw e.custom?e:p(e,"stat",e.code)}}async exists(e){try{if(!f(this,"exists"))return!1;{if("."===e)return"d";let t=await d(this,e);try{this.debugMsg(`exists -> ${t}`);let e=await this.stat(t);return this.debugMsg("exists <- ",e),e.isDirectory?"d":e.isSymbolicLink?"l":!!e.isFile&&"-"}catch(e){if(e.code===m.notexist)return!1;throw e}}}catch(e){throw e.custom?e:p(e,"exists",e.code)}}list(e,t=/.*/){return new Promise(((i,n)=>{if(f(this,"list",n)){const r=/-/gi;this.debugMsg(`list -> ${e} filter -> ${t}`),u(this,"list",n),this.sftp.readdir(e,((a,o)=>{if(a)this.debugMsg(`list error ${a.message} code: ${a.code}`),n(p(`${a.message} ${e}`,"list",a.code));else{this.debugMsg("list <- ",o);let e,n=[];if(o&&(n=o.map((e=>({type:e.longname.substr(0,1),name:e.filename,size:e.attrs.size,modifyTime:1e3*e.attrs.mtime,accessTime:1e3*e.attrs.atime,rights:{user:e.longname.substr(1,3).replace(r,""),group:e.longname.substr(4,3).replace(r,""),other:e.longname.substr(7,3).replace(r,"")},owner:e.attrs.uid,group:e.attrs.gid})))),t instanceof RegExp)e=t;else{let i=t.replace(/\*([^*])*?/gi,".*");e=new RegExp(i)}i(n.filter((t=>e.test(t.name))))}}))}})).finally((e=>(l(this.client),e)))}get(e,t,i={}){return new Promise(((n,o)=>{if(f(this,"get",o)){this.debugMsg(`get -> ${e} `,i),u(this,"get",o);let s=this.sftp.createReadStream(e,i);if(s.once("error",(t=>{o(p(`${t.message} ${e}`,"get",t.code))})),void 0===t){this.debugMsg("get returning buffer of data");let e=a((e=>{s.removeAllListeners("error"),n(e)}));s.pipe(e)}else{let e;"string"==typeof t?(this.debugMsg("get returning local file"),e=r.createWriteStream(t)):(this.debugMsg("get returning data into supplied stream"),e=t),e.once("error",(e=>{o(p(`${e.message} ${"string"==typeof t?t:""}`,"get",e.code)),!1===i.autoClose&&s.destroy()})),e.once("finish",(()=>{!1===i.autoClose&&s.destroy(),n("string"==typeof t?t:e)})),s.pipe(e)}}})).finally((e=>(l(this.client),e)))}fastGet(e,t,i){return this.exists(e).then((t=>{if("-"!==t){let i=!1===t?`No such file ${e}`:`Not a regular file ${e}`;return Promise.reject(p(i,"fastGet",m.badPath))}})).then((()=>new Promise(((n,r)=>{f(this,"fastGet",r)&&(this.debugMsg(`fastGet -> remote: ${e} local: ${t} `,i),u(this,"fastGet",r),this.sftp.fastGet(e,t,i,(i=>{i&&(this.debugMsg(`fastGet error ${i.message} code: ${i.code}`),r(p(i,"fastGet"))),n(`${e} was successfully download to ${t}!`)})))})).finally((e=>(l(this.client),e)))))}fastPut(e,t,i){return this.debugMsg(`fastPut -> local ${e} remote ${t}`),h(e).then((t=>(this.debugMsg(`fastPut <- localStatus ${t}`),"-"!==t?(this.debugMsg("fastPut reject bad source path"),Promise.reject(p(`Bad path ${e}`,"fastPut",m.badPath))):new Promise(((t,i)=>{r.access(e,r.constants.F_OK|r.constants.R_OK,(n=>{n?(this.debugMsg("fastPut reject no access source"),i(p(`${n.message} ${e}`,"fastPut",n.code))):(this.debugMsg("fastPut source access ok"),t(!0))}))}))))).then((()=>new Promise(((n,r)=>{f(this,"fastPut",r)&&(this.debugMsg(`fastPut -> local: ${e} remote: ${t} opts: ${JSON.stringify(i)}`),u(this,"fastPut",r),this.sftp.fastPut(e,t,i,(i=>{i&&(this.debugMsg(`fastPut error ${i.message} ${i.code}`),r(p(`${i.message} Local: ${e} Remote: ${t}`,"fastPut",i.code))),this.debugMsg("fastPut file transferred"),n(`${e} was successfully uploaded to ${t}!`)})))})).finally((e=>(l(this.client),e)))))}put(e,t,i={}){return this.debugMsg(`put ${"string"==typeof e?e:"<buffer | stream>"} -> ${t}`,i),h("string"==typeof e?e:"dummy").then((t=>"string"==typeof e&&"-"!==t?(this.debugMsg(`put: file does not exist ${e} - rejecting`),Promise.reject(p(`Bad path ${e}`,"put",m.badPath))):new Promise(((t,i)=>{"string"==typeof e?r.access(e,r.constants.F_OK|r.constants.R_OK,(n=>{n?(this.debugMsg(`put: Cannot read ${e} - rejecting`),i(p(`Permission denied ${e}`,"put",m.permission))):(this.debugMsg("put: localSrc file OK"),t(!0))})):(this.debugMsg("put: localSrc buffer or string OK"),t(!0))})))).then((()=>new Promise(((n,a)=>{if(f(this,"put",a)){u(this,"put",a);let o=this.sftp.createWriteStream(t,i);if(o.once("error",(e=>{a(p(`${e.message} ${t}`,"put",e.code))})),o.once("finish",(()=>{!1===i.autoClose&&o.destroy(),n(`Uploaded data stream to ${t}`)})),e instanceof Buffer)this.debugMsg("put source is a buffer"),o.end(e);else{let t;"string"==typeof e?(this.debugMsg(`put source is a file path: ${e}`),t=r.createReadStream(e)):(this.debugMsg("put source is a stream"),t=e),t.once("error",(t=>{a(p(`${t.message} ${"string"==typeof e?e:""}`,"put",t.code)),!1===i.autoClose&&o.destroy()})),t.pipe(o)}}})).finally((e=>(l(this.client),e)))))}append(e,t,i={}){return new Promise(((n,r)=>{if(f(this,"append",r))if("string"==typeof e)r(p("Cannot append one file to another","append"));else{this.debugMsg(`append -> remote: ${t} `,i),u(this,"append",r),i.flags="a";let a=this.sftp.createWriteStream(t,i);a.once("error",(e=>{r(p(`${e.message} ${t}`,"append",e.code))})),a.once("finish",(()=>{n(`Appended data to ${t}`)})),e instanceof Buffer?a.end(e):e.pipe(a)}})).finally((e=>(l(this.client),e)))}async mkdir(e,t=!1){const i=e=>new Promise(((t,i)=>{this.debugMsg(`mkdir -> ${e}`),u(this,"mkdir",i),this.sftp.mkdir(e,(n=>{n&&(this.debugMsg(`mkdir error ${n.message} code: ${n.code}`),i(p(`${n.message} ${e}`,"_mkdir",n.code))),t(`${e} directory created`)}))})).finally((e=>(l(this.client),e)));try{f(this,"mkdir");let n=await d(this,e);if(!t)return i(n);let r=c(n).dir;return r&&(await this.exists(r)||await this.mkdir(r,!0)),i(n)}catch(t){throw t.custom?t:p(`${t.message} ${e}`,"mkdir",t.code)}}async rmdir(e,t=!1){const i=e=>new Promise(((t,i)=>{this.debugMsg(`rmdir -> ${e}`),u(this,"rmdir",i),this.sftp.rmdir(e,(n=>{n&&(this.debugMsg(`rmdir error ${n.message} code: ${n.code}`),i(p(`${n.message} ${e}`,"_rmdir",n.code))),t("Successfully removed directory")}))})).finally((e=>(l(this.client),e)));try{f(this,"rmdir");let n=await d(this,e);if(!t)return i(n);let r=await this.list(n);if(r.length){let e=r.filter((e=>"d"!==e.type)),t=r.filter((e=>"d"===e.type));this.debugMsg("rmdir contents (files): ",e),this.debugMsg("rmdir contents (dirs): ",t);for(let t of e)await this.delete(`${n}${this.remotePathSep}${t.name}`);for(let e of t)await this.rmdir(`${n}${this.remotePathSep}${e.name}`,!0)}return i(n)}catch(e){throw e.custom?e:p(e,"rmdir",e.code)}}delete(e,t=!1){return new Promise(((i,n)=>{f(this,"delete",n)&&(this.debugMsg(`delete -> ${e}`),u(this,"delete",n),this.sftp.unlink(e,(r=>{r&&(this.debugMsg(`delete error ${r.message} code: ${r.code}`),t&&2===r.code?(this.debugMsg("delete ignore missing target error"),i(`Successfully deleted ${e}`)):n(p(`${r.message} ${e}`,"delete",r.code))),i(`Successfully deleted ${e}`)})))})).finally((e=>(l(this.client),e)))}rename(e,t){return new Promise(((i,n)=>{f(this,"rename",n)&&(this.debugMsg(`rename -> ${e} ${t}`),u(this,"rename",n),this.sftp.rename(e,t,(r=>{r&&(this.debugMsg(`rename error ${r.message} code: ${r.code}`),n(p(`${r.message} From: ${e} To: ${t}`,"rename",r.code))),i(`Successfully renamed ${e} to ${t}`)})))})).finally((e=>(l(this.client),e)))}posixRename(e,t){return new Promise(((i,n)=>{f(this,"posixRename",n)&&(this.debugMsg(`posixRename -> ${e} ${t}`),u(this,"posixRename",n),this.sftp.ext_openssh_rename(e,t,(r=>{r&&(this.debugMsg(`posixRename error ${r.message} code: ${r.code}`),n(p(`${r.message} From: ${e} To: ${t}`,"posixRename",r.code))),i(`Successful POSIX rename ${e} to ${t}`)})))})).finally((e=>(l(this.client),e)))}chmod(e,t){return new Promise(((i,n)=>{this.debugMsg(`chmod -> ${e} ${t}`),u(this,"chmod",n),this.sftp.chmod(e,t,(t=>{t&&n(p(`${t.message} ${e}`,"chmod",t.code)),i("Successfully change file mode")}))})).finally((e=>(l(this.client),e)))}async uploadDir(e,t,i=/.*/){try{this.debugMsg(`uploadDir -> ${e} ${t}`),f(this,"uploadDir");let n=await this.exists(t);if(n&&"d"!==n)throw p(`Bad path ${t}`,"uploadDir",m.badPath);n||await this.mkdir(t,!0);let a=r.readdirSync(e,{encoding:"utf8",withFileTypes:!0});a=a.filter((e=>i.test(e.name)));for(let n of a)if(n.isDirectory()){let r=s(e,n.name),a=t+this.remotePathSep+n.name;await this.uploadDir(r,a,i)}else if(n.isFile()){let i=s(e,n.name),r=t+this.remotePathSep+n.name;await this.fastPut(i,r),this.client.emit("upload",{source:i,destination:r})}else this.debugMsg(`uploadDir: File ignored: ${n.name} not a regular file`);return`${e} uploaded to ${t}`}catch(e){throw e.custom?e:p(e,"uploadDir")}}async downloadDir(e,t,i=/.*/){try{this.debugMsg(`downloadDir -> ${e} ${t}`),f(this,"downloadDir");let n=await this.list(e,i),a=await h(t);if(a&&"d"!==a)throw p(`Bad path ${t}`,"downloadDir",m.badPath);a||r.mkdirSync(t,{recursive:!0});for(let r of n)if("d"===r.type){let n=e+this.remotePathSep+r.name,a=s(t,r.name);await this.downloadDir(n,a,i)}else if("-"===r.type){let i=e+this.remotePathSep+r.name,n=s(t,r.name);await this.fastGet(i,n),this.client.emit("download",{source:i,destination:n})}else this.debugMsg(`downloadDir: File ignored: ${r.name} not regular file`);return`${e} downloaded to ${t}`}catch(e){throw e.custom?e:p(e,"downloadDir",e.code)}}end(){let e;return new Promise(((t,i)=>{this.endCalled=!0,u(this,"end",i),e=()=>{this.sftp=void 0,t(!0)},this.on("close",e),f(this,"end",i)&&(this.debugMsg("Have connection - calling end()"),this.client.end())})).finally((()=>(l(this.client),this.removeListener("close",e),!0)))}}},5933:(e,t,i)=>{"use strict";const n=i(5747),{errorCode:r}=i(8446);function a(e,t="sftp",i,n){let a="",o="",s=n?` after ${n} ${n>1?"attempts":"attempt"}`:"";if(void 0===e)a=`${t}: Undefined error - probably a bug!`,o=r.generic;else if("string"==typeof e)a=`${t}: ${e}${s}`,o=i||r.generic;else if(e.custom)a=`${t}->${e.message}${s}`,o=e.code;else{switch(e.code){case"ENOTFOUND":a=`${t}: ${e.level} error. Address lookup failed for host ${e.hostname}${s}`;break;case"ECONNREFUSED":a=`${t}: ${e.level} error. Remote host at ${e.address} refused connection${s}`;break;case"ECONNRESET":a=`${t}: Remote host has reset the connection: ${e.message}${s}`;break;default:a=`${t}: ${e.message}${s}`}o=e.code?e.code:r.generic}let c=new Error(a);return c.code=o,c.custom=!0,c}let o=[];function s(e,t,i){let n=n=>{if(!e.errorHandled){if(e.errorHandled=!0,!i)throw a(n,t,n.code);i(a(n,t,n.code))}e.debugMsg(`Handled Error: ${n.message} ${n.code}`)};return o.push(["error",n]),n}function c(e,t,i){let n=function(){if(e.debugMsg(`Handled end event for ${t}`),!e.endCalled){if(e.sftp=void 0,!i)throw a("Unexpected end event raised",t);i(a("Unexpected end event raised",t))}};return o.push(["end",n]),n}function p(e,t,i){let n=function(){if(e.debugMsg(`handled close event for ${t}`),!e.endCalled){if(e.sftp=void 0,!i)throw a("Unexpected close event raised",t);i(a("Unexpected close event raised",t))}};return o.push(["close",n]),n}e.exports={fmtError:a,errorListener:s,endListener:c,closeListener:p,addTempListeners:function(e,t,i){e.client.prependListener("end",c(e,t,i)),e.client.prependListener("close",p(e,t,i)),e.client.prependListener("error",s(e,t,i))},removeTempListeners:function(e){o.forEach((([t,i])=>{e.removeListener(t,i)})),o=[]},localExists:function(e){return new Promise(((t,i)=>{n.stat(e,((e,n)=>{e?"ENOENT"===e.code?t(!1):i(e):n.isDirectory()?t("d"):n.isSymbolicLink()?t("l"):n.isFile()?t("-"):t("")}))}))},normalizeRemotePath:async function(e,t){try{return t.startsWith("..")?await e.realPath("..")+e.remotePathSep+t.substring(3):t.startsWith(".")?await e.realPath(".")+e.remotePathSep+t.substring(2):t}catch(e){throw a(e,"normalizeRemotePath")}},haveConnection:function(e,t,i){if(!e.sftp){let e=a("No SFTP connection available",t,r.connect);if(i)return i(e),!1;throw e}return!0}}},816:(e,t,i)=>{e.exports={SFTPStream:i(829),SSH2Stream:i(4184),utils:i(8013),constants:i(1399)}},33:e=>{e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,i){return e[i++]=t>>>24,e[i++]=t>>>16,e[i++]=t>>>8,e[i++]=t,i},writeUInt32LE:function(e,t,i){return e[i++]=t,e[i++]=t>>>8,e[i++]=t>>>16,e[i++]=t>>>24,i}}},1399:(e,t,i)=>{var n,r,a,o=i(6417),s=function(){if("function"==typeof o.sign&&"function"==typeof o.verify){var e,t,i="-----BEGIN PRIVATE KEY-----\r\nMC4CAQAwBQYDK2VwBCIEIHKj+sVa9WcD/q2DJUJaf43Kptc8xYuUQA4bOFj9vC8T\r\n-----END PRIVATE KEY-----",n=Buffer.from("a");try{e=o.sign(null,n,i),t=o.verify(null,n,i,e)}catch(e){}return Buffer.isBuffer(e)&&64===e.length&&!0===t}return!1}(),c="function"==typeof o.diffieHellman&&"function"==typeof o.generateKeyPairSync&&"function"==typeof o.createPublicKey,p=t.MESSAGE={DISCONNECT:1,IGNORE:2,UNIMPLEMENTED:3,DEBUG:4,SERVICE_REQUEST:5,SERVICE_ACCEPT:6,KEXINIT:20,NEWKEYS:21,USERAUTH_REQUEST:50,USERAUTH_FAILURE:51,USERAUTH_SUCCESS:52,USERAUTH_BANNER:53,GLOBAL_REQUEST:80,REQUEST_SUCCESS:81,REQUEST_FAILURE:82,CHANNEL_OPEN:90,CHANNEL_OPEN_CONFIRMATION:91,CHANNEL_OPEN_FAILURE:92,CHANNEL_WINDOW_ADJUST:93,CHANNEL_DATA:94,CHANNEL_EXTENDED_DATA:95,CHANNEL_EOF:96,CHANNEL_CLOSE:97,CHANNEL_REQUEST:98,CHANNEL_SUCCESS:99,CHANNEL_FAILURE:100};for(n=0,a=(r=Object.keys(p)).length;n<a;++n)p[p[r[n]]]=r[n];p.KEXDH_INIT=30,p.KEXDH_REPLY=31,p.KEXDH_GEX_REQUEST=34,p.KEXDH_GEX_GROUP=31,p.KEXDH_GEX_INIT=32,p.KEXDH_GEX_REPLY=33,p.KEXECDH_INIT=30,p.KEXECDH_REPLY=31,p.USERAUTH_PASSWD_CHANGEREQ=60,p.USERAUTH_PK_OK=60,p.USERAUTH_INFO_REQUEST=60,p.USERAUTH_INFO_RESPONSE=61;var u=t.DYNAMIC_KEXDH_MESSAGE={};u[p.KEXDH_GEX_GROUP]="KEXDH_GEX_GROUP",u[p.KEXDH_GEX_REPLY]="KEXDH_GEX_REPLY";var l=t.KEXDH_MESSAGE={};l[p.KEXDH_INIT]="KEXDH_INIT",l[p.KEXDH_REPLY]="KEXDH_REPLY";var f=t.DISCONNECT_REASON={HOST_NOT_ALLOWED_TO_CONNECT:1,PROTOCOL_ERROR:2,KEY_EXCHANGE_FAILED:3,RESERVED:4,MAC_ERROR:5,COMPRESSION_ERROR:6,SERVICE_NOT_AVAILABLE:7,PROTOCOL_VERSION_NOT_SUPPORTED:8,HOST_KEY_NOT_VERIFIABLE:9,CONNECTION_LOST:10,BY_APPLICATION:11,TOO_MANY_CONNECTIONS:12,AUTH_CANCELED_BY_USER:13,NO_MORE_AUTH_METHODS_AVAILABLE:14,ILLEGAL_USER_NAME:15};for(n=0,a=(r=Object.keys(f)).length;n<a;++n)f[f[r[n]]]=r[n];var d=t.CHANNEL_OPEN_FAILURE={ADMINISTRATIVELY_PROHIBITED:1,CONNECT_FAILED:2,UNKNOWN_CHANNEL_TYPE:3,RESOURCE_SHORTAGE:4};for(n=0,a=(r=Object.keys(d)).length;n<a;++n)d[d[r[n]]]=r[n];var h=t.TERMINAL_MODE={TTY_OP_END:0,VINTR:1,VQUIT:2,VERASE:3,VKILL:4,VEOF:5,VEOL:6,VEOL2:7,VSTART:8,VSTOP:9,VSUSP:10,VDSUSP:11,VREPRINT:12,VWERASE:13,VLNEXT:14,VFLUSH:15,VSWTCH:16,VSTATUS:17,VDISCARD:18,IGNPAR:30,PARMRK:31,INPCK:32,ISTRIP:33,INLCR:34,IGNCR:35,ICRNL:36,IUCLC:37,IXON:38,IXANY:39,IXOFF:40,IMAXBEL:41,ISIG:50,ICANON:51,XCASE:52,ECHO:53,ECHOE:54,ECHOK:55,ECHONL:56,NOFLSH:57,TOSTOP:58,IEXTEN:59,ECHOCTL:60,ECHOKE:61,PENDIN:62,OPOST:70,OLCUC:71,ONLCR:72,OCRNL:73,ONOCR:74,ONLRET:75,CS7:90,CS8:91,PARENB:92,PARODD:93,TTY_OP_ISPEED:128,TTY_OP_OSPEED:129};for(n=0,a=(r=Object.keys(h)).length;n<a;++n)h[h[r[n]]]=r[n];var m=t.CHANNEL_EXTENDED_DATATYPE={STDERR:1};for(n=0,a=(r=Object.keys(m)).length;n<a;++n)m[m[r[n]]]=r[n];t.SIGNALS=["ABRT","ALRM","FPE","HUP","ILL","INT","QUIT","SEGV","TERM","USR1","USR2","KILL","PIPE"];var v=["ecdh-sha2-nistp256","ecdh-sha2-nistp384","ecdh-sha2-nistp521","diffie-hellman-group-exchange-sha256","diffie-hellman-group14-sha256","diffie-hellman-group16-sha512","diffie-hellman-group18-sha512","diffie-hellman-group14-sha1"];c&&(v.unshift("curve25519-sha256"),v.unshift("curve25519-sha256@libssh.org"));var g=["diffie-hellman-group-exchange-sha1","diffie-hellman-group1-sha1"],b=Buffer.from(v.join(","),"ascii");g=v.concat(g);var y=["ecdsa-sha2-nistp256","ecdsa-sha2-nistp384","ecdsa-sha2-nistp521","ssh-rsa"];s&&y.unshift("ssh-ed25519");var x=["ssh-dss"],w=Buffer.from(y.join(","),"ascii");x=y.concat(x);var E=["aes128-ctr","aes192-ctr","aes256-ctr","aes128-gcm","aes128-gcm@openssh.com","aes256-gcm","aes256-gcm@openssh.com"],_=["aes256-cbc","aes192-cbc","aes128-cbc","blowfish-cbc","3des-cbc","arcfour256","arcfour128","cast128-cbc","arcfour"],S=Buffer.from(E.join(","),"ascii");_=E.concat(_);var k=["hmac-sha2-256","hmac-sha2-512","hmac-sha1"],T=["hmac-md5","hmac-sha2-256-96","hmac-sha2-512-96","hmac-ripemd160","hmac-sha1-96","hmac-md5-96"],A=Buffer.from(k.join(","),"ascii");T=k.concat(T);var O=["none","zlib@openssh.com","zlib"],C=[],R=Buffer.from(O.join(","),"ascii");function B(e,t,i,n,r,a){return{blockLen:e,keyLen:t,ivLen:0===i?e:i,authLen:n,discardLen:r,stream:a}}function N(e,t){return{len:e,actualLen:t}}C=O.concat(C),t.CIPHER_INFO={"aes128-gcm":B(16,16,12,16,0,!1),"aes256-gcm":B(16,32,12,16,0,!1),"aes128-gcm@openssh.com":B(16,16,12,16,0,!1),"aes256-gcm@openssh.com":B(16,32,12,16,0,!1),"aes128-cbc":B(16,16,0,0,0,!1),"aes192-cbc":B(16,24,0,0,0,!1),"aes256-cbc":B(16,32,0,0,0,!1),"rijndael-cbc@lysator.liu.se":B(16,32,0,0,0,!1),"3des-cbc":B(8,24,0,0,0,!1),"blowfish-cbc":B(8,16,0,0,0,!1),"idea-cbc":B(8,16,0,0,0,!1),"cast128-cbc":B(8,16,0,0,0,!1),"camellia128-cbc":B(16,16,0,0,0,!1),"camellia192-cbc":B(16,24,0,0,0,!1),"camellia256-cbc":B(16,32,0,0,0,!1),"camellia128-cbc@openssh.com":B(16,16,0,0,0,!1),"camellia192-cbc@openssh.com":B(16,24,0,0,0,!1),"camellia256-cbc@openssh.com":B(16,32,0,0,0,!1),"aes128-ctr":B(16,16,0,0,0,!1),"aes192-ctr":B(16,24,0,0,0,!1),"aes256-ctr":B(16,32,0,0,0,!1),"3des-ctr":B(8,24,0,0,0,!1),"blowfish-ctr":B(8,16,0,0,0,!1),"cast128-ctr":B(8,16,0,0,0,!1),"camellia128-ctr":B(16,16,0,0,0,!1),"camellia192-ctr":B(16,24,0,0,0,!1),"camellia256-ctr":B(16,32,0,0,0,!1),"camellia128-ctr@openssh.com":B(16,16,0,0,0,!1),"camellia192-ctr@openssh.com":B(16,24,0,0,0,!1),"camellia256-ctr@openssh.com":B(16,32,0,0,0,!1),arcfour:B(8,16,0,0,1536,!0),arcfour128:B(8,16,0,0,1536,!0),arcfour256:B(8,32,0,0,1536,!0),arcfour512:B(8,64,0,0,1536,!0)},t.HMAC_INFO={"hmac-md5":N(16,16),"hmac-md5-96":N(16,12),"hmac-ripemd160":N(20,20),"hmac-sha1":N(20,20),"hmac-sha1-96":N(20,12),"hmac-sha2-256":N(32,32),"hmac-sha2-256-96":N(32,12),"hmac-sha2-512":N(64,64),"hmac-sha2-512-96":N(64,12)},t.ALGORITHMS={KEX:v,KEX_BUF:b,SUPPORTED_KEX:g,SERVER_HOST_KEY:y,SERVER_HOST_KEY_BUF:w,SUPPORTED_SERVER_HOST_KEY:x,CIPHER:E,CIPHER_BUF:S,SUPPORTED_CIPHER:_,HMAC:k,HMAC_BUF:A,SUPPORTED_HMAC:T,COMPRESS:O,COMPRESS_BUF:R,SUPPORTED_COMPRESS:C},t.SSH_TO_OPENSSL={"ecdh-sha2-nistp256":"prime256v1","ecdh-sha2-nistp384":"secp384r1","ecdh-sha2-nistp521":"secp521r1","aes128-gcm":"aes-128-gcm","aes256-gcm":"aes-256-gcm","aes128-gcm@openssh.com":"aes-128-gcm","aes256-gcm@openssh.com":"aes-256-gcm","3des-cbc":"des-ede3-cbc","blowfish-cbc":"bf-cbc","aes256-cbc":"aes-256-cbc","aes192-cbc":"aes-192-cbc","aes128-cbc":"aes-128-cbc","idea-cbc":"idea-cbc","cast128-cbc":"cast-cbc","rijndael-cbc@lysator.liu.se":"aes-256-cbc",arcfour128:"rc4",arcfour256:"rc4",arcfour512:"rc4",arcfour:"rc4","camellia128-cbc":"camellia-128-cbc","camellia192-cbc":"camellia-192-cbc","camellia256-cbc":"camellia-256-cbc","camellia128-cbc@openssh.com":"camellia-128-cbc","camellia192-cbc@openssh.com":"camellia-192-cbc","camellia256-cbc@openssh.com":"camellia-256-cbc","3des-ctr":"des-ede3","blowfish-ctr":"bf-ecb","aes256-ctr":"aes-256-ctr","aes192-ctr":"aes-192-ctr","aes128-ctr":"aes-128-ctr","cast128-ctr":"cast5-ecb","camellia128-ctr":"camellia-128-ecb","camellia192-ctr":"camellia-192-ecb","camellia256-ctr":"camellia-256-ecb","camellia128-ctr@openssh.com":"camellia-128-ecb","camellia192-ctr@openssh.com":"camellia-192-ecb","camellia256-ctr@openssh.com":"camellia-256-ecb","hmac-sha1-96":"sha1","hmac-sha1":"sha1","hmac-sha2-256":"sha256","hmac-sha2-256-96":"sha256","hmac-sha2-512":"sha512","hmac-sha2-512-96":"sha512","hmac-md5-96":"md5","hmac-md5":"md5","hmac-ripemd160":"ripemd160"};var U=t.BUGS={BAD_DHGEX:1,OLD_EXIT:2,DYN_RPORT_BUG:4};t.BUGGY_IMPLS=[["Cisco-1.25",U.BAD_DHGEX],[/^[0-9.]+$/,U.OLD_EXIT],[/^OpenSSH_5\.\d+/,U.DYN_RPORT_BUG]],t.EDDSA_SUPPORTED=s,t.CURVE25519_SUPPORTED=c},6053:e=>{function t(e,t,i){null!=e&&("number"==typeof e?this.fromNumber(e,t,i):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function i(){return new t(null)}t.prototype.am=function(e,t,i,n,r,a){for(var o=16383&t,s=t>>14;--a>=0;){var c=16383&this[e],p=this[e++]>>14,u=s*c+p*o;r=((c=o*c+((16383&u)<<14)+i[n]+r)>>28)+(u>>14)+s*p,i[n++]=268435455&c}return r},t.prototype.DB=28,t.prototype.DM=268435455,t.prototype.DV=1<<28,t.prototype.FV=Math.pow(2,52),t.prototype.F1=24,t.prototype.F2=4;var n,r,a=new Array;for(n="0".charCodeAt(0),r=0;r<=9;++r)a[n++]=r;for(n="a".charCodeAt(0),r=10;r<36;++r)a[n++]=r;for(n="A".charCodeAt(0),r=10;r<36;++r)a[n++]=r;function o(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function s(e,t){var i=a[e.charCodeAt(t)];return null==i?-1:i}function c(e){var t=i();return t.fromInt(e),t}function p(e){var t,i=1;return 0!=(t=e>>>16)&&(e=t,i+=16),0!=(t=e>>8)&&(e=t,i+=8),0!=(t=e>>4)&&(e=t,i+=4),0!=(t=e>>2)&&(e=t,i+=2),0!=(t=e>>1)&&(e=t,i+=1),i}function u(e){this.m=e}function l(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function f(e,t){return e&t}function d(e,t){return e|t}function h(e,t){return e^t}function m(e,t){return e&~t}function v(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function g(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function b(){}function y(e){return e}function x(e){this.r2=i(),this.q3=i(),t.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}u.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},u.prototype.revert=function(e){return e},u.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},u.prototype.mulTo=function(e,t,i){e.multiplyTo(t,i),this.reduce(i)},u.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},l.prototype.convert=function(e){var n=i();return e.abs().dlShiftTo(this.m.t,n),n.divRemTo(this.m,null,n),e.s<0&&n.compareTo(t.ZERO)>0&&this.m.subTo(n,n),n},l.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},l.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var i=32767&e[t],n=i*this.mpl+((i*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[i=t+this.m.t]+=this.m.am(0,n,e,t,0,this.m.t);e[i]>=e.DV;)e[i]-=e.DV,e[++i]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},l.prototype.mulTo=function(e,t,i){e.multiplyTo(t,i),this.reduce(i)},l.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},t.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},t.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},t.prototype.fromString=function(e,i){var n;if(16==i)n=4;else if(8==i)n=3;else if(256==i)n=8;else if(2==i)n=1;else if(32==i)n=5;else{if(4!=i)return void this.fromRadix(e,i);n=2}this.t=0,this.s=0;for(var r=e.length,a=!1,o=0;--r>=0;){var c=8==n?255&e[r]:s(e,r);c<0?"-"==e.charAt(r)&&(a=!0):(a=!1,0==o?this[this.t++]=c:o+n>this.DB?(this[this.t-1]|=(c&(1<<this.DB-o)-1)<<o,this[this.t++]=c>>this.DB-o):this[this.t-1]|=c<<o,(o+=n)>=this.DB&&(o-=this.DB))}8==n&&0!=(128&e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),a&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},t.prototype.dlShiftTo=function(e,t){var i;for(i=this.t-1;i>=0;--i)t[i+e]=this[i];for(i=e-1;i>=0;--i)t[i]=0;t.t=this.t+e,t.s=this.s},t.prototype.drShiftTo=function(e,t){for(var i=e;i<this.t;++i)t[i-e]=this[i];t.t=Math.max(this.t-e,0),t.s=this.s},t.prototype.lShiftTo=function(e,t){var i,n=e%this.DB,r=this.DB-n,a=(1<<r)-1,o=Math.floor(e/this.DB),s=this.s<<n&this.DM;for(i=this.t-1;i>=0;--i)t[i+o+1]=this[i]>>r|s,s=(this[i]&a)<<n;for(i=o-1;i>=0;--i)t[i]=0;t[o]=s,t.t=this.t+o+1,t.s=this.s,t.clamp()},t.prototype.rShiftTo=function(e,t){t.s=this.s;var i=Math.floor(e/this.DB);if(i>=this.t)t.t=0;else{var n=e%this.DB,r=this.DB-n,a=(1<<n)-1;t[0]=this[i]>>n;for(var o=i+1;o<this.t;++o)t[o-i-1]|=(this[o]&a)<<r,t[o-i]=this[o]>>n;n>0&&(t[this.t-i-1]|=(this.s&a)<<r),t.t=this.t-i,t.clamp()}},t.prototype.subTo=function(e,t){for(var i=0,n=0,r=Math.min(e.t,this.t);i<r;)n+=this[i]-e[i],t[i++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n-=e.s;i<this.t;)n+=this[i],t[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<e.t;)n-=e[i],t[i++]=n&this.DM,n>>=this.DB;n-=e.s}t.s=n<0?-1:0,n<-1?t[i++]=this.DV+n:n>0&&(t[i++]=n),t.t=i,t.clamp()},t.prototype.multiplyTo=function(e,i){var n=this.abs(),r=e.abs(),a=n.t;for(i.t=a+r.t;--a>=0;)i[a]=0;for(a=0;a<r.t;++a)i[a+n.t]=n.am(0,r[a],i,a,0,n.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(e){for(var t=this.abs(),i=e.t=2*t.t;--i>=0;)e[i]=0;for(i=0;i<t.t-1;++i){var n=t.am(i,t[i],e,2*i,0,1);(e[i+t.t]+=t.am(i+1,2*t[i],e,2*i+1,n,t.t-i-1))>=t.DV&&(e[i+t.t]-=t.DV,e[i+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(i,t[i],e,2*i,0,1)),e.s=0,e.clamp()},t.prototype.divRemTo=function(e,n,r){var a=e.abs();if(!(a.t<=0)){var o=this.abs();if(o.t<a.t)return null!=n&&n.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=i());var s=i(),c=this.s,u=e.s,l=this.DB-p(a[a.t-1]);l>0?(a.lShiftTo(l,s),o.lShiftTo(l,r)):(a.copyTo(s),o.copyTo(r));var f=s.t,d=s[f-1];if(0!=d){var h=d*(1<<this.F1)+(f>1?s[f-2]>>this.F2:0),m=this.FV/h,v=(1<<this.F1)/h,g=1<<this.F2,b=r.t,y=b-f,x=null==n?i():n;for(s.dlShiftTo(y,x),r.compareTo(x)>=0&&(r[r.t++]=1,r.subTo(x,r)),t.ONE.dlShiftTo(f,x),x.subTo(s,s);s.t<f;)s[s.t++]=0;for(;--y>=0;){var w=r[--b]==d?this.DM:Math.floor(r[b]*m+(r[b-1]+g)*v);if((r[b]+=s.am(0,w,r,y,0,f))<w)for(s.dlShiftTo(y,x),r.subTo(x,r);r[b]<--w;)r.subTo(x,r)}null!=n&&(r.drShiftTo(f,n),c!=u&&t.ZERO.subTo(n,n)),r.t=f,r.clamp(),l>0&&r.rShiftTo(l,r),c<0&&t.ZERO.subTo(r,r)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var r=i(),a=i(),o=n.convert(this),s=p(e)-1;for(o.copyTo(r);--s>=0;)if(n.sqrTo(r,a),(e&1<<s)>0)n.mulTo(a,o,r);else{var c=r;r=a,a=c}return n.revert(r)},t.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var i,n=(1<<t)-1,r=!1,a="",s=this.t,c=this.DB-s*this.DB%t;if(s-- >0)for(c<this.DB&&(i=this[s]>>c)>0&&(r=!0,a=o(i));s>=0;)c<t?(i=(this[s]&(1<<c)-1)<<t-c,i|=this[--s]>>(c+=this.DB-t)):(i=this[s]>>(c-=t)&n,c<=0&&(c+=this.DB,--s)),i>0&&(r=!0),r&&(a+=o(i));return r?a:"0"},t.prototype.negate=function(){var e=i();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var i=this.t;if(0!=(t=i-e.t))return this.s<0?-t:t;for(;--i>=0;)if(0!=(t=this[i]-e[i]))return t;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+p(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=i();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(e,t){var i;return i=e<256||t.isEven()?new u(t):new l(t),this.exp(e,i)},t.ZERO=c(0),t.ONE=c(1),b.prototype.convert=y,b.prototype.revert=y,b.prototype.mulTo=function(e,t,i){e.multiplyTo(t,i)},b.prototype.sqrTo=function(e,t){e.squareTo(t)},x.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=i();return e.copyTo(t),this.reduce(t),t},x.prototype.revert=function(e){return e},x.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},x.prototype.mulTo=function(e,t,i){e.multiplyTo(t,i),this.reduce(i)},x.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var w=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],E=(1<<26)/w[w.length-1];t.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},t.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),n=Math.pow(e,t),r=c(n),a=i(),o=i(),s="";for(this.divRemTo(r,a,o);a.signum()>0;)s=(n+o.intValue()).toString(e).substr(1)+s,a.divRemTo(r,a,o);return o.intValue().toString(e)+s},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var n=this.chunkSize(i),r=Math.pow(i,n),a=!1,o=0,c=0,p=0;p<e.length;++p){var u=s(e,p);u<0?"-"==e.charAt(p)&&0==this.signum()&&(a=!0):(c=i*c+u,++o>=n&&(this.dMultiply(r),this.dAddOffset(c,0),o=0,c=0))}o>0&&(this.dMultiply(Math.pow(i,o)),this.dAddOffset(c,0)),a&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,n){if("number"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),d,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var r=new Array,a=7&e;r.length=1+(e>>3),i.nextBytes(r),a>0?r[0]&=(1<<a)-1:r[0]=0,this.fromString(r,256)}},t.prototype.bitwiseTo=function(e,t,i){var n,r,a=Math.min(e.t,this.t);for(n=0;n<a;++n)i[n]=t(this[n],e[n]);if(e.t<this.t){for(r=e.s&this.DM,n=a;n<this.t;++n)i[n]=t(this[n],r);i.t=this.t}else{for(r=this.s&this.DM,n=a;n<e.t;++n)i[n]=t(r,e[n]);i.t=e.t}i.s=t(this.s,e.s),i.clamp()},t.prototype.changeBit=function(e,i){var n=t.ONE.shiftLeft(e);return this.bitwiseTo(n,i,n),n},t.prototype.addTo=function(e,t){for(var i=0,n=0,r=Math.min(e.t,this.t);i<r;)n+=this[i]+e[i],t[i++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n+=e.s;i<this.t;)n+=this[i],t[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<e.t;)n+=e[i],t[i++]=n&this.DM,n>>=this.DB;n+=e.s}t.s=n<0?-1:0,n>0?t[i++]=n:n<-1&&(t[i++]=this.DV+n),t.t=i,t.clamp()},t.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},t.prototype.multiplyLowerTo=function(e,t,i){var n,r=Math.min(this.t+e.t,t);for(i.s=0,i.t=r;r>0;)i[--r]=0;for(n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,e[r],i,r,0,this.t);for(n=Math.min(e.t,t);r<n;++r)this.am(0,e[r],i,r,0,t-r);i.clamp()},t.prototype.multiplyUpperTo=function(e,t,i){--t;var n=i.t=this.t+e.t-t;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(t-this.t,0);n<e.t;++n)i[this.t+n-t]=this.am(t-n,e[n],i,0,0,this.t+n-t);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,i=this.s<0?e-1:0;if(this.t>0)if(0==t)i=this[0]%e;else for(var n=this.t-1;n>=0;--n)i=(t*i+this[n])%e;return i},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),r=n.getLowestSetBit();if(r<=0)return!1;var a=n.shiftRight(r);(e=e+1>>1)>w.length&&(e=w.length);for(var o=i(),s=0;s<e;++s){o.fromInt(w[Math.floor(Math.random()*w.length)]);var c=o.modPow(a,this);if(0!=c.compareTo(t.ONE)&&0!=c.compareTo(n)){for(var p=1;p++<r&&0!=c.compareTo(n);)if(0==(c=c.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=c.compareTo(n))return!1}}return!0},t.prototype.clone=function(){var e=i();return this.copyTo(e),e},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var i,n=this.DB-e*this.DB%8,r=0;if(e-- >0)for(n<this.DB&&(i=this[e]>>n)!=(this.s&this.DM)>>n&&(t[r++]=i|this.s<<this.DB-n);e>=0;)n<8?(i=(this[e]&(1<<n)-1)<<8-n,i|=this[--e]>>(n+=this.DB-8)):(i=this[e]>>(n-=8)&255,n<=0&&(n+=this.DB,--e)),0!=(128&i)&&(i|=-256),0==r&&(128&this.s)!=(128&i)&&++r,(r>0||i!=this.s)&&(t[r++]=i);return t},t.prototype.equals=function(e){return 0==this.compareTo(e)},t.prototype.min=function(e){return this.compareTo(e)<0?this:e},t.prototype.max=function(e){return this.compareTo(e)>0?this:e},t.prototype.and=function(e){var t=i();return this.bitwiseTo(e,f,t),t},t.prototype.or=function(e){var t=i();return this.bitwiseTo(e,d,t),t},t.prototype.xor=function(e){var t=i();return this.bitwiseTo(e,h,t),t},t.prototype.andNot=function(e){var t=i();return this.bitwiseTo(e,m,t),t},t.prototype.not=function(){for(var e=i(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},t.prototype.shiftLeft=function(e){var t=i();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},t.prototype.shiftRight=function(e){var t=i();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},t.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+v(this[e]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,i=0;i<this.t;++i)e+=g(this[i]^t);return e},t.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},t.prototype.setBit=function(e){return this.changeBit(e,d)},t.prototype.clearBit=function(e){return this.changeBit(e,m)},t.prototype.flipBit=function(e){return this.changeBit(e,h)},t.prototype.add=function(e){var t=i();return this.addTo(e,t),t},t.prototype.subtract=function(e){var t=i();return this.subTo(e,t),t},t.prototype.multiply=function(e){var t=i();return this.multiplyTo(e,t),t},t.prototype.divide=function(e){var t=i();return this.divRemTo(e,t,null),t},t.prototype.remainder=function(e){var t=i();return this.divRemTo(e,null,t),t},t.prototype.divideAndRemainder=function(e){var t=i(),n=i();return this.divRemTo(e,t,n),new Array(t,n)},t.prototype.modPow=function(e,t){var n,r,a=e.bitLength(),o=c(1);if(a<=0)return o;n=a<18?1:a<48?3:a<144?4:a<768?5:6,r=a<8?new u(t):t.isEven()?new x(t):new l(t);var s=new Array,f=3,d=n-1,h=(1<<n)-1;if(s[1]=r.convert(this),n>1){var m=i();for(r.sqrTo(s[1],m);f<=h;)s[f]=i(),r.mulTo(m,s[f-2],s[f]),f+=2}var v,g,b=e.t-1,y=!0,w=i();for(a=p(e[b])-1;b>=0;){for(a>=d?v=e[b]>>a-d&h:(v=(e[b]&(1<<a+1)-1)<<d-a,b>0&&(v|=e[b-1]>>this.DB+a-d)),f=n;0==(1&v);)v>>=1,--f;if((a-=f)<0&&(a+=this.DB,--b),y)s[v].copyTo(o),y=!1;else{for(;f>1;)r.sqrTo(o,w),r.sqrTo(w,o),f-=2;f>0?r.sqrTo(o,w):(g=o,o=w,w=g),r.mulTo(w,s[v],o)}for(;b>=0&&0==(e[b]&1<<a);)r.sqrTo(o,w),g=o,o=w,w=g,--a<0&&(a=this.DB-1,--b)}return r.revert(o)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var n=e.clone(),r=this.clone(),a=c(1),o=c(0),s=c(0),p=c(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),i?(a.isEven()&&o.isEven()||(a.addTo(this,a),o.subTo(e,o)),a.rShiftTo(1,a)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;r.isEven();)r.rShiftTo(1,r),i?(s.isEven()&&p.isEven()||(s.addTo(this,s),p.subTo(e,p)),s.rShiftTo(1,s)):p.isEven()||p.subTo(e,p),p.rShiftTo(1,p);n.compareTo(r)>=0?(n.subTo(r,n),i&&a.subTo(s,a),o.subTo(p,o)):(r.subTo(n,r),i&&s.subTo(a,s),p.subTo(o,p))}return 0!=r.compareTo(t.ONE)?t.ZERO:p.compareTo(e)>=0?p.subtract(e):p.signum()<0?(p.addTo(e,p),p.signum()<0?p.add(e):p):p},t.prototype.pow=function(e){return this.exp(e,new b)},t.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),i=e.s<0?e.negate():e.clone();if(t.compareTo(i)<0){var n=t;t=i,i=n}var r=t.getLowestSetBit(),a=i.getLowestSetBit();if(a<0)return t;for(r<a&&(a=r),a>0&&(t.rShiftTo(a,t),i.rShiftTo(a,i));t.signum()>0;)(r=t.getLowestSetBit())>0&&t.rShiftTo(r,t),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),t.compareTo(i)>=0?(t.subTo(i,t),t.rShiftTo(1,t)):(i.subTo(t,i),i.rShiftTo(1,i));return a>0&&i.lShiftTo(a,i),i},t.prototype.isProbablePrime=function(e){var t,i=this.abs();if(1==i.t&&i[0]<=w[w.length-1]){for(t=0;t<w.length;++t)if(i[0]==w[t])return!0;return!1}if(i.isEven())return!1;for(t=1;t<w.length;){for(var n=w[t],r=t+1;r<w.length&&n<E;)n*=w[r++];for(n=i.modInt(n);t<r;)if(n%w[t++]==0)return!1}return i.millerRabin(e)},t.prototype.square=function(){var e=i();return this.squareTo(e),e},t.prototype.Barrett=x,e.exports=t},8819:(e,t,i)=>{var n,r=i(6417),a=r.sign,o=r.verify,s=r.createSign,c=r.createVerify,p=r.createDecipheriv,u=r.createHash,l=r.createHmac,f=r.getCiphers(),d=i(476).Ber,h=i(2703).pbkdf,m=i(33),v=m.readUInt32BE,g=m.writeUInt32BE,b=i(1399),y=b.ALGORITHMS.SUPPORTED_CIPHER,x=b.CIPHER_INFO,w=b.SSH_TO_OPENSSL,E=b.EDDSA_SUPPORTED,_=Symbol("Hash Algorithm"),S=Symbol("Private key PEM"),k=Symbol("Public key PEM"),T=Symbol("Public key SSH"),A=Symbol("Decrypted Key"),O=Object.create(null);!function(){for(var e=Object.keys(x),t=0;t<e.length;++t){var i=w[e[t]];i&&!O[i]&&(O[i]=x[e[t]])}}();var C="function"==typeof String.prototype.trimStart?function(e){return e.trimStart()}:function(e){for(var t=0,i=0;i<e.length;++i){switch(e.charCodeAt(i)){case 32:case 9:case 13:case 10:case 12:++t;continue}break}return 0===t?e:e.slice(t)};function R(e,t){return"-----BEGIN "+e+" KEY-----\n"+(t=t.toString("base64")).replace(/.{64}/g,"$&\n")+(t.length%64?"\n":"")+"-----END "+e+" KEY-----"}function B(e,t){var i=Buffer.allocUnsafe(e.length+t.length);return e.copy(i,0),t.copy(i,e.length),i}function N(e,t){for(var i=e.length,n=e._pos||0,r=0;r<t;++r){var a=i-n;if(n>=i||a<4)return!1;var o=v(e,n);if(a<4+o)return!1;n+=4+o}return e._pos=n,!0}function U(e,t){var i=new d.Writer;return i.startSequence(),i.startSequence(),i.writeOID("1.2.840.113549.1.1.1"),i.writeNull(),i.endSequence(),i.startSequence(d.BitString),i.writeByte(0),i.startSequence(),i.writeBuffer(e,d.Integer),i.writeBuffer(t,d.Integer),i.endSequence(),i.endSequence(),i.endSequence(),R("PUBLIC",i.buffer)}function P(e,t){var i=Buffer.allocUnsafe(15+e.length+4+t.length);g(i,7,0),i.write("ssh-rsa",4,7,"ascii");var n=11;return g(i,t.length,n),t.copy(i,n+=4),g(i,e.length,n+=t.length),e.copy(i,n+4),i}var L=function(){function e(e,t,i,n,r,a,o,s){var c=new d.Writer;return c.startSequence(),c.writeInt(0,d.Integer),c.writeBuffer(e,d.Integer),c.writeBuffer(t,d.Integer),c.writeBuffer(i,d.Integer),c.writeBuffer(n,d.Integer),c.writeBuffer(r,d.Integer),c.writeBuffer(a,d.Integer),c.writeBuffer(o,d.Integer),c.writeBuffer(s,d.Integer),c.endSequence(),c.buffer}try{var t=["return function genOpenSSLRSAPriv(n, e, d, iqmp, p, q) {","  var bn_d = bigIntFromBuffer(d);","  var dmp1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(p) - 1n));","  var dmq1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(q) - 1n));","  return makePEM('RSA PRIVATE', genRSAASN1Buf(n, e, d, p, q, dmp1, dmq1, iqmp));","};"].join("\n");return new Function("bigIntFromBuffer, bigIntToBuffer, makePEM, genRSAASN1Buf",t)((function(e){return BigInt("0x"+e.toString("hex"))}),(function(e){var t=e.toString(16);if(0!=(1&t.length))t="0"+t;else{var i=t.charCodeAt(0);(56===i||i>=97&&i<=102)&&(t="00"+t)}return Buffer.from(t,"hex")}),R,e)}catch(t){return n=i(6053),function(t,i,r,a,o,s){var c=new n(o,256),p=new n(s,256),u=new n(r,256),l=u.mod(c.subtract(n.ONE)),f=u.mod(p.subtract(n.ONE));return R("RSA PRIVATE",e(t,i,r,o,s,Buffer.from(l.toByteArray()),Buffer.from(f.toByteArray()),a))}}var n}();function I(e,t,i,n){var r=new d.Writer;return r.startSequence(),r.startSequence(),r.writeOID("1.2.840.10040.4.1"),r.startSequence(),r.writeBuffer(e,d.Integer),r.writeBuffer(t,d.Integer),r.writeBuffer(i,d.Integer),r.endSequence(),r.endSequence(),r.startSequence(d.BitString),r.writeByte(0),r.writeBuffer(n,d.Integer),r.endSequence(),r.endSequence(),R("PUBLIC",r.buffer)}function D(e,t,i,n){var r=Buffer.allocUnsafe(15+e.length+4+t.length+4+i.length+4+n.length);g(r,7,0),r.write("ssh-dss",4,7,"ascii");var a=11;return g(r,e.length,a),e.copy(r,a+=4),g(r,t.length,a+=e.length),t.copy(r,a+=4),g(r,i.length,a+=t.length),i.copy(r,a+=4),g(r,n.length,a+=i.length),n.copy(r,a+4),r}function j(e,t,i,n,r){var a=new d.Writer;return a.startSequence(),a.writeInt(0,d.Integer),a.writeBuffer(e,d.Integer),a.writeBuffer(t,d.Integer),a.writeBuffer(i,d.Integer),a.writeBuffer(n,d.Integer),a.writeBuffer(r,d.Integer),a.endSequence(),R("DSA PRIVATE",a.buffer)}function H(e){var t=new d.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.112"),t.endSequence(),t.startSequence(d.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),R("PUBLIC",t.buffer)}function M(e){var t=Buffer.allocUnsafe(19+e.length);return g(t,11,0),t.write("ssh-ed25519",4,11,"ascii"),g(t,e.length,15),e.copy(t,19),t}function q(e,t){var i=new d.Writer;return i.startSequence(),i.startSequence(),i.writeOID("1.2.840.10045.2.1"),i.writeOID(e),i.endSequence(),i.startSequence(d.BitString),i.writeByte(0),i._ensure(t.length),t.copy(i._buf,i._offset,0,t.length),i._offset+=t.length,i.endSequence(),i.endSequence(),R("PUBLIC",i.buffer)}function F(e,t){var i;switch(e){case"1.2.840.10045.3.1.7":i="nistp256";break;case"1.3.132.0.34":i="nistp384";break;case"1.3.132.0.35":i="nistp521";break;default:return}var n=Buffer.allocUnsafe(39+t.length);return g(n,19,0),n.write("ecdsa-sha2-"+i,4,19,"ascii"),g(n,8,23),n.write(i,27,8,"ascii"),g(n,t.length,35),t.copy(n,39),n}function z(e,t,i){var n=new d.Writer;return n.startSequence(),n.writeInt(1,d.Integer),n.writeBuffer(i,d.OctetString),n.startSequence(160),n.writeOID(e),n.endSequence(),n.startSequence(161),n.startSequence(d.BitString),n.writeByte(0),n._ensure(t.length),t.copy(n._buf,n._offset,0,t.length),n._offset+=t.length,n.endSequence(),n.endSequence(),n.endSequence(),R("EC PRIVATE",n.buffer)}var K,G={sign:"function"==typeof a?function(e){var t=this[S];if(null===t)return new Error("No private key available");try{return a(this[_],e,t)}catch(e){return e}}:function(e){var t=this[S];if(null===t)return new Error("No private key available");var i=s(this[_]);return i.update(e),function(e,t){try{return e.sign(t)}catch(e){return e}}(i,t)},verify:"function"==typeof o?function(e,t){var i=this[k];if(null===i)return new Error("No public key available");try{return o(this[_],e,i,t)}catch(e){return e}}:function(e,t){var i=this[k];if(null===i)return new Error("No public key available");var n=c(this[_]);return n.update(e),function(e,t,i){try{return e.verify(t,i)}catch(e){return e}}(n,i,t)},getPrivatePEM:function(){return this[S]},getPublicPEM:function(){return this[k]},getPublicSSH:function(){return this[T]}};function $(e,t,i,n,r,a,o){this.type=e,this.comment=t,this[S]=i,this[k]=n,this[T]=r,this[_]=a,this[A]=o}function W(e,t,i,n,r,a,o){this.type=e,this.comment=t,this[S]=i,this[k]=n,this[T]=r,this[_]=a,this[A]=o}function X(e,t,i,n,r,a,o){this.type=e,this.comment=t,this[S]=i,this[k]=n,this[T]=r,this[_]=a,this[A]=o}function V(e,t,r,a){var o;n||(n=i(8013));var s=null,c=null;switch(t){case"ssh-rsa":var p=n.readString(e,e._pos);if(!1===p)return new Error("Malformed OpenSSH public key");var u=n.readString(e,e._pos);if(!1===u)return new Error("Malformed OpenSSH public key");s=U(u,p),c=P(u,p),o="sha1";break;case"ssh-dss":var l=n.readString(e,e._pos);if(!1===l)return new Error("Malformed OpenSSH public key");var f=n.readString(e,e._pos);if(!1===f)return new Error("Malformed OpenSSH public key");var d=n.readString(e,e._pos);if(!1===d)return new Error("Malformed OpenSSH public key");var h=n.readString(e,e._pos);if(!1===h)return new Error("Malformed OpenSSH public key");s=I(l,f,d,h),c=D(l,f,d,h),o="sha1";break;case"ssh-ed25519":var m=n.readString(e,e._pos);if(!1===m||32!==m.length)return new Error("Malformed OpenSSH public key");s=H(m),c=M(m),o=null;break;case"ecdsa-sha2-nistp256":o="sha256",oid="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===o&&(o="sha384",oid="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===o&&(o="sha512",oid="1.3.132.0.35"),!N(e,1))return new Error("Malformed OpenSSH public key");var v=n.readString(e,e._pos);if(!1===v)return new Error("Malformed OpenSSH public key");s=q(oid,v),c=F(oid,v);break;default:return new Error("Unsupported OpenSSH public key type: "+t)}return new Y(a,r,s,c,o)}function Y(e,t,i,n,r){this.type=e,this.comment=t,this[S]=null,this[k]=i,this[T]=n,this[_]=r,this[A]=!1}function Q(e,t,i,n,r){this.type=e,this.comment=t,this[S]=null,this[k]=i,this[T]=n,this[_]=r,this[A]=!1}$.prototype=G,K=/^-----BEGIN OPENSSH PRIVATE KEY-----(?:\r\n|\n)([\s\S]+)(?:\r\n|\n)-----END OPENSSH PRIVATE KEY-----$/,$.parse=function(e,t){var r,a=K.exec(e);if(null===a)return null;var o=Buffer.from(a[1],"base64");if(o.length<31)return new Error("Malformed OpenSSH private key");var s=o.toString("ascii",0,15);if("openssh-key-v1\0"!==s)return new Error("Unsupported OpenSSH key magic: "+s);n||(n=i(8013));var c=n.readString(o,15,"ascii");if(!1===c)return new Error("Malformed OpenSSH private key");if("none"!==c&&-1===y.indexOf(c))return new Error("Unsupported cipher for OpenSSH key: "+c);var u,l,f,m=n.readString(o,o._pos,"ascii");if(!1===m)return new Error("Malformed OpenSSH private key");if("none"!==m){if("none"===c)return new Error("Malformed OpenSSH private key");if("bcrypt"!==m)return new Error("Unsupported kdf name for OpenSSH key: "+m);if(!t)return new Error("Encrypted private OpenSSH key detected, but no passphrase given")}else if("none"!==c)return new Error("Malformed OpenSSH private key");"none"!==c&&(u=x[c]);var g=n.readString(o,o._pos);if(!1===g)return new Error("Malformed OpenSSH private key");if(g.length)switch(m){case"none":return new Error("Malformed OpenSSH private key");case"bcrypt":var b=n.readString(g,0);if(!1===b||g._pos+4>g.length)return new Error("Malformed OpenSSH private key");var _=v(g,g._pos),S=Buffer.allocUnsafe(u.keyLen+u.ivLen);if(0!==h(t,t.length,b,b.length,S,S.length,_))return new Error("Failed to generate information to decrypt key");l=S.slice(0,u.keyLen),f=S.slice(u.keyLen)}else if("none"!==m)return new Error("Malformed OpenSSH private key");var k=n.readInt(o,o._pos);if(!1===k)return new Error("Malformed OpenSSH private key");if(o._pos+=4,k>0){for(var T=0;T<k;++T){var A=n.readString(o,o._pos);if(!1===A)return new Error("Malformed OpenSSH private key");if(!1===n.readString(A,0,"ascii"))return new Error("Malformed OpenSSH private key")}var O=n.readString(o,o._pos);if(!1===O)return new Error("Malformed OpenSSH private key");if(void 0!==l){if(O.length<u.blockLen||O.length%u.blockLen!=0)return new Error("Malformed OpenSSH private key");try{var C={authTagLength:u.authLen},G=p(w[c],l,f,C);if(u.authLen>0){if(o.length-o._pos<u.authLen)return new Error("Malformed OpenSSH private key");G.setAuthTag(o.slice(o._pos,o._pos+=u.authLen))}O=B(G.update(O),G.final())}catch(e){return e}}if(o._pos!==o.length)return new Error("Malformed OpenSSH private key");r=function(e,t,i){var r,a,o,s,c=[];if(e.length<8)return new Error("Malformed OpenSSH private key");if(v(e,0)!==v(e,4))return i?new Error("OpenSSH key integrity check failed -- bad passphrase?"):new Error("OpenSSH key integrity check failed");for(e._pos=8,r=0;r<t;++r){var p=void 0,u=void 0,l=void 0,f=void 0,h=n.readString(e,e._pos,"ascii");if(!1===h)return new Error("Malformed OpenSSH private key");switch(h){case"ssh-rsa":var m=n.readString(e,e._pos);if(!1===m)return new Error("Malformed OpenSSH private key");var g=n.readString(e,e._pos);if(!1===g)return new Error("Malformed OpenSSH private key");var b=n.readString(e,e._pos);if(!1===b)return new Error("Malformed OpenSSH private key");var y=n.readString(e,e._pos);if(!1===y)return new Error("Malformed OpenSSH private key");if(!1===(x=n.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(w=n.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");l=U(m,g),f=P(m,g),u=L(m,g,b,y,x,w),p="sha1";break;case"ssh-dss":var x,w;if(!1===(x=n.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(w=n.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");var _=n.readString(e,e._pos);if(!1===_)return new Error("Malformed OpenSSH private key");var S=n.readString(e,e._pos);if(!1===S)return new Error("Malformed OpenSSH private key");var k=n.readString(e,e._pos);if(!1===k)return new Error("Malformed OpenSSH private key");l=I(x,w,_,S),f=D(x,w,_,S),u=j(x,w,_,S,k),p="sha1";break;case"ssh-ed25519":if(!E)return new Error("Unsupported OpenSSH private key type: "+h);var T=n.readString(e,e._pos);if(!1===T||32!==T.length)return new Error("Malformed OpenSSH private key");var A=n.readString(e,e._pos);if(!1===A||64!==A.length)return new Error("Malformed OpenSSH private key");l=H(T),f=M(T),o=A.slice(0,32),s=void 0,(s=new d.Writer).startSequence(),s.writeInt(0,d.Integer),s.startSequence(),s.writeOID("1.3.101.112"),s.endSequence(),s.startSequence(d.OctetString),s.writeBuffer(o,d.OctetString),s.endSequence(),s.endSequence(),u=R("PRIVATE",s.buffer),p=null;break;case"ecdsa-sha2-nistp256":p="sha256",a="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===p&&(p="sha384",a="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===p&&(p="sha512",a="1.3.132.0.35"),!N(e,1))return new Error("Malformed OpenSSH private key");var O=n.readString(e,e._pos);if(!1===O)return new Error("Malformed OpenSSH private key");var C=n.readString(e,e._pos);if(!1===C)return new Error("Malformed OpenSSH private key");l=q(a,O),f=F(a,O),u=z(a,O,C);break;default:return new Error("Unsupported OpenSSH private key type: "+h)}var B=n.readString(e,e._pos,"utf8");if(!1===B)return new Error("Malformed OpenSSH private key");c.push(new $(h,B,u,l,f,p,i))}var K=0;for(r=e._pos;r<e.length;++r)if(e[r]!==++K%255)return new Error("Malformed OpenSSH private key");return c}(O,k,void 0!==l)}else r=[];return r},W.prototype=G,function(){var e=/^-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----(?:\r\n|\n)((?:[^:]+:\s*[\S].*(?:\r\n|\n))*)([\s\S]+)(?:\r\n|\n)-----END (RSA|DSA|EC) PRIVATE KEY-----$/;W.parse=function(t,i){var n=e.exec(t);if(null===n)return null;var a,o,s,c,l,h,m=Buffer.from(n[3],"base64"),v=n[2],g=!1;if(void 0!==v){v=v.split(/\r\n|\n/g);for(var b=0;b<v.length;++b){var y=v[b],x=y.indexOf(":");if("DEK-Info"===y.slice(0,x)){var w=y.slice(x+2);if(-1===(x=w.indexOf(",")))continue;var E=w.slice(0,x).toLowerCase();if(-1===f.indexOf(E))return new Error("Cipher ("+E+") not supported for encrypted OpenSSH private key");var _=O[E];if(!_)return new Error("Cipher ("+E+") not supported for encrypted OpenSSH private key");var S=Buffer.from(w.slice(x+1),"hex");if(S.length!==_.ivLen)return new Error("Malformed encrypted OpenSSH private key");if(!i)return new Error("Encrypted OpenSSH private key detected, but no passphrase given");for(var k=u("md5").update(i).update(S.slice(0,8)).digest();k.length<_.keyLen;)k=B(k,u("md5").update(k).update(i).update(S).digest().slice(0,8));k.length>_.keyLen&&(k=k.slice(0,_.keyLen));try{var T=p(E,k,S);T.setAutoPadding(!1),m=B(T.update(m),T.final()),g=!0}catch(e){return e}}}}var A,C,N,L="Malformed OpenSSH private key";switch(g&&(L+=". Bad passphrase?"),n[1]){case"RSA":a="ssh-rsa",o=R("RSA PRIVATE",m);try{(h=new d.Reader(m)).readSequence(),h.readInt();var j=h.readString(d.Integer,!0);if(null===j)return new Error(L);var H=h.readString(d.Integer,!0);if(null===H)return new Error(L);s=U(j,H),c=P(j,H)}catch(e){return new Error(L)}l="sha1";break;case"DSA":a="ssh-dss",o=R("DSA PRIVATE",m);try{(h=new d.Reader(m)).readSequence(),h.readInt();var M=h.readString(d.Integer,!0);if(null===M)return new Error(L);var z=h.readString(d.Integer,!0);if(null===z)return new Error(L);var K=h.readString(d.Integer,!0);if(null===K)return new Error(L);var G=h.readString(d.Integer,!0);if(null===G)return new Error(L);s=I(M,z,K,G),c=D(M,z,K,G)}catch(e){return new Error(L)}l="sha1";break;case"EC":var $,X;try{(h=new d.Reader(m)).readSequence(),h.readInt(),X=h.readString(d.OctetString,!0),h.readByte();var V=h.readLength();if(null===V)return new Error(L);h._offset=V;var Y=h.readOID();if(null===Y)return new Error(L);switch(Y){case"1.2.840.10045.3.1.7":$="prime256v1",a="ecdsa-sha2-nistp256",l="sha256";break;case"1.3.132.0.34":$="secp384r1",a="ecdsa-sha2-nistp384",l="sha384";break;case"1.3.132.0.35":$="secp521r1",a="ecdsa-sha2-nistp521",l="sha512";break;default:return new Error("Unsupported private key EC OID: "+Y)}}catch(e){return new Error(L)}o=R("EC PRIVATE",m);var Q=(A=$,C=X,(N=r.createECDH(A)).setPrivateKey(C),N.getPublicKey());s=q(Y,Q),c=F(Y,Q)}return new W(a,"",o,s,c,l,g)}}(),X.prototype=G,function(){var e=Buffer.alloc(0),t=Buffer.from([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),r=Buffer.from([0,0,0,0]),a=Buffer.from([0,0,0,1]),o=/^PuTTY-User-Key-File-2: (ssh-(?:rsa|dss))\r?\nEncryption: (aes256-cbc|none)\r?\nComment: ([^\r\n]*)\r?\nPublic-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-MAC: ([^\r\n]+)/;X.parse=function(s,c){var f=o.exec(s);if(null===f)return null;var d=f[2],h="none"!==d;if(h&&!c)return new Error("Encrypted PPK private key detected, but no passphrase given");var m=Buffer.from(f[5],"base64");if(h){var v=x[d],b=B(u("sha1").update(r).update(c).digest(),u("sha1").update(a).update(c).digest());b.length>v.keyLen&&(b=b.slice(0,v.keyLen));try{var y=p(w[d],b,t);y.setAutoPadding(!1),m=B(y.update(m),y.final()),decrypted=!0}catch(e){return e}}var E,_,S,k=f[1],T=f[3],A=Buffer.from(f[4],"base64"),O=f[6],C=k.length,R=d.length,H=Buffer.byteLength(T),M=A.length,q=m.length,F=Buffer.allocUnsafe(4+C+4+R+4+H+4+M+4+q);if(g(F,C,W=0),F.write(k,W+=4,C,"ascii"),g(F,R,W+=C),F.write(d,W+=4,R,"ascii"),g(F,H,W+=R),F.write(T,W+=4,H,"utf8"),g(F,M,W+=H),A.copy(F,W+=4),g(F,q,W+=M),m.copy(F,W+4),c||(c=e),l("sha1",u("sha1").update("putty-private-key-file-mac-key").update(c).digest()).update(F).digest("hex")!==O)return h?new Error("PPK private key integrity check failed -- bad passphrase?"):new Error("PPK private key integrity check failed");switch(n||(n=i(8013)),A._pos=0,N(A,1),k){case"ssh-rsa":var z=n.readString(A,A._pos);if(!1===z)return new Error("Malformed PPK public key");var K=n.readString(A,A._pos);if(!1===K)return new Error("Malformed PPK public key");var G=n.readString(m,0);if(!1===G)return new Error("Malformed PPK private key");if(!1===(W=n.readString(m,m._pos)))return new Error("Malformed PPK private key");if(!1===(V=n.readString(m,m._pos)))return new Error("Malformed PPK private key");var $=n.readString(m,m._pos);if(!1===$)return new Error("Malformed PPK private key");E=U(K,z),_=P(K,z),S=L(K,z,G,$,W,V);break;case"ssh-dss":var W,V;if(!1===(W=n.readString(A,A._pos)))return new Error("Malformed PPK public key");if(!1===(V=n.readString(A,A._pos)))return new Error("Malformed PPK public key");var Y=n.readString(A,A._pos);if(!1===Y)return new Error("Malformed PPK public key");var Q=n.readString(A,A._pos);if(!1===Q)return new Error("Malformed PPK public key");var Z=n.readString(m,0);if(!1===Z)return new Error("Malformed PPK private key");E=I(W,V,Y,Q),_=D(W,V,Y,Q),S=j(W,V,Y,Q,Z)}return new X(k,T,S,E,_,"sha1",h)}}(),Y.prototype=G,function(){var e;e=E?/^(((?:ssh-(?:rsa|dss|ed25519))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/:/^(((?:ssh-(?:rsa|dss))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/,Y.parse=function(t){var r=e.exec(t);if(null===r)return null;n||(n=i(8013));var a=r[1],o=r[2],s=Buffer.from(r[3],"base64"),c=r[4]||"",p=n.readString(s,s._pos,"ascii");return!1===p||0!==p.indexOf(o)?new Error("Malformed OpenSSH public key"):V(s,o,c,a)}}(),Q.prototype=G,function(){var e=/^---- BEGIN SSH2 PUBLIC KEY ----(?:\r\n|\n)((?:(?:[\x21-\x7E]+?):(?:(?:.*?\\\r?\n)*.*)(?:\r\n|\n))*)((?:[A-Z0-9a-z\/+=]+(?:\r\n|\n))+)---- END SSH2 PUBLIC KEY ----$/,t=/^([\x21-\x7E]+?):((?:.*?\\\r?\n)*.*)$/gm,r=/\\\r?\n/g;Q.parse=function(a){var o=e.exec(a);if(null===o)return null;var s=o[1],c=Buffer.from(o[2],"base64"),p="";if(void 0!==s)for(;o=t.exec(s);)"comment"===o[1].toLowerCase()&&(p=C(o[2].replace(r,""))).length>1&&34===p.charCodeAt(0)&&34===p.charCodeAt(p.length-1)&&(p=p.slice(1,-1));n||(n=i(8013));var u=n.readString(c,0,"ascii");if(!1===u)return new Error("Malformed RFC4716 public key");var l=null,f=null;switch(u){case"ssh-rsa":var d=n.readString(c,c._pos);if(!1===d)return new Error("Malformed RFC4716 public key");var h=n.readString(c,c._pos);if(!1===h)return new Error("Malformed RFC4716 public key");l=U(h,d),f=P(h,d);break;case"ssh-dss":var m=n.readString(c,c._pos);if(!1===m)return new Error("Malformed RFC4716 public key");var v=n.readString(c,c._pos);if(!1===v)return new Error("Malformed RFC4716 public key");var g=n.readString(c,c._pos);if(!1===g)return new Error("Malformed RFC4716 public key");var b=n.readString(c,c._pos);if(!1===b)return new Error("Malformed RFC4716 public key");l=I(m,v,g,b),f=D(m,v,g,b);break;default:return new Error("Malformed RFC4716 public key")}return new Q(u,p,l,f,"sha1")}}(),e.exports={parseDERKey:function(e,t){return V(e,t,"",t)},parseKey:function(e,t){if(Buffer.isBuffer(e))e=e.toString("utf8").trim();else{if("string"!=typeof e)return new Error("Key data must be a Buffer or string");e=e.trim()}if(null!=t)if("string"==typeof t)t=Buffer.from(t);else if(!Buffer.isBuffer(t))return new Error("Passphrase must be a string or Buffer when supplied");var i;return null!==(i=$.parse(e,t))||null!==(i=W.parse(e,t))||null!==(i=X.parse(e,t))||null!==(i=Y.parse(e))||null!==(i=Q.parse(e))?i:new Error("Unsupported key format")}}},9821:(e,t,i)=>{"use strict";var n=i(1669).inspect;function r(e,t){if(!e)throw new ERR_INTERNAL_ASSERTION(t)}function a(e){for(var t="",i=e.length,n="-"===e[0]?1:0;i>=n+4;i-=3)t=`_${e.slice(i-3,i)}${t}`;return`${e.slice(0,i)}${t}`}function o(e,t){if(r("string"==typeof t,"`thing` has to be of type string"),Array.isArray(e)){var i=e.length;return r(i>0,"At least one expected value needs to be specified"),e=e.map((e=>String(e))),i>2?`one of ${t} ${e.slice(0,i-1).join(", ")}, or `+e[i-1]:2===i?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}r.fail=function(e){throw new ERR_INTERNAL_ASSERTION(e)},t.ERR_INTERNAL_ASSERTION=class e extends Error{constructor(t){super(),Error.captureStackTrace(this,e);var i="This is caused by either a bug in ssh2-streams or incorrect usage of ssh2-streams internals.\nPlease open an issue with this stack trace at https://github.com/mscdex/ssh2-streams/issues\n";this.message=void 0===t?i:`${t}\n${i}`}};var s=Math.pow(2,32),c=function(){try{return new Function("return 2n ** 32n")()}catch(e){}}();function p(e,t){emitErrorNT(e,t),u(e)}function u(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}t.ERR_OUT_OF_RANGE=class e extends RangeError{constructor(t,i,o,p){super(),Error.captureStackTrace(this,e),r(i,'Missing "range" argument');var u,l=p?t:`The value of "${t}" is out of range.`;Number.isInteger(o)&&Math.abs(o)>s?u=a(String(o)):"bigint"==typeof o?(u=String(o),(o>c||o<-c)&&(u=a(u)),u+="n"):u=n(o),l+=` It must be ${i}. Received ${u}`,this.message=l}},t.ERR_INVALID_ARG_TYPE=class e extends TypeError{constructor(t,i,n){var a,s;if(super(),Error.captureStackTrace(this,e),r("string"==typeof t,"'name' must be a string"),"string"==typeof i&&i.startsWith("not ")?(a="must not be",i=i.replace(/^not /,"")):a="must be",t.endsWith(" argument"))s=`The ${t} ${a} ${o(i,"type")}`;else{var c=t.includes(".")?"property":"argument";s=`The "${t}" ${c} ${a} ${o(i,"type")}`}s+=". Received type "+typeof n,this.message=s}},t.validateNumber=function(e,t){if("number"!=typeof e)throw new ERR_INVALID_ARG_TYPE(t,"number",e)},t.destroyImpl=function(e,t){const i=this._readableState&&this._readableState.destroyed,n=this._writableState&&this._writableState.destroyed;return i||n?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(emitErrorNT,this,e)):process.nextTick(emitErrorNT,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(e=>{!t&&e?this._writableState?this._writableState.errorEmitted?process.nextTick(u,this):(this._writableState.errorEmitted=!0,process.nextTick(p,this,e)):process.nextTick(p,this,e):t?(process.nextTick(u,this),t(e)):process.nextTick(u,this)})),this)}},829:(e,t,i)=>{var n=i(2413).Transform,r=i(2413).Readable,a=i(2413).Writable,o=i(5747).constants||process.binding("constants"),s=i(1669),c=s.inherits,p=s.isDate,u=i(8614).EventEmitter.listenerCount,l=i(5747),f=i(8013).readString,d=i(8013).readInt,h=i(33).readUInt32BE,m=i(33).writeUInt32BE,v={OK:0,EOF:1,NO_SUCH_FILE:2,PERMISSION_DENIED:3,FAILURE:4,BAD_MESSAGE:5,NO_CONNECTION:6,CONNECTION_LOST:7,OP_UNSUPPORTED:8};Object.keys(v).forEach((function(e){v[v[e]]=e}));var g={0:"No error",1:"End of file",2:"No such file or directory",3:"Permission denied",4:"Failure",5:"Bad message",6:"No connection",7:"Connection lost",8:"Operation unsupported"};T.STATUS_CODE=v;var b={INIT:1,OPEN:3,CLOSE:4,READ:5,WRITE:6,LSTAT:7,FSTAT:8,SETSTAT:9,FSETSTAT:10,OPENDIR:11,READDIR:12,REMOVE:13,MKDIR:14,RMDIR:15,REALPATH:16,STAT:17,RENAME:18,READLINK:19,SYMLINK:20,EXTENDED:200};Object.keys(b).forEach((function(e){b[b[e]]=e}));var y={VERSION:2,STATUS:101,HANDLE:102,DATA:103,NAME:104,ATTRS:105,EXTENDED:201};Object.keys(y).forEach((function(e){y[y[e]]=e}));var x={READ:1,WRITE:2,APPEND:4,CREAT:8,TRUNC:16,EXCL:32};T.OPEN_MODE=x;var w=Math.pow(2,32)-1,E=Buffer.from([0,0,0,5,b.INIT,0,0,0,3]),_=Buffer.from([0,0,0,5,y.VERSION,0,0,0,3]),S=/^SSH-2.0-(?:OpenSSH|dropbear)/;function k(e){}function T(e,t){"string"!=typeof e||t||(t=e,e=void 0),"object"==typeof e&&e||(e={}),n.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this.debug="function"==typeof e.debug?e.debug:k,this.server=!!e.server,this._isOpenSSH=t&&S.test(t),this._needContinue=!1,this._state={status:"packet_header",writeReqid:-1,pktLeft:void 0,pktHdrBuf:Buffer.allocUnsafe(9),pktBuf:void 0,pktType:void 0,version:void 0,extensions:{},maxDataLen:this._isOpenSSH?260096:32768,requests:{}};var i=this;function r(){i.writable=!1,i._cleanup(!1)}this.on("end",(function(){i.readable=!1})).on("finish",r).on("prefinish",r),this.server||this.push(E)}function A(e,t,i,n,r,a){var o,s,c,p,u=64,f=32768;"function"==typeof r?a=r:"object"==typeof r&&null!==r&&("number"==typeof r.concurrency&&r.concurrency>0&&!isNaN(r.concurrency)&&(u=r.concurrency),"number"==typeof r.chunkSize&&r.chunkSize>0&&!isNaN(r.chunkSize)&&(f=r.chunkSize),"number"==typeof r.fileSize&&r.fileSize>0&&!isNaN(r.fileSize)&&(c=r.fileSize),"function"==typeof r.step&&(o=r.step),"string"!=typeof r.mode&&"number"!=typeof r.mode||(s=U(r.mode)));var d,h,m,v=0,g=0,b=!1,y=f*u;function x(i){if(!b){b=!0;var n,r=0;d||h?(n=function(){0==--r&&a(i)},d&&(e===l||e.writable)&&++r,h&&(t===l||t.writable)&&++r,d&&(e===l||e.writable)&&e.close(d,n),h&&(t===l||t.writable)&&t.close(h,n)):a(i)}}e.open(i,"r",(function(r,b){if(r)return x(r);function w(r,c){if(r)return e!==l?void e.stat(i,(function(e,t){if(e)return x(r);w(null,t)})):x(r);p=c.size,t.open(n,"w",(function(i,r){if(i)return x(i);if(h=r,p<=0)return x();for(;y>p;){if(1===u){y=p;break}y-=f,--u}if((m=function(e){try{return Buffer.allocUnsafe(e)}catch(e){return e}}(y))instanceof Error)return x(m);function c(i,n,r,s,c,u){if(i)return x(i);function b(i){if(i)return x(i);if(g+=n,o&&o(g,n,p),n<u)return w(c,s+n,u-n);if(g!==p){if(!(v>=p)){var r=v+f>p?p-v:f;w(c,v,r),v+=r}}else t.close(h,(function(t){if(h=void 0,t)return x(t);e.close(d,(function(e){if(d=void 0,e)return x(e);a()}))}))}c=c||0,e===l?t.writeData(h,m,c,n,s,b):t.write(h,m,c,n,s,b)}function b(e,t,i){return function(n,r,a){c(n,r,0,t,e,i)}}function w(t,i,n){e===l?e.read(d,m,t,n,i,b(t,i,n)):e.readData(d,m,t,n,i,b(t,i,n))}function E(){for(var e=0,t=0;v<p&&e<u;){var i=v+f>p?p-v:f;w(t,v,i),t+=i,v+=i,++e}}void 0!==s?t.fchmod(h,s,(function e(i){i?t.chmod(n,s,(function(t){e()})):E()})):E()}))}d=b,void 0===c?e.fstat(d,w):w(null,{size:c})}))}function O(e,t,i,n,r,a,o){var s="function"==typeof o?o:void 0;e.writeData(t,i,n,r,a,(function(o,c){if(o)return e.close(t,(function(){s&&s(o)}));c===r?e.close(t,s):O(e,t,i,n+=c,r-=c,a+=c,s)}))}function C(e,t,i,n){var r=h(e,t),a=new D;if(t+=4,1&r){var o=R(e,t,i,n);if(!1===o)return!1;a.size=o,t+=8}if(2&r){var s,c;if(!1===(s=d(e,t,this,n)))return!1;if(a.uid=s,!1===(c=d(e,t+=4,this,n)))return!1;a.gid=c,t+=4}if(4&r){var p=d(e,t,this,n);if(!1===p)return!1;a.mode=p,a.permissions=p,t+=4}if(8&r){var u,l;if(!1===(u=d(e,t,this,n)))return!1;if(a.atime=u,!1===(l=d(e,t+=4,this,n)))return!1;a.mtime=l,t+=4}if(2147483648&r){var f=d(e,t,this,n);if(!1===f)return!1;t+=4;for(var m,v=0;v<f;++v){if(!1===(m=d(e,t,this,n)))return!1;t+=4+m}}return e._pos=t,a}function R(e,t,i,n){if(e.length-t<8)return i&&i._cleanup(n),!1;for(var r=0,a=t+8;t<a;++t)r*=256,r+=e[t];return e._pos=t,r}function B(e){var t=0,i=0,n=[],r=0;if("object"!=typeof e||null===e)return{flags:t,nbytes:i,bytes:n};if("number"==typeof e.size){t|=1,i+=8;var a=new Array(8),o=e.size;for(r=7;r>=0;--r)a[r]=255&o,o/=256;n.push(a)}if("number"==typeof e.uid&&"number"==typeof e.gid&&(t|=2,i+=8,n.push([e.uid>>24&255,e.uid>>16&255,e.uid>>8&255,255&e.uid]),n.push([e.gid>>24&255,e.gid>>16&255,e.gid>>8&255,255&e.gid])),"number"==typeof e.permissions||"string"==typeof e.permissions||"number"==typeof e.mode||"string"==typeof e.mode){var s=U(e.mode||e.permissions);t|=4,i+=4,n.push([s>>24&255,s>>16&255,s>>8&255,255&s])}if(("number"==typeof e.atime||p(e.atime))&&("number"==typeof e.mtime||p(e.mtime))){var c=N(e.atime),u=N(e.mtime);t|=8,i+=8,n.push([c>>24&255,c>>16&255,c>>8&255,255&c]),n.push([u>>24&255,u>>16&255,u>>8&255,255&u])}return{flags:t,nbytes:i,bytes:n}}function N(e){if("number"==typeof e&&!isNaN(e))return e;if(p(e))return parseInt(e.getTime()/1e3,10);throw new Error("Cannot parse time: "+e)}function U(e){if("number"==typeof e&&!isNaN(e))return e;if("string"==typeof e)return U(parseInt(e,8));throw new Error("Cannot parse mode: "+e)}c(T,n),T.prototype.__read=n.prototype._read,T.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},T.prototype.__push=n.prototype.push,T.prototype.push=function(e,t){if(!this.readable)return!1;null===e&&(this.readable=!1);var i=this.__push(e,t);return this._needContinue=!1===i,i},T.prototype._cleanup=function(e){var t=this._state;t.pktBuf=void 0;var i=t.requests,n=Object.keys(i),r=n.length;if(r){if(this.readable)for(var a,o=new Error("SFTP session ended early"),s=0;s<r;++s)(a=i[n[s]].cb)&&a(o);t.requests={}}this.readable&&this.push(null),this._readableState.endEmitted||this._readableState.flowing||this.resume(),!1!==e&&(this.debug("DEBUG[SFTP]: Parser: Malformed packet"),e&&e(new Error("Malformed packet")))},T.prototype._transform=function(e,t,i){for(var n,r,a,o=this._state,s=this.server,c=o.status,p=o.pktType,l=o.pktBuf,x=o.pktLeft,w=o.version,E=o.pktHdrBuf,S=o.requests,k=this.debug,T=e.length,A=0;;){if("discard"===c){if(!(x<=(r=T-A))){x-=r;break}A+=x,x=0,c="packet_header",n=l=void 0}else{if(void 0!==l){if(x<=(r=T-A)){e.copy(l,l.length-x,A,A+x),A+=x,x=0,n=l,l=void 0;continue}e.copy(l,l.length-x,A),x-=r;break}if("packet_header"===c)if(n){if(x=h(n,4)-1,p=n[8],s){if(void 0===w&&p!==b.INIT)return k("DEBUG[SFTP]: Parser: Unexpected packet before init"),this._cleanup(!1),i(new Error("Unexpected packet before init"));if(void 0!==w&&p===b.INIT)k("DEBUG[SFTP]: Parser: Unexpected duplicate init"),c="bad_pkt";else{if(x>34e3)return k("DEBUG[SFTP]: Parser: "+(W="Packet length ("+x+") exceeds max length (34000)")),this._cleanup(!1),i(new Error(W));p===b.EXTENDED?c="bad_pkt":void 0===b[p]&&(k("DEBUG[SFTP]: Parser: Unsupported packet type: "+p),c="discard")}}else{if(void 0===w&&p!==y.VERSION)return k("DEBUG[SFTP]: Parser: Unexpected packet before version"),this._cleanup(!1),i(new Error("Unexpected packet before version"));void 0!==w&&p===y.VERSION?(k("DEBUG[SFTP]: Parser: Unexpected duplicate version"),c="bad_pkt"):void 0===y[p]&&(c="discard")}"bad_pkt"===c?(m(E,x+1,0),E[4]=p,x=4,l=E):(l=Buffer.allocUnsafe(x),c="payload")}else x=5,l=E;else if("payload"===c){if(p===y.VERSION||p===b.INIT){if(!1===(w=o.version=d(n,0,this,i)))return;if(w<3)return this._cleanup(!1),i(new Error("Incompatible SFTP version: "+w));s&&this.push(_);var O,B,N=n.length;for(n._pos=4;n._pos<N;){if(!1===(O=f(n,n._pos,"ascii",this,i)))return;if(!1===(B=f(n,n._pos,"ascii",this,i)))return;o.extensions[O]?o.extensions[O].push(B):o.extensions[O]=[B]}this.emit("ready")}else{if(!1===(a=d(n,0,this,i)))return;var U,P,L,I;if(s){var D,j,H=b[p];if(k("DEBUG[SFTP]: Parser: Request: "+H),u(this,H)){if(p===b.OPEN){if(!1===(U=f(n,4,"utf8",this,i)))return;var M=d(n,n._pos,this,i);if(!1===M)return;if(!1===(P=C(n,n._pos+4,this,i)))return;this.emit(H,a,U,M,P)}else if(p===b.CLOSE||p===b.FSTAT||p===b.READDIR){if(!1===(L=f(n,4,this,i)))return;this.emit(H,a,L)}else if(p===b.READ){if(!1===(L=f(n,4,this,i)))return;if(!1===(D=R(n,n._pos,this,i)))return;var q=d(n,n._pos,this,i);if(!1===q)return;this.emit(H,a,L,D,q)}else if(p===b.WRITE){if(!1===(L=f(n,4,this,i)))return;if(!1===(D=R(n,n._pos,this,i)))return;if(!1===(I=f(n,n._pos,this,i)))return;this.emit(H,a,L,D,I)}else if(p===b.LSTAT||p===b.STAT||p===b.OPENDIR||p===b.REMOVE||p===b.RMDIR||p===b.REALPATH||p===b.READLINK){if(!1===(j=f(n,4,"utf8",this,i)))return;this.emit(H,a,j)}else if(p===b.SETSTAT||p===b.MKDIR){if(!1===(j=f(n,4,"utf8",this,i)))return;if(!1===(P=C(n,n._pos,this,i)))return;this.emit(H,a,j,P)}else if(p===b.FSETSTAT){if(!1===(L=f(n,4,this,i)))return;if(!1===(P=C(n,n._pos,this,i)))return;this.emit(H,a,L,P)}else if(p===b.RENAME||p===b.SYMLINK){var F,z;if(!1===(F=f(n,4,"utf8",this,i)))return;if(!1===(z=f(n,n._pos,"utf8",this,i)))return;p===b.SYMLINK&&this._isOpenSSH?this.emit(H,a,z,F):this.emit(H,a,F,z)}}else this.status(a,v.OP_UNSUPPORTED)}else{var K=S[a],G=K&&K.cb;if(k("DEBUG[SFTP]: Parser: Response: "+y[p]),K&&G)if(p===y.STATUS){var $=d(n,4,this,i);if(!1===$)return;if($===v.OK)G();else{var W,X="";if(n.length>=12){if(!1===(W=f(n,8,"utf8",this,i)))return;if(n._pos+4<n.length&&!1===(X=f(n,n._pos,"ascii",this,i)))return}var V=new Error(W||g[$]||"Unknown status");V.code=$,V.lang=X,G(V)}}else if(p===y.HANDLE){if(!1===(L=f(n,4,this,i)))return;G(void 0,L)}else if(p===y.DATA)if(K.buffer){var Y=d(n,4,this,i);if(!1===Y)return;var Q=K.buffer.length;if(Y>Q&&m(n,Q,4),!1===(I=f(n,4,K.buffer,this,i)))return;G(void 0,I,Y)}else{if(!1===(I=f(n,4,this,i)))return;G(void 0,I)}else if(p===y.NAME){var Z=d(n,4,this,i);if(!1===Z)return;var J,ee=[];n._pos=8;for(var te=0;te<Z;++te){if(!1===(U=f(n,n._pos,"utf8",this,i)))return;if(!1===(J=f(n,n._pos,"utf8",this,i)))return;if(!1===(P=C(n,n._pos,this,i)))return;ee.push({filename:U,longname:J,attrs:P})}G(void 0,ee)}else if(p===y.ATTRS){if(!1===(P=C(n,4,this,i)))return;G(void 0,P)}else if(p===y.EXTENDED){if(K.extended)switch(K.extended){case"statvfs@openssh.com":case"fstatvfs@openssh.com":var ie={f_bsize:void 0,f_frsize:void 0,f_blocks:void 0,f_bfree:void 0,f_bavail:void 0,f_files:void 0,f_ffree:void 0,f_favail:void 0,f_sid:void 0,f_flag:void 0,f_namemax:void 0};if(ie.f_bsize=R(n,4,this,i),!1===ie.f_bsize)return;if(ie.f_frsize=R(n,12,this,i),!1===ie.f_frsize)return;if(ie.f_blocks=R(n,20,this,i),!1===ie.f_blocks)return;if(ie.f_bfree=R(n,28,this,i),!1===ie.f_bfree)return;if(ie.f_bavail=R(n,36,this,i),!1===ie.f_bavail)return;if(ie.f_files=R(n,44,this,i),!1===ie.f_files)return;if(ie.f_ffree=R(n,52,this,i),!1===ie.f_ffree)return;if(ie.f_favail=R(n,60,this,i),!1===ie.f_favail)return;if(ie.f_sid=R(n,68,this,i),!1===ie.f_sid)return;if(ie.f_flag=R(n,76,this,i),!1===ie.f_flag)return;if(ie.f_namemax=R(n,84,this,i),!1===ie.f_namemax)return;G(void 0,ie)}G()}K&&delete S[a]}}c="packet_header",n=l=void 0}else if("bad_pkt"===c){if(s&&n[4]!==b.INIT){var ne=n[4]===b.EXTENDED?v.OP_UNSUPPORTED:v.FAILURE;if(n[4]===b.INIT||n[4]===y.VERSION)return this._cleanup(i);if(!1===(a=d(n,5,this,i)))return;this.status(a,ne)}x=h(n,0)-5,c="discard"}}if(A>=T)break}o.status=c,o.pktType=p,o.pktBuf=l,o.pktLeft=x,o.version=w,i()},T.prototype.createReadStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new W(this,e,t)},T.prototype.createWriteStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new V(this,e,t)},T.prototype.open=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state;"function"==typeof i&&(n=i,i=void 0);var a="number"==typeof t?t:I(t);if(null===a)throw new Error("Unknown flags string: "+t);var o=0,s=0;"string"!=typeof i&&"number"!=typeof i||(i={mode:i}),"object"==typeof i&&null!==i&&(o=(i=B(i)).flags,s=i.nbytes,i=i.bytes);var c=Buffer.byteLength(e),p=9,u=Buffer.allocUnsafe(13+c+4+4+s);m(u,u.length-4,0),u[4]=b.OPEN;var l=r.writeReqid=(r.writeReqid+1)%w;if(m(u,l,5),m(u,c,p),u.write(e,p+=4,c,"utf8"),m(u,a,p+=c),m(u,o,p+=4),i&&o){p+=4;for(var f=0,d=i.length;f<d;++f)for(var h=0,v=i[f].length;h<v;++h)u[p++]=i[f][h]}return r.requests[l]={cb:n},this.debug("DEBUG[SFTP]: Outgoing: Writing OPEN"),this.push(u)},T.prototype.close=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=this._state,n=e.length,r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.CLOSE;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),e.copy(a,r+=4),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing CLOSE"),this.push(a)},T.prototype.readData=function(e,t,i,n,r,a){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(i>=t.length)throw new Error("offset is out of bounds");if(i+n>t.length)throw new Error("length extends beyond buffer");if(null===r)throw new Error("null position currently unsupported");var o=this._state,s=e.length,c=9,p=r,u=Buffer.allocUnsafe(13+s+8+4);m(u,u.length-4,0),u[4]=b.READ;var l=o.writeReqid=(o.writeReqid+1)%w;m(u,l,5),m(u,s,c),e.copy(u,c+=4),c+=s;for(var f=7;f>=0;--f)u[c+f]=255&p,p/=256;return m(u,n,c+=8),o.requests[l]={cb:function(e,t,i){if(e){if(a._wantEOFError||e.code!==v.EOF)return a(e)}else if(i>n)return a(new Error("Received more data than requested"));a(void 0,i||0,t,r)},buffer:t.slice(i,i+n)},this.debug("DEBUG[SFTP]: Outgoing: Writing READ"),this.push(u)},T.prototype.writeData=function(e,t,i,n,r,a){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(i>t.length)throw new Error("offset is out of bounds");if(i+n>t.length)throw new Error("length extends beyond buffer");if(null===r)throw new Error("null position currently unsupported");var o=this,s=this._state;if(n){var c=n>s.maxDataLen?n-s.maxDataLen:0,p=r;c&&(n=s.maxDataLen);var u=e.length,l=9,f=Buffer.allocUnsafe(13+u+8+4+n);m(f,f.length-4,0),f[4]=b.WRITE;var d=s.writeReqid=(s.writeReqid+1)%w;m(f,d,5),m(f,u,l),e.copy(f,l+=4),l+=u;for(var h=7;h>=0;--h)f[l+h]=255&r,r/=256;return m(f,n,l+=8),t.copy(f,l+=4,i,i+n),s.requests[d]={cb:function(r){r?a&&a(r):c?o.writeData(e,t,i+n,c,p+n,a):a&&a(void 0,i+n)}},this.debug("DEBUG[SFTP]: Outgoing: Writing WRITE"),this.push(f)}a&&process.nextTick((function(){a(void 0,0)}))},T.prototype.fastGet=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");A(this,l,e,t,i,n)},T.prototype.fastPut=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");A(l,this,e,t,i,n)},T.prototype.readFile=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n;"function"==typeof i?n=i:"function"==typeof t&&(n=t,t=void 0);var r=this;if("string"==typeof t)t={encoding:t,flag:"r"};else if(t){if("object"!=typeof t)throw new TypeError("Bad arguments")}else t={encoding:null,flag:"r"};var a,o,s,c=t.encoding;if(c&&!Buffer.isEncoding(c))throw new Error("Unknown encoding: "+c);var p,u=0,l=0,f=t.flag||"r";function d(){0===a?(o=Buffer.allocUnsafe(8192),r.readData(p,o,0,8192,l,h)):r.readData(p,o,u,a-u,l,h)}function h(e,t){var i;if(e){if(!(i=e.code===v.EOF))return r.close(p,(function(){return n&&n(e)}))}else i=!1;if(i||0===a&&0===t)return m();l+=t,u+=t,0!==a?u===a?m():d():(s.push(o.slice(0,t)),d())}function m(){r.close(p,(function(e){return 0===a?o=Buffer.concat(s,u):u<a&&(o=o.slice(0,u)),c&&(o=o.toString(c)),n&&n(e,o)}))}this.open(e,f,438,(function(t,i){if(t)return n&&n(t);p=i,r.fstat(p,(function t(i,c){if(i)r.stat(e,(function(e,a){if(e)return r.close(p,(function(){n&&n(i)}));t(null,a)}));else{if(0===(a=c.size||0))return s=[],d();o=Buffer.allocUnsafe(a),d()}}))})),h._wantEOFError=!0},T.prototype.writeFile=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r;"function"==typeof n?r=n:"function"==typeof i&&(r=i,i=void 0);var a=this;if("string"==typeof i)i={encoding:i,mode:438,flag:"w"};else if(i){if("object"!=typeof i)throw new TypeError("Bad arguments")}else i={encoding:"utf8",mode:438,flag:"w"};if(i.encoding&&!Buffer.isEncoding(i.encoding))throw new Error("Unknown encoding: "+i.encoding);var o=i.flag||"w";this.open(e,o,i.mode,(function(n,s){if(n)r&&r(n);else{var c=Buffer.isBuffer(t)?t:Buffer.from(""+t,i.encoding||"utf8"),p=/a/.test(o)?null:0;if(null===p)return void a.fstat(s,(function t(i,n){i?a.stat(e,(function(e,n){if(e)return a.close(s,(function(){r&&r(i)}));t(null,n)})):O(a,s,c,0,c.length,n.size,r)}));O(a,s,c,0,c.length,p,r)}}))},T.prototype.appendFile=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r;if("function"==typeof n?r=n:"function"==typeof i&&(r=i,i=void 0),"string"==typeof i)i={encoding:i,mode:438,flag:"a"};else if(i){if("object"!=typeof i)throw new TypeError("Bad arguments")}else i={encoding:"utf8",mode:438,flag:"a"};i.flag||(i=s._extend({flag:"a"},i)),this.writeFile(e,t,i,r)},T.prototype.exists=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");this.stat(e,(function(e){t&&t(!e)}))},T.prototype.unlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.REMOVE;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing REMOVE"),this.push(a)},T.prototype.rename=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=this._state,r=Buffer.byteLength(e),a=Buffer.byteLength(t),o=9,s=Buffer.allocUnsafe(13+r+4+a);m(s,s.length-4,0),s[4]=b.RENAME;var c=n.writeReqid=(n.writeReqid+1)%w;return m(s,c,5),m(s,r,o),s.write(e,o+=4,r,"utf8"),m(s,a,o+=r),s.write(t,o+=4,a,"utf8"),n.requests[c]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing RENAME"),this.push(s)},T.prototype.mkdir=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=0,r=0,a=this._state;"function"==typeof t&&(i=t,t=void 0),"object"==typeof t&&null!==t&&(n=(t=B(t)).flags,r=t.nbytes,t=t.bytes);var o=Buffer.byteLength(e),s=9,c=Buffer.allocUnsafe(13+o+4+r);m(c,c.length-4,0),c[4]=b.MKDIR;var p=a.writeReqid=(a.writeReqid+1)%w;if(m(c,p,5),m(c,o,s),c.write(e,s+=4,o,"utf8"),m(c,n,s+=o),n){s+=4;for(var u=0,l=t.length;u<l;++u)for(var f=0,d=t[u].length;f<d;++f)c[s++]=t[u][f]}return a.requests[p]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing MKDIR"),this.push(c)},T.prototype.rmdir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.RMDIR;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing RMDIR"),this.push(a)},T.prototype.readdir=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n,r=this._state;if("function"==typeof t&&(i=t,t={}),"object"==typeof t&&null!==t||(t={}),n=!t||!t.full,!Buffer.isBuffer(e)&&"string"!=typeof e)throw new Error("missing directory handle or path");if("string"==typeof e){var a=this,o=[],s=0;return this.opendir(e,(function e(n,r){if(n)return i(n);a.readdir(r,t,(function(t,n){var c=t&&t.code===v.EOF;if(t&&!c)return a.close(r,(function(){i(t)}));if(c)return a.close(r,(function(e){if(e)return i(e);i(void 0,o)}));for(var p=0,u=n.length;p<u;++p,++s)o[s]=n[p];e(void 0,r)}))}))}var c=e.length,p=9,u=Buffer.allocUnsafe(13+c);m(u,u.length-4,0),u[4]=b.READDIR;var l=r.writeReqid=(r.writeReqid+1)%w;return m(u,l,5),m(u,c,p),e.copy(u,p+=4),r.requests[l]={cb:n?function(e,t){if(e)return i(e);for(var n=t.length-1;n>=0;--n)"."!==t[n].filename&&".."!==t[n].filename||t.splice(n,1);i(void 0,t)}:i},this.debug("DEBUG[SFTP]: Outgoing: Writing READDIR"),this.push(u)},T.prototype.fstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=this._state,n=e.length,r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.FSTAT;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),e.copy(a,r+=4),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing FSTAT"),this.push(a)},T.prototype.stat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.STAT;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing STAT"),this.push(a)},T.prototype.lstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.LSTAT;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing LSTAT"),this.push(a)},T.prototype.opendir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.OPENDIR;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing OPENDIR"),this.push(a)},T.prototype.setstat=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=0,r=0,a=this._state;"object"==typeof t&&null!==t?(n=(t=B(t)).flags,r=t.nbytes,t=t.bytes):"function"==typeof t&&(i=t);var o=Buffer.byteLength(e),s=9,c=Buffer.allocUnsafe(13+o+4+r);m(c,c.length-4,0),c[4]=b.SETSTAT;var p=a.writeReqid=(a.writeReqid+1)%w;if(m(c,p,5),m(c,o,s),c.write(e,s+=4,o,"utf8"),m(c,n,s+=o),n){s+=4;for(var u=0,l=t.length;u<l;++u)for(var f=0,d=t[u].length;f<d;++f)c[s++]=t[u][f]}return a.requests[p]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing SETSTAT"),this.push(c)},T.prototype.fsetstat=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var n=0,r=0,a=this._state;"object"==typeof t&&null!==t?(n=(t=B(t)).flags,r=t.nbytes,t=t.bytes):"function"==typeof t&&(i=t);var o=e.length,s=9,c=Buffer.allocUnsafe(13+o+4+r);m(c,c.length-4,0),c[4]=b.FSETSTAT;var p=a.writeReqid=(a.writeReqid+1)%w;if(m(c,p,5),m(c,o,s),e.copy(c,s+=4),m(c,n,s+=o),n){s+=4;for(var u=0,l=t.length;u<l;++u)for(var f=0,d=t[u].length;f<d;++f)c[s++]=t[u][f]}return a.requests[p]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing FSETSTAT"),this.push(c)},T.prototype.futimes=function(e,t,i,n){return this.fsetstat(e,{atime:N(t),mtime:N(i)},n)},T.prototype.utimes=function(e,t,i,n){return this.setstat(e,{atime:N(t),mtime:N(i)},n)},T.prototype.fchown=function(e,t,i,n){return this.fsetstat(e,{uid:t,gid:i},n)},T.prototype.chown=function(e,t,i,n){return this.setstat(e,{uid:t,gid:i},n)},T.prototype.fchmod=function(e,t,i){return this.fsetstat(e,{mode:t},i)},T.prototype.chmod=function(e,t,i){return this.setstat(e,{mode:t},i)},T.prototype.readlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.READLINK;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:function(e,i){return e?t(e):i&&i.length?void t(void 0,i[0].filename):t(new Error("Response missing link info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing READLINK"),this.push(a)},T.prototype.symlink=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=this._state,r=Buffer.byteLength(t),a=Buffer.byteLength(e),o=9,s=Buffer.allocUnsafe(13+r+4+a);m(s,s.length-4,0),s[4]=b.SYMLINK;var c=n.writeReqid=(n.writeReqid+1)%w;return m(s,c,5),this._isOpenSSH?(m(s,a,o),s.write(e,o+=4,a,"utf8"),m(s,r,o+=a),s.write(t,o+=4,r,"utf8")):(m(s,r,o),s.write(t,o+=4,r,"utf8"),m(s,a,o+=r),s.write(e,o+=4,a,"utf8")),n.requests[c]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing SYMLINK"),this.push(s)},T.prototype.realpath=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(13+n);m(a,a.length-4,0),a[4]=b.REALPATH;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,n,r),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:function(e,i){return e?t(e):i&&i.length?void t(void 0,i[0].filename):t(new Error("Response missing path info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing REALPATH"),this.push(a)},T.prototype.ext_openssh_rename=function(e,t,i){var n=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!n.extensions["posix-rename@openssh.com"]||-1===n.extensions["posix-rename@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var r=Buffer.byteLength(e),a=Buffer.byteLength(t),o=9,s=Buffer.allocUnsafe(41+r+4+a);m(s,s.length-4,0),s[4]=b.EXTENDED;var c=n.writeReqid=(n.writeReqid+1)%w;return m(s,c,5),m(s,24,o),s.write("posix-rename@openssh.com",o+=4,24,"ascii"),m(s,r,o+=24),s.write(e,o+=4,r,"utf8"),m(s,a,o+=r),s.write(t,o+=4,a,"utf8"),n.requests[c]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing posix-rename@openssh.com"),this.push(s)},T.prototype.ext_openssh_statvfs=function(e,t){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["statvfs@openssh.com"]||-1===i.extensions["statvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");var n=Buffer.byteLength(e),r=9,a=Buffer.allocUnsafe(36+n);m(a,a.length-4,0),a[4]=b.EXTENDED;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,19,r),a.write("statvfs@openssh.com",r+=4,19,"ascii"),m(a,n,r+=19),a.write(e,r+=4,n,"utf8"),i.requests[o]={extended:"statvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing statvfs@openssh.com"),this.push(a)},T.prototype.ext_openssh_fstatvfs=function(e,t){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["fstatvfs@openssh.com"]||-1===i.extensions["fstatvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var n=e.length,r=9,a=Buffer.allocUnsafe(37+n);m(a,a.length-4,0),a[4]=b.EXTENDED;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,20,r),a.write("fstatvfs@openssh.com",r+=4,20,"ascii"),m(a,n,r+=20),a.write(e,r+=4,n,"utf8"),i.requests[o]={extended:"fstatvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fstatvfs@openssh.com"),this.push(a)},T.prototype.ext_openssh_hardlink=function(e,t,i){var n=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!n.extensions["hardlink@openssh.com"]||-1===n.extensions["hardlink@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var r=Buffer.byteLength(e),a=Buffer.byteLength(t),o=9,s=Buffer.allocUnsafe(37+r+4+a);m(s,s.length-4,0),s[4]=b.EXTENDED;var c=n.writeReqid=(n.writeReqid+1)%w;return m(s,c,5),m(s,20,o),s.write("hardlink@openssh.com",o+=4,20,"ascii"),m(s,r,o+=20),s.write(e,o+=4,r,"utf8"),m(s,a,o+=r),s.write(t,o+=4,a,"utf8"),n.requests[c]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing hardlink@openssh.com"),this.push(s)},T.prototype.ext_openssh_fsync=function(e,t){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["fsync@openssh.com"]||-1===i.extensions["fsync@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var n=e.length,r=9,a=Buffer.allocUnsafe(34+n);m(a,a.length-4,0),a[4]=b.EXTENDED;var o=i.writeReqid=(i.writeReqid+1)%w;return m(a,o,5),m(a,17,r),a.write("fsync@openssh.com",r+=4,17,"ascii"),m(a,n,r+=17),a.write(e,r+=4,n,"utf8"),i.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fsync@openssh.com"),this.push(a)},T.prototype.status=function(e,t,i,n){if(!this.server)throw new Error("Server-only method called in client mode");if(!v[t]||"number"!=typeof t)throw new Error("Bad status code: "+t);i||(i=""),n||(n="");var r=Buffer.byteLength(i),a=Buffer.byteLength(n),o=Buffer.allocUnsafe(17+r+4+a);return m(o,o.length-4,0),o[4]=y.STATUS,m(o,e,5),m(o,t,9),m(o,r,13),r&&o.write(i,17,r,"utf8"),m(o,a,17+r),a&&o.write(n,17+r+4,a,"ascii"),this.debug("DEBUG[SFTP]: Outgoing: Writing STATUS"),this.push(o)},T.prototype.handle=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Buffer.isBuffer(t))throw new Error("handle is not a Buffer");var i=t.length;if(i>256)throw new Error("handle too large (> 256 bytes)");var n=Buffer.allocUnsafe(13+i);return m(n,n.length-4,0),n[4]=y.HANDLE,m(n,e,5),m(n,i,9),i&&t.copy(n,13),this.debug("DEBUG[SFTP]: Outgoing: Writing HANDLE"),this.push(n)},T.prototype.data=function(e,t,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.isBuffer(t);if(!n&&"string"!=typeof t)throw new Error("data is not a Buffer or string");n||i||(i="utf8");var r=n?t.length:Buffer.byteLength(t,i),a=Buffer.allocUnsafe(13+r);return m(a,a.length-4,0),a[4]=y.DATA,m(a,e,5),m(a,r,9),r&&(n?t.copy(a,13):a.write(t,13,r,i)),this.debug("DEBUG[SFTP]: Outgoing: Writing DATA"),this.push(a)},T.prototype.name=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Array.isArray(t)){if("object"!=typeof t||null===t)throw new Error("names is not an object or array");t=[t]}var i,n,r,a,o,s,c,p,u,l,f,d,h=t.length,v=0,g=[];for(l=0;l<h;++l)r=(n=t[l])&&n.filename&&"string"==typeof n.filename?n.filename:"",v+=4+Buffer.byteLength(r),a=n&&n.longname&&"string"==typeof n.longname?n.longname:"",v+=4+Buffer.byteLength(a),"object"==typeof n.attrs&&null!==n.attrs?(v+=4+(i=B(n.attrs)).nbytes,g.push(i)):(v+=4,g.push(null));for(p=Buffer.allocUnsafe(13+v),m(p,p.length-4,0),p[4]=y.NAME,m(p,e,5),m(p,h,9),u=13,l=0;l<h;++l)if(r=(n=t[l])&&n.filename&&"string"==typeof n.filename?n.filename:"",s=Buffer.byteLength(r),m(p,s,u),u+=4,s&&(p.write(r,u,s,"utf8"),u+=s),a=n&&n.longname&&"string"==typeof n.longname?n.longname:"",s=Buffer.byteLength(a),m(p,s,u),u+=4,s&&(p.write(a,u,s,"utf8"),u+=s),o=g[l]){if(m(p,o.flags,u),u+=4,o.flags&&o.bytes){var b=o.bytes;for(f=0,s=b.length;f<s;++f)for(d=0,c=b[f].length;d<c;++d)p[u++]=b[f][d]}}else m(p,0,u),u+=4;return this.debug("DEBUG[SFTP]: Outgoing: Writing NAME"),this.push(p)},T.prototype.attrs=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if("object"!=typeof t||null===t)throw new Error("attrs is not an object");var i=B(t),n=Buffer.allocUnsafe(13+i.nbytes),r=13;if(m(n,n.length-4,0),n[4]=y.ATTRS,m(n,e,5),m(n,i.flags,9),i.flags&&i.bytes)for(var a=i.bytes,o=0,s=a.length;o<s;++o)for(var c=0,p=a[o].length;c<p;++c)n[r++]=a[o][c];return this.debug("DEBUG[SFTP]: Outgoing: Writing ATTRS"),this.push(n)};var P={r:x.READ,"r+":x.READ|x.WRITE,w:x.TRUNC|x.CREAT|x.WRITE,wx:x.TRUNC|x.CREAT|x.WRITE|x.EXCL,xw:x.TRUNC|x.CREAT|x.WRITE|x.EXCL,"w+":x.TRUNC|x.CREAT|x.READ|x.WRITE,"wx+":x.TRUNC|x.CREAT|x.READ|x.WRITE|x.EXCL,"xw+":x.TRUNC|x.CREAT|x.READ|x.WRITE|x.EXCL,a:x.APPEND|x.CREAT|x.WRITE,ax:x.APPEND|x.CREAT|x.WRITE|x.EXCL,xa:x.APPEND|x.CREAT|x.WRITE|x.EXCL,"a+":x.APPEND|x.CREAT|x.READ|x.WRITE,"ax+":x.APPEND|x.CREAT|x.READ|x.WRITE|x.EXCL,"xa+":x.APPEND|x.CREAT|x.READ|x.WRITE|x.EXCL},L=Object.keys(P);function I(e){var t=P[e];return void 0!==t?t:null}function D(e){this.mode=e&&e.mode,this.permissions=this.mode,this.uid=e&&e.uid,this.gid=e&&e.gid,this.size=e&&e.size,this.atime=e&&e.atime,this.mtime=e&&e.mtime}T.stringToFlags=I,T.flagsToString=function(e){for(var t=0;t<L.length;++t){var i=L[t];if(P[i]===e)return i}return null},D.prototype._checkModeProperty=function(e){return(this.mode&o.S_IFMT)===e},D.prototype.isDirectory=function(){return this._checkModeProperty(o.S_IFDIR)},D.prototype.isFile=function(){return this._checkModeProperty(o.S_IFREG)},D.prototype.isBlockDevice=function(){return this._checkModeProperty(o.S_IFBLK)},D.prototype.isCharacterDevice=function(){return this._checkModeProperty(o.S_IFCHR)},D.prototype.isSymbolicLink=function(){return this._checkModeProperty(o.S_IFLNK)},D.prototype.isFIFO=function(){return this._checkModeProperty(o.S_IFIFO)},D.prototype.isSocket=function(){return this._checkModeProperty(o.S_IFSOCK)},T.Stats=D;var j,H=i(9821),M=H.validateNumber,q=H.destroyImpl,F=H.ERR_OUT_OF_RANGE,z=H.ERR_INVALID_ARG_TYPE,K=[];function G(e,t){if(!Number.isSafeInteger(e)){if(M(e,t),!Number.isInteger(e))throw new F(t,"an integer",e);throw new F(t,">= 0 and <= 2 ** 53 - 1",e)}if(e<0)throw new F(t,">= 0 and <= 2 ** 53 - 1",e)}function $(e){return e+7&-8}function W(e,t,i){if(void 0===i)i={};else if("string"==typeof i)i={encoding:i};else{if(null===i||"object"!=typeof i)throw new TypeError('"options" argument must be a string or an object');i=Object.create(i)}if(void 0===i.highWaterMark&&(i.highWaterMark=65536),i.emitClose=!1,r.call(this,i),this.path=t,this.flags=void 0===i.flags?"r":i.flags,this.mode=void 0===i.mode?438:i.mode,this.start=i.start,this.end=i.end,this.autoClose=void 0===i.autoClose||i.autoClose,this.pos=0,this.bytesRead=0,this.closed=!1,this.handle=void 0===i.handle?null:i.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(G(this.start,"start"),this.pos=this.start),void 0===this.end)this.end=1/0;else if(this.end!==1/0&&(G(this.end,"end"),void 0!==this.start&&this.start>this.end))throw new F("start",`<= "end" (here: ${this.end})`,this.start);this.on("end",(function(){this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}function X(e,t,i){if(!e.handle)return n();function n(n){t(n=n||i),e.closed=!0,n||e.emit("close")}e.sftp.close(e.handle,n)}function V(e,t,i){if(void 0===i)i={};else if("string"==typeof i)i={encoding:i};else{if(null===i||"object"!=typeof i)throw new TypeError('"options" argument must be a string or an object');i=Object.create(i)}i.emitClose=!1,a.call(this,i),this.path=t,this.flags=void 0===i.flags?"w":i.flags,this.mode=void 0===i.mode?438:i.mode,this.start=i.start,this.autoClose=void 0===i.autoClose||i.autoClose,this.pos=0,this.bytesWritten=0,this.closed=!1,this.handle=void 0===i.handle?null:i.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(G(this.start,"start"),this.pos=this.start),i.encoding&&this.setDefaultEncoding(i.encoding),this.on("finish",(function(){this._writableState.finalCalled||this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}c(W,r),W.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,((e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t,this.emit("open",t),this.emit("ready"),this.read()})))},W.prototype._read=function(e){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._read(e)}));if(!this.destroyed){var t;(!j||j.length-j.used<128)&&(t=this.readableHighWaterMark||this._readableState.highWaterMark,(j=K.length>0?K.pop():Buffer.allocUnsafe(t)).used=0);var i=j,n=Math.min(j.length-j.used,e),r=j.used;if(void 0!==this.end&&(n=Math.min(this.end-this.pos+1,n)),n<=0)return this.push(null);this.sftp.readData(this.handle,j,j.used,n,this.pos,((e,t)=>{if(e)return this.emit("error",e),void(this.autoClose&&this.destroy());var a=null;if(r+n===i.used&&i===j){var o=i.used+t-n;i.used=$(o)}else{var s=r+n&-8,c=$(r+t);s-c>=128&&K.push(i.slice(c,s))}t>0&&(this.bytesRead+=t,a=i.slice(r,r+t)),this.pos+=t,this.push(a)})),j.used=$(j.used+n)}},"function"!=typeof r.prototype.destroy&&(W.prototype.destroy=q),W.prototype._destroy=function(e,t){!this._opening||Buffer.isBuffer(this.handle)?(X(this,t,e),this.handle=null,this._opening=!1):this.once("open",X.bind(null,this,t,e))},W.prototype.close=function(e){this.destroy(null,e)},Object.defineProperty(W.prototype,"pending",{get(){return null===this.handle},configurable:!0}),c(V,a),V.prototype._final=function(e){this.autoClose&&this.destroy(),e()},V.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,((e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t;var i=e=>{if(e)this.sftp.chmod(this.path,this.mode,(e=>{i()}));else if("a"!==this.flags[0])this.emit("open",t),this.emit("ready");else{var n=(e,i)=>{e?this.sftp.stat(this.path,((t,i)=>{if(t)return this.destroy(),void this.emit("error",e);n(null,i)})):(this.pos=i.size,this.emit("open",t),this.emit("ready"))};this.sftp.fstat(t,n)}};this.sftp.fchmod(t,this.mode,i)})))},V.prototype._write=function(e,t,i){if(!Buffer.isBuffer(e)){const t=new z("data","Buffer",e);return this.emit("error",t)}if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._write(e,t,i)}));this.sftp.writeData(this.handle,e,0,e.length,this.pos,((e,t)=>{if(e)return this.autoClose&&this.destroy(),i(e);this.bytesWritten+=t,i()})),this.pos+=e.length},V.prototype._writev=function(e,t){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._writev(e,t)}));for(var i=this.sftp,n=this.handle,r=e.length,a=(e,i)=>{if(e)return this.destroy(),t(e);this.bytesWritten+=i,0==--r&&t()},o=0;o<e.length;++o){var s=e[o].chunk;i.writeData(n,s,0,s.length,this.pos,a),this.pos+=s.length}},"function"!=typeof a.prototype.destroy&&(V.prototype.destroy=W.prototype.destroy),V.prototype._destroy=W.prototype._destroy,V.prototype.close=function(e){if(e){if(this.closed)return void process.nextTick(e);this.on("close",e)}this.autoClose||this.on("finish",this.destroy.bind(this)),this.end()},V.prototype.destroySoon=V.prototype.end,Object.defineProperty(V.prototype,"pending",{get(){return null===this.handle},configurable:!0}),e.exports=T},4184:(e,t,i)=>{var n=i(6417),r=i(8761),a=i(2413).Transform,o=i(1669).inherits,s=i(1669).inspect,c=i(1301),p=i(476).Ber,u=i(33).readUInt32BE,l=i(33).writeUInt32BE,f=i(1399),d=i(8013),h=d.iv_inc,m=d.readString,v=d.readInt,g=d.DSASigBERToBare,b=d.ECDSASigASN1ToSSH,y=d.sigSSHToASN1,x=i(8819).parseDERKey,w=f.CIPHER_INFO,E=f.HMAC_INFO,_=f.MESSAGE,S=(f.DYNAMIC_KEXDH_MESSAGE,f.KEXDH_MESSAGE,f.ALGORITHMS),k=f.DISCONNECT_REASON,T=f.CHANNEL_OPEN_FAILURE,A=f.SSH_TO_OPENSSL,O=f.TERMINAL_MODE,C=f.SIGNALS,R=(f.EDDSA_SUPPORTED,f.CURVE25519_SUPPORTED),B=f.BUGS,N=f.BUGGY_IMPLS,U=N.length,P=i(5129).i8,L=0,I=L++,D=L++,j=L++,H=L++,M=L++,q=L++,F=L++,z=L++,K=L++,G=L++,$=L++,W=4294967295,X=r.Z_PARTIAL_FLUSH,V={flush:X},Y=/\x00/g,Q=Buffer.from("SSH-"),Z=Buffer.allocUnsafe(0),J=Buffer.allocUnsafe(9),ee=Buffer.from([_.GLOBAL_REQUEST,0,0,0,21,107,101,101,112,97,108,105,118,101,64,111,112,101,110,115,115,104,46,99,111,109,1]),te=Buffer.from([_.NEWKEYS]),ie=Buffer.from([_.USERAUTH_SUCCESS]),ne=Buffer.from([_.REQUEST_SUCCESS]),re=Buffer.from([_.REQUEST_FAILURE]),ae=Buffer.from([O.TTY_OP_END]),oe=Buffer.from([_.KEXDH_GEX_REQUEST,0,0,4,0,0,0,16,0,0,0,32,0]);function se(e){}function ce(e){"object"==typeof e&&null!==e||(e={}),a.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this._needContinue=!1,this.bytesSent=this.bytesReceived=0,this.debug="function"==typeof e.debug?e.debug:se,this.server=!0===e.server,this.maxPacketSize="number"==typeof e.maxPacketSize?e.maxPacketSize:35e3,this.remoteBugs=0,this.server&&(this.remoteBugs=B.BAD_DHGEX),this.readable=!0;var t=this,i=e.hostKeys;if(this.server&&("object"!=typeof i||null===i))throw new Error("hostKeys must be an object keyed on host key type");if(this.config={hostKeys:i,ident:"SSH-2.0-"+(e.ident||"ssh2js"+P+(this.server?"srv":"")),algorithms:{kex:S.KEX,kexBuf:S.KEX_BUF,serverHostKey:S.SERVER_HOST_KEY,serverHostKeyBuf:S.SERVER_HOST_KEY_BUF,cipher:S.CIPHER,cipherBuf:S.CIPHER_BUF,hmac:S.HMAC,hmacBuf:S.HMAC_BUF,compress:S.COMPRESS,compressBuf:S.COMPRESS_BUF}},this.config.ident.replace(Y,""),this.config.ident.length+2>255)throw new Error("ident too long");if("object"==typeof e.algorithms&&null!==e.algorithms){var r=e.algorithms;Array.isArray(r.kex)&&r.kex.length>0&&(this.config.algorithms.kex=r.kex,Buffer.isBuffer(r.kexBuf)||(r.kexBuf=Buffer.from(r.kex.join(","),"ascii")),this.config.algorithms.kexBuf=r.kexBuf),Array.isArray(r.serverHostKey)&&r.serverHostKey.length>0&&(this.config.algorithms.serverHostKey=r.serverHostKey,Buffer.isBuffer(r.serverHostKeyBuf)||(r.serverHostKeyBuf=Buffer.from(r.serverHostKey.join(","),"ascii")),this.config.algorithms.serverHostKeyBuf=r.serverHostKeyBuf),Array.isArray(r.cipher)&&r.cipher.length>0&&(this.config.algorithms.cipher=r.cipher,Buffer.isBuffer(r.cipherBuf)||(r.cipherBuf=Buffer.from(r.cipher.join(","),"ascii")),this.config.algorithms.cipherBuf=r.cipherBuf),Array.isArray(r.hmac)&&r.hmac.length>0&&(this.config.algorithms.hmac=r.hmac,Buffer.isBuffer(r.hmacBuf)||(r.hmacBuf=Buffer.from(r.hmac.join(","),"ascii")),this.config.algorithms.hmacBuf=r.hmacBuf),Array.isArray(r.compress)&&r.compress.length>0&&(this.config.algorithms.compress=r.compress,Buffer.isBuffer(r.compressBuf)||(r.compressBuf=Buffer.from(r.compress.join(","),"ascii")),this.config.algorithms.compressBuf=r.compressBuf)}this.reset(!0),this.on("end",(function(){t.readable=!1,t._state=void 0,t.reset(),t._state.outgoing.bufSeqno=void 0})),this.on("DISCONNECT",(function(e,i,n,r){!function(e,t,i,n,r){if(i!==k.BY_APPLICATION){var a=new Error(n||t);a.code=i,e.emit("error",a)}e.reset()}(t,e,i,n)})),this.on("KEXINIT",(function(e,i){!function(e,t,i){var n=e._state,r=n.outgoing;function a(){!0===function(e,t,i){var n,r,a,o,s=e._state,c=s.incoming,p=s.outgoing,u=e.debug;u("DEBUG: Comparing KEXINITs ...");var l=e.config.algorithms,f=l.kex;if(e.remoteBugs&B.BAD_DHGEX)for(var d=!1,h=f.length-1;h>=0;--h)-1!==f[h].indexOf("group-exchange")&&(d||(f=f.slice(),d=!0),f.splice(h,1));for(u("DEBUG: (local) KEX algorithms: "+f),u("DEBUG: (remote) KEX algorithms: "+t.algorithms.kex),e.server?(n=f,r=t.algorithms.kex):(n=t.algorithms.kex,r=f),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching key exchange algorithm"),(m=new Error("Handshake failed: no matching key exchange algorithm")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;var m,v=r[o];for(u("DEBUG: KEX algorithm: "+v),!i||t.algorithms.kex.length&&v===t.algorithms.kex[0]||(c.ignoreNext=!0),u("DEBUG: (local) Host key formats: "+l.serverHostKey),u("DEBUG: (remote) Host key formats: "+t.algorithms.srvHostKey),e.server?(n=l.serverHostKey,r=t.algorithms.srvHostKey):(n=t.algorithms.srvHostKey,r=l.serverHostKey),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching host key format"),(m=new Error("Handshake failed: no matching host key format")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(s.hostkeyFormat=r[o],u("DEBUG: Host key format: "+s.hostkeyFormat),u("DEBUG: (local) Client->Server ciphers: "+l.cipher),u("DEBUG: (remote) Client->Server ciphers: "+t.algorithms.cs.encrypt),e.server?(n=l.cipher,r=t.algorithms.cs.encrypt):(n=t.algorithms.cs.encrypt,r=l.cipher),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching Client->Server cipher"),(m=new Error("Handshake failed: no matching client->server cipher")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(u("DEBUG: Client->Server Cipher: "+(e.server?c.decrypt.type=r[o]:p.encrypt.type=r[o])),u("DEBUG: (local) Server->Client ciphers: "+l.cipher),u("DEBUG: (remote) Server->Client ciphers: "+t.algorithms.sc.encrypt),e.server?(n=l.cipher,r=t.algorithms.sc.encrypt):(n=t.algorithms.sc.encrypt,r=l.cipher),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching Server->Client cipher"),(m=new Error("Handshake failed: no matching server->client cipher")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(u("DEBUG: Server->Client Cipher: "+(e.server?p.encrypt.type=r[o]:c.decrypt.type=r[o])),u("DEBUG: (local) Client->Server HMAC algorithms: "+l.hmac),u("DEBUG: (remote) Client->Server HMAC algorithms: "+t.algorithms.cs.mac),e.server?(n=l.hmac,r=t.algorithms.cs.mac):(n=t.algorithms.cs.mac,r=l.hmac),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching Client->Server HMAC algorithm"),(m=new Error("Handshake failed: no matching client->server HMAC")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(u("DEBUG: Client->Server HMAC algorithm: "+(e.server?c.hmac.type=r[o]:p.hmac.type=r[o])),u("DEBUG: (local) Server->Client HMAC algorithms: "+l.hmac),u("DEBUG: (remote) Server->Client HMAC algorithms: "+t.algorithms.sc.mac),e.server?(n=l.hmac,r=t.algorithms.sc.mac):(n=t.algorithms.sc.mac,r=l.hmac),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching Server->Client HMAC algorithm"),(m=new Error("Handshake failed: no matching server->client HMAC")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(u("DEBUG: Server->Client HMAC algorithm: "+(e.server?p.hmac.type=r[o]:c.hmac.type=r[o])),u("DEBUG: (local) Client->Server compression algorithms: "+l.compress),u("DEBUG: (remote) Client->Server compression algorithms: "+t.algorithms.cs.compress),e.server?(n=l.compress,r=t.algorithms.cs.compress):(n=t.algorithms.cs.compress,r=l.compress),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);if(o===a)return u("DEBUG: No matching Client->Server compression algorithm"),(m=new Error("Handshake failed: no matching client->server compression algorithm")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;for(u("DEBUG: Client->Server compression algorithm: "+(e.server?c.decompress.type=r[o]:p.compress.type=r[o])),u("DEBUG: (local) Server->Client compression algorithms: "+l.compress),u("DEBUG: (remote) Server->Client compression algorithms: "+t.algorithms.sc.compress),e.server?(n=l.compress,r=t.algorithms.sc.compress):(n=t.algorithms.sc.compress,r=l.compress),o=0,a=r.length;o<a&&-1===n.indexOf(r[o]);++o);return o===a?(u("DEBUG: No matching Server->Client compression algorithm"),(m=new Error("Handshake failed: no matching server->client compression algorithm")).level="handshake",e.emit("error",m),e.disconnect(k.KEY_EXCHANGE_FAILED),!1):(u("DEBUG: Server->Client compression algorithm: "+(e.server?p.compress.type=r[o]:c.decompress.type=r[o])),s.kex=new Ae(v),s.kex.generateKeys(),p.pubkey=s.kex.getPublicKey(),!0)}(e,t,i)&&(e.server?n.incoming.expectedPacket=n.kex.pktInit:"groupex"===n.kex.type?function(e){e._state.incoming.expectedPacket="KEXDH_GEX_GROUP",e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_REQUEST"),Ee(e,oe,void 0,!0)}(e):ye(e))}r.status===G?(e.debug("DEBUG: Received re-key request"),r.status=$,r.kexinit=void 0,be(e,a)):a()}(t,e,i)})),this.on("NEWKEYS",(function(){ue(t)})),this.server?this.on("KEXDH_INIT",(function(e){!function(e,t){!function(e,t){var i=e._state,r=i.outgoing,a=i.incoming,o=e.config.hostKeys[i.hostkeyFormat];Array.isArray(o)&&(o=o[0]);var s=o.getPublicSSH(),c=o.type;t=i.kex.convertPublicKey(t);var p=i.kex.computeSecret(t);if(p instanceof Error)return p.message="Error while computing DH secret ("+i.kex.type+"): "+p.message,p.level="handshake",e.emit("error",p),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;var u,f,d,h,m=n.createHash(i.kex.hash),v=Buffer.byteLength(a.identRaw),g=Buffer.byteLength(e.config.ident),b=a.kexinit.length,y=r.kexinit.length,x=s.length,w=t.length,E=r.pubkey.length,S=p.length,T=v+g+b+y+x+w+E+S+32,A=i.kex.getDHParams();A&&(d=A.prime,h=A.generator,T+=12,T+=8,T+=u=d.length,T+=f=h.length);var O=0,C=Buffer.allocUnsafe(T);l(C,v,O),O+=4,C.write(a.identRaw,O,"utf8"),l(C,g,O+=v),O+=4,C.write(e.config.ident,O,"utf8"),l(C,b,O+=g),O+=4,a.kexinit.copy(C,O),O+=b,a.kexinit=void 0,l(C,y,O),O+=4,r.kexinit.copy(C,O),O+=y,r.kexinit=void 0,l(C,x,O),O+=4,s.copy(C,O),O+=x,A&&(oe.slice(1).copy(C,O),l(C,u,O+=12),O+=4,d.copy(C,O),l(C,f,O+=u),O+=4,h.copy(C,O),O+=f),l(C,w,O),O+=4,t.copy(C,O),l(C,E,O+=w),O+=4,r.pubkey.copy(C,O),l(C,S,O+=E),O+=4,p.copy(C,O),r.exchangeHash=m.update(C).digest(),void 0===r.sessionId&&(r.sessionId=r.exchangeHash),r.kexsecret=p;var R=o.sign(r.exchangeHash);if(R instanceof Error)return R.message="Error while signing data with host key ("+c+"): "+R.message,R.level="handshake",e.emit("error",R),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;if(!1===(R=ke(R,c)))return R.message="Error while converting handshake signature",R.level="handshake",e.emit("error",R),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;var B=4+c.length+4+R.length,N=Buffer.allocUnsafe(5+x+4+E+4+B);N[O=0]=_[i.kex.pktReply],++O,l(N,x,O),O+=4,s.copy(N,O),l(N,E,O+=x),O+=4,r.pubkey.copy(N,O),l(N,B,O+=E),O+=4,l(N,c.length,O),O+=4,N.write(c,O,c.length,"ascii"),O+=c.length,l(N,R.length,O),O+=4,R.copy(N,O),i.incoming.expectedPacket="NEWKEYS",e.debug("DEBUG: Outgoing: Writing "+i.kex.pktReply),Ee(e,N,void 0,!0),r.sentNEWKEYS=!0,e.debug("DEBUG: Outgoing: Writing NEWKEYS"),Ee(e,te,void 0,!0)}(e,t)}(t,e)})):this.on("KEXDH_REPLY",(function(e){pe(t,e)})).on("KEXDH_GEX_GROUP",(function(e,i){!function(e,t,i){var n=e._state,r=n.outgoing;n.kex.setDHParams(t,i),n.kex.generateKeys(),r.pubkey=n.kex.getPublicKey(),ye(e)}(t,e,i)})),this.server&&("string"==typeof e.greeting&&e.greeting.length&&("\r\n"===e.greeting.slice(-2)?this.push(e.greeting):this.push(e.greeting+"\r\n")),"string"==typeof e.banner&&e.banner.length&&("\r\n"===e.banner.slice(-2)?this.banner=e.banner:this.banner=e.banner+"\r\n")),this.debug("DEBUG: Local ident: "+s(this.config.ident)),this.push(this.config.ident+"\r\n"),this._state.incoming.expectedPacket="KEXINIT"}function pe(e,t,i){var r=e._state,a=r.incoming,o=r.outgoing,s=e.debug;if(void 0===i){a.expectedPacket="NEWKEYS",o.sentNEWKEYS=!1,s("DEBUG: Checking host key format");var c=m(t.hostkey,0,"ascii",e);if(!1===c)return!1;if(t.hostkey_format!==r.hostkeyFormat||t.hostkey_format!==c)return s("DEBUG: Host key format mismatch"),e.disconnect(k.KEY_EXCHANGE_FAILED),e.reset(),(L=new Error("Handshake failed: host key format mismatch")).level="handshake",e.emit("error",L),!1;s("DEBUG: Checking signature format");var p=m(t.sig,0,"ascii",e);if(!1===p)return!1;if(t.sig_format!==p)return s("DEBUG: Signature format mismatch"),e.disconnect(k.KEY_EXCHANGE_FAILED),e.reset(),(L=new Error("Handshake failed: signature format mismatch")).level="handshake",e.emit("error",L),!1}if(o.status===K){if(void 0===i){s("DEBUG: Verifying host fingerprint");var u=!0,f=e.emit("fingerprint",t.hostkey,(function(n){void 0===i&&(i=!!n,u||pe(e,t,i))}));if(u=!1,f&&void 0===i)return}if(void 0===i)s("DEBUG: Host accepted by default (no verification)");else{if(!0!==i)return s("DEBUG: Host denied via fingerprint verification"),e.disconnect(k.KEY_EXCHANGE_FAILED),e.reset(),(L=new Error("Handshake failed: host fingerprint verification failed")).level="handshake",e.emit("error",L),!1;s("DEBUG: Host accepted (verified)")}}if(t.pubkey=r.kex.convertPublicKey(t.pubkey),t.secret=r.kex.computeSecret(t.pubkey),t.secret instanceof Error)return t.secret.message="Error while computing DH secret ("+r.kex.type+"): "+t.secret.message,t.secret.level="handshake",e.emit("error",t.secret),e.disconnect(k.KEY_EXCHANGE_FAILED),!1;var d,h,v,g,b=n.createHash(r.kex.hash),w=Buffer.byteLength(e.config.ident),E=Buffer.byteLength(a.identRaw),_=o.kexinit.length,S=a.kexinit.length,T=t.hostkey.length,A=o.pubkey.length,O=t.pubkey.length,C=t.secret.length,R=w+E+_+S+T+A+O+C+32,B=r.kex.getDHParams();B&&(v=B.prime,g=B.generator,R+=12,R+=8,R+=d=v.length,R+=h=g.length);var N=0,U=Buffer.allocUnsafe(R);l(U,w,N),N+=4,U.write(e.config.ident,N,"utf8"),l(U,E,N+=w),N+=4,U.write(a.identRaw,N,"utf8"),l(U,_,N+=E),N+=4,o.kexinit.copy(U,N),N+=_,o.kexinit=void 0,l(U,S,N),N+=4,a.kexinit.copy(U,N),N+=S,a.kexinit=void 0,l(U,T,N),N+=4,t.hostkey.copy(U,N),N+=T,B&&(oe.slice(1).copy(U,N),l(U,d,N+=12),N+=4,v.copy(U,N),l(U,h,N+=d),N+=4,g.copy(U,N),N+=h),l(U,A,N),N+=4,o.pubkey.copy(U,N),l(U,O,N+=A),N+=4,t.pubkey.copy(U,N),l(U,C,N+=O),N+=4,t.secret.copy(U,N),o.exchangeHash=b.update(U).digest();var P=m(t.sig,t.sig._pos,e);if(!1===P||!(P=y(P,t.sig_format,e)))return!1;var L,I=x(t.hostkey,t.sig_format);return!(I instanceof Error)&&(s("DEBUG: Verifying signature"),!0!==I.verify(o.exchangeHash,P)?(s("DEBUG: Signature verification failed"),e.disconnect(k.KEY_EXCHANGE_FAILED),e.reset(),(L=new Error("Handshake failed: signature verification failed")).level="handshake",e.emit("error",L),!1):(void 0===o.sessionId&&(o.sessionId=o.exchangeHash),o.kexsecret=t.secret,s("DEBUG: Outgoing: Writing NEWKEYS"),o.status===$?Ee(e,te,void 0,!0):Ee(e,te),o.sentNEWKEYS=!0,void(void 0!==i&&void 0===a.expectedPacket&&ue(e))))}function ue(e){var t=e._state,i=t.outgoing,a=t.incoming;if(a.expectedPacket=void 0,i.sentNEWKEYS){var o,s,c=i.kexsecret.length,p=i.encrypt.info=w[i.encrypt.type],u=0,f=t.kex.hash,d=Buffer.allocUnsafe(4+c);if(t.authsQueue=[],l(d,c,u),u+=4,i.kexsecret.copy(d,u),i.kexsecret=void 0,p.stream)o=Z;else{for(o=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"B":"A","ascii").update(i.sessionId).digest();o.length<p.ivLen;)o=Buffer.concat([o,n.createHash(f).update(d).update(i.exchangeHash).update(o).digest()]);o.length>p.ivLen&&(o=o.slice(0,p.ivLen))}for(s=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"D":"C","ascii").update(i.sessionId).digest();s.length<p.keyLen;)s=Buffer.concat([s,n.createHash(f).update(d).update(i.exchangeHash).update(s).digest()]);if(s.length>p.keyLen&&(s=s.slice(0,p.keyLen)),p.authLen>0)i.encrypt.iv=o,i.encrypt.key=s,i.encrypt.instance=!0;else{var h=A[i.encrypt.type];i.encrypt.instance=n.createCipheriv(h,s,o),i.encrypt.instance.setAutoPadding(!1)}var m=a.decrypt.info=w[a.decrypt.type];if(m.stream)o=Z;else{for(o=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"A":"B","ascii").update(i.sessionId).digest();o.length<m.ivLen;)o=Buffer.concat([o,n.createHash(f).update(d).update(i.exchangeHash).update(o).digest()]);o.length>m.ivLen&&(o=o.slice(0,m.ivLen))}for(a.decrypt.buf=Buffer.allocUnsafe(m.blockLen),s=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"C":"D","ascii").update(i.sessionId).digest();s.length<m.keyLen;)s=Buffer.concat([s,n.createHash(f).update(d).update(i.exchangeHash).update(s).digest()]);s.length>m.keyLen&&(s=s.slice(0,m.keyLen));var v,g=A[a.decrypt.type];a.decrypt.instance=n.createDecipheriv(g,s,o),a.decrypt.instance.setAutoPadding(!1),a.decrypt.iv=o,a.decrypt.key=s,p.discardLen>0&&(v=Buffer.alloc(p.discardLen),i.encrypt.instance.update(v)),m.discardLen>0&&(v&&v.length===m.discardLen||(v=Buffer.alloc(p.discardLen)),a.decrypt.instance.update(v));var b=i.hmac.info=E[i.hmac.type],y=a.hmac.info=E[a.hmac.type];if(0===p.authLen){for(s=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"F":"E","ascii").update(i.sessionId).digest();s.length<b.len;)s=Buffer.concat([s,n.createHash(f).update(d).update(i.exchangeHash).update(s).digest()]);s.length>b.len&&(s=s.slice(0,b.len)),i.hmac.key=s}else i.hmac.key=void 0;if(0===m.authLen){for(s=n.createHash(f).update(d).update(i.exchangeHash).update(e.server?"E":"F","ascii").update(i.sessionId).digest();s.length<y.len;)s=Buffer.concat([s,n.createHash(f).update(d).update(i.exchangeHash).update(s).digest()]);s.length>y.len&&(s=s.slice(0,y.len)),a.hmac.key=s}else a.hmac.key=void 0;var x=m.authLen||a.hmac.info.actualLen;if(a.hmac.buf&&a.hmac.buf.length===x||(a.hmac.buf=Buffer.allocUnsafe(x)),i.exchangeHash=void 0,"zlib"===i.compress.type?(i.compress.instance=r.createDeflate(V),i.compress.queue=[]):"none"===i.compress.type&&(i.compress.instance=!1,i.compress.queue=null),"zlib"===a.decompress.type?a.decompress.instance=r.createInflate(V):"none"===a.decompress.type&&(a.decompress.instance=!1),e.bytesSent=e.bytesReceived=0,i.status===$){i.status=G;var _=i.rekeyQueue,S=_.length,k=0;for(i.rekeyQueue=[];k<S;++k)Buffer.isBuffer(_[k])?Ee(e,_[k]):Ee(e,_[k][0],_[k][1]);S=(_=a.rekeyQueue).length,k=0,a.rekeyQueue=[];for(var T=a.seqno;k<S;++k){if(a.seqno=_[k][0],a.payload=_[k][1],!1===fe(e))return;if(a.status===I)return}a.seqno=T}else i.status=G,a.status===M&&(e.debug("DEBUG: Parser: IN_PACKETBEFORE (update) (expecting "+m.blockLen+")"),ve(e,2,m.blockLen,a.decrypt.buf)),e.emit("ready")}}function le(e,t){var i=e._state.kex;if(i)switch(t){case 30:return i.pktInit;case 31:switch(i.type){case"group":return"KEXDH_REPLY";case"groupex":return"KEXDH_GEX_GROUP";default:return"KEXECDH_REPLY"}break;case 33:if("groupex"===i.type)return"KEXDH_GEX_REPLY"}return _[t]}function fe(e,t){var i,n,a,o,s,c,p,f,d,h,g,b,x,w,E=e._state.incoming,S=e._state.outgoing,A=E.payload,C=E.seqno;if(++E.seqno>W&&(E.seqno=0),E.ignoreNext)return e.debug("DEBUG: Parser: Packet ignored"),void(E.ignoreNext=!1);var R=A[0];if(void 0===R)return!1;if(S.status!==G&&le(e,R)!==E.expectedPacket&&R<1&&R>4){e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+E.expectedPacket+" but got: "+le(e,R)),e.disconnect(k.PROTOCOL_ERROR);var N=new Error("Received unexpected packet");return N.level="protocol",e.emit("error",N),!1}if(R===_.CHANNEL_DATA){if(!1===(s=v(A,1,e,t)))return!1;if(!1===(c=m(A,5,e,t,32768)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_DATA ("+s+")"),e.emit("CHANNEL_DATA:"+s,c)}else if(R===_.CHANNEL_EXTENDED_DATA){if(!1===(s=v(A,1,e,t)))return!1;var U=v(A,5,e,t);if(!1===U)return!1;if(!1===(c=m(A,9,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EXTENDED_DATA ("+s+")"),e.emit("CHANNEL_EXTENDED_DATA:"+s,U,c)}else if(R===_.CHANNEL_WINDOW_ADJUST){if(!1===(s=v(A,1,e,t)))return!1;var P=v(A,5,e,t);if(!1===P)return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_WINDOW_ADJUST ("+s+", "+P+")"),e.emit("CHANNEL_WINDOW_ADJUST:"+s,P)}else if(R===_.CHANNEL_SUCCESS){if(!1===(s=v(A,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_SUCCESS ("+s+")"),e.emit("CHANNEL_SUCCESS:"+s)}else if(R===_.CHANNEL_FAILURE){if(!1===(s=v(A,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_FAILURE ("+s+")"),e.emit("CHANNEL_FAILURE:"+s)}else if(R===_.CHANNEL_EOF){if(!1===(s=v(A,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EOF ("+s+")"),e.emit("CHANNEL_EOF:"+s)}else if(R===_.CHANNEL_OPEN){var L,I=m(A,1,"ascii",e,t);if(!1===I)return!1;if(!1===(d=v(A,A._pos,e,t)))return!1;if(!1===(h=v(A,A._pos+=4,e,t)))return!1;if(!1===(g=v(A,A._pos+=4,e,t)))return!1;if(e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_OPEN ("+d+", "+I+")"),"forwarded-tcpip"===I||"direct-tcpip"===I){var D=m(A,A._pos+=4,"ascii",e,t);if(!1===D)return!1;var j=v(A,A._pos,e,t);if(!1===j)return!1;if(!1===(p=m(A,A._pos+=4,"ascii",e,t)))return!1;if(!1===(f=v(A,A._pos,e,t)))return!1;L={type:I,sender:d,window:h,packetSize:g,data:{destIP:D,destPort:j,srcIP:p,srcPort:f}}}else if("forwarded-streamlocal@openssh.com"===I||"direct-streamlocal@openssh.com"===I){if(!1===(w=m(A,A._pos+=4,"utf8",e,t)))return!1;L={type:I,sender:d,window:h,packetSize:g,data:{socketPath:w}}}else if("x11"===I){if(!1===(p=m(A,A._pos+=4,"ascii",e,t)))return!1;if(!1===(f=v(A,A._pos,e,t)))return!1;L={type:I,sender:d,window:h,packetSize:g,data:{srcIP:p,srcPort:f}}}else L={type:I,sender:d,window:h,packetSize:g,data:{}};e.emit("CHANNEL_OPEN",L)}else if(R===_.CHANNEL_OPEN_CONFIRMATION){if(!1===(b=v(A,1,e,t)))return!1;if(!1===(d=v(A,5,e,t)))return!1;if(!1===(h=v(A,9,e,t)))return!1;if(!1===(g=v(A,13,e,t)))return!1;o={recipient:b,sender:d,window:h,packetSize:g},A.length>17&&(o.data=A.slice(17)),e.emit("CHANNEL_OPEN_CONFIRMATION:"+o.recipient,o)}else if(R===_.CHANNEL_OPEN_FAILURE){if(!1===(b=v(A,1,e,t)))return!1;var H=v(A,5,e,t);if(!1===H)return!1;if(!1===(x=m(A,9,"utf8",e,t)))return!1;if(!1===(n=m(A,A._pos,"utf8",e,t)))return!1;A._pos=9,o={recipient:b,reasonCode:H,reason:T[H],description:x,lang:n},e.emit("CHANNEL_OPEN_FAILURE:"+o.recipient,o)}else if(R===_.CHANNEL_CLOSE){if(!1===(s=v(A,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_CLOSE ("+s+")"),e.emit("CHANNEL_CLOSE:"+s)}else if(R===_.IGNORE);else if(R===_.DISCONNECT){var M=v(A,1,e,t);if(!1===M)return!1;var q=k[M];if(!1===(x=m(A,5,"utf8",e,t)))return!1;A._pos<A.length&&(n=m(A,A._pos,"ascii",e,t)),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: DISCONNECT ("+q+")"),e.emit("DISCONNECT",q,M,x,n)}else if(R===_.DEBUG){if(!1===(a=m(A,2,"utf8",e,t)))return!1;if(!1===(n=m(A,A._pos,"ascii",e,t)))return!1;e.emit("DEBUG",a,n)}else if(R===_.NEWKEYS)e.emit("NEWKEYS");else if(R===_.SERVICE_REQUEST){if(!1===(i=m(A,1,"ascii",e,t)))return!1;e.emit("SERVICE_REQUEST",i)}else if(R===_.SERVICE_ACCEPT){if(!1===(i=m(A,1,"ascii",e,t)))return!1;e.emit("SERVICE_ACCEPT",i)}else if(R===_.USERAUTH_REQUEST){var F=m(A,1,"utf8",e,t);if(!1===F)return!1;var z=m(A,A._pos,"ascii",e,t);if(!1===z)return!1;var K,$,X=m(A,A._pos,"ascii",e,t);if(!1===X)return!1;if("password"===X){if(!1===(K=m(A,A._pos+1,"utf8",e,t)))return!1}else if("publickey"===X||"hostbased"===X){var Y,Q,Z,J,ee,te,ie;if("publickey"===X){if(void 0===(Y=A[A._pos++]))return!1;Y=0!==Y}if(!1===(Q=m(A,A._pos,"ascii",e,t)))return!1;if(!1===(Z=m(A,A._pos,e,t)))return!1;if(Y||"hostbased"===X){if("hostbased"===X){if(!1===(te=m(A,A._pos,"ascii",e,t)))return!1;if(!1===(ie=m(A,A._pos,"utf8",e,t)))return!1}var ne=A._pos;if(!1===(J=m(A,ne,e,t)))return!1;if(J.length>4+Q.length+4&&J.toString("ascii",4,4+Q.length)===Q&&(J=J.slice(4+Q.length+4)),!1===(J=y(J,Q,e,t)))return!1;ee=Buffer.allocUnsafe(4+S.sessionId.length+ne),l(ee,S.sessionId.length,0),S.sessionId.copy(ee,4),A.copy(ee,4+S.sessionId.length,0,ne)}else $="publickey -- check";K={keyAlgo:Q,key:Z,signature:J,blob:ee,localHostname:te,localUsername:ie}}else if("keyboard-interactive"===X){var re=v(A,A._pos,e,t);if(!1===re)return!1;if(!1===(K=m(A,A._pos+4+re,"utf8",e,t)))return!1}else"none"!==X&&(K=A.slice(A._pos));void 0===$&&($=X),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: USERAUTH_REQUEST ("+$+")"),e._state.authsQueue.push(X),e.emit("USERAUTH_REQUEST",F,z,X,K)}else if(R===_.USERAUTH_SUCCESS)"zlib@openssh.com"===S.compress.type&&(S.compress.instance=r.createDeflate(V),S.compress.queue=[]),"zlib@openssh.com"===E.decompress.type&&(E.decompress.instance=r.createInflate(V)),e._state.authsQueue.shift(),e.emit("USERAUTH_SUCCESS");else if(R===_.USERAUTH_FAILURE){var ae=m(A,1,"ascii",e,t);if(!1===ae)return!1;var oe=A[A._pos];if(void 0===oe)return!1;oe=0!==oe,ae=ae.split(","),e._state.authsQueue.shift(),e.emit("USERAUTH_FAILURE",ae,oe)}else if(R===_.USERAUTH_BANNER){if(!1===(a=m(A,1,"utf8",e,t)))return!1;if(!1===(n=m(A,A._pos,"utf8",e,t)))return!1;e.emit("USERAUTH_BANNER",a,n)}else if(R===_.GLOBAL_REQUEST){var se=m(A,1,"ascii",e,t);if(!1===se)return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST"),!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST ("+se+")");var ce,pe=A[A._pos++];if(void 0===pe)return!1;if(pe=0!==pe,"tcpip-forward"===se||"cancel-tcpip-forward"===se){var ue=m(A,A._pos,"ascii",e,t);if(!1===ue)return!1;var fe=v(A,A._pos,e,t);if(!1===fe)return!1;ce={bindAddr:ue,bindPort:fe}}else if("streamlocal-forward@openssh.com"===se||"cancel-streamlocal-forward@openssh.com"===se){if(!1===(w=m(A,A._pos,"utf8",e,t)))return!1;ce={socketPath:w}}else"no-more-sessions@openssh.com"===se||(ce=A.slice(A._pos));e.emit("GLOBAL_REQUEST",se,pe,ce)}else if(R===_.REQUEST_SUCCESS)A.length>1?e.emit("REQUEST_SUCCESS",A.slice(1)):e.emit("REQUEST_SUCCESS");else if(R===_.REQUEST_FAILURE)e.emit("REQUEST_FAILURE");else if(R===_.UNIMPLEMENTED);else{if(R===_.KEXINIT)return function(e,t){var i,n=e._state.incoming,r=n.payload,a={algorithms:{kex:void 0,srvHostKey:void 0,cs:{encrypt:void 0,mac:void 0,compress:void 0},sc:{encrypt:void 0,mac:void 0,compress:void 0}},languages:{cs:void 0,sc:void 0}};if(!1===(i=ge(r,17,e,t)))return!1;if(a.algorithms.kex=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.srvHostKey=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.cs.encrypt=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.sc.encrypt=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.cs.mac=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.sc.mac=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.cs.compress=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.algorithms.sc.compress=i,!1===(i=ge(r,r._pos,e,t)))return!1;if(a.languages.cs=i,!1===(i=ge(r,r._pos,e,t)))return!1;a.languages.sc=i;var o=r._pos<r.length&&1===r[r._pos];n.kexinit=r,e.emit("KEXINIT",a,o)}(e,t);if(R===_.CHANNEL_REQUEST)return function(e,t){var i,n,r,a,o,s,c,p=e._state.incoming.payload,l=v(p,1,e,t);if(!1===l)return!1;var f=m(p,5,"ascii",e,t);if(!1===f)return!1;if("exit-status"===f){var d=v(p,++p._pos,e,t);if(!1===d)return!1;i={recipient:l,request:f,wantReply:!1,code:d}}else if("exit-signal"===f){var h;if(e.remoteBugs&B.OLD_EXIT){if(!1===(c=v(p,++p._pos,e,t)))return!1;switch(c){case 1:c="HUP";break;case 2:c="INT";break;case 3:c="QUIT";break;case 6:c="ABRT";break;case 9:c="KILL";break;case 14:c="ALRM";break;case 15:c="TERM";break;default:c="UNKNOWN ("+c+")"}h=!1}else{if(!1===(c=m(p,++p._pos,"ascii",e,t)))return!1;if(void 0===(h=p[p._pos++]))return!1;h=0!==h}var g=m(p,p._pos,"utf8",e,t);if(!1===g)return!1;var b=m(p,p._pos,"utf8",e,t);if(!1===b)return!1;i={recipient:l,request:f,wantReply:!1,signal:c,coredump:h,description:g,lang:b}}else if("pty-req"===f){if(void 0===(s=p[p._pos++]))return!1;s=0!==s;var y=m(p,p._pos,"ascii",e,t);if(!1===y)return!1;if(!1===(n=v(p,p._pos,e,t)))return!1;if(!1===(r=v(p,p._pos+=4,e,t)))return!1;if(!1===(a=v(p,p._pos+=4,e,t)))return!1;if(!1===(o=v(p,p._pos+=4,e,t)))return!1;var x=m(p,p._pos+=4,e,t);if(!1===x)return!1;i={recipient:l,request:f,wantReply:s,term:y,cols:n,rows:r,width:a,height:o,modes:x=function(e){for(var t,i={},n=0,r=e.length;n<r&&!((t=e[n])===O.TTY_OP_END||void 0===O[t]||n+5>r);n+=5)i[O[t]]=u(e,n+1);return i}(x)}}else if("window-change"===f){if(!1===(n=v(p,++p._pos,e,t)))return!1;if(!1===(r=v(p,p._pos+=4,e,t)))return!1;if(!1===(a=v(p,p._pos+=4,e,t)))return!1;if(!1===(o=v(p,p._pos+=4,e,t)))return!1;i={recipient:l,request:f,wantReply:!1,cols:n,rows:r,width:a,height:o}}else if("x11-req"===f){if(void 0===(s=p[p._pos++]))return!1;s=0!==s;var w=p[p._pos++];if(void 0===w)return!1;w=0!==w;var E=m(p,p._pos,"ascii",e,t);if(!1===E)return!1;var _=m(p,p._pos,"binary",e,t);if(!1===_)return!1;var S=v(p,p._pos,e,t);if(!1===S)return!1;i={recipient:l,request:f,wantReply:s,single:w,protocol:E,cookie:_,screen:S}}else if("env"===f){if(void 0===(s=p[p._pos++]))return!1;s=0!==s;var k=m(p,p._pos,"utf8",e,t);if(!1===k)return!1;var T=m(p,p._pos,"utf8",e,t);if(!1===T)return!1;i={recipient:l,request:f,wantReply:s,key:k,val:T}}else if("shell"===f){if(void 0===(s=p[p._pos]))return!1;i={recipient:l,request:f,wantReply:s=0!==s}}else if("exec"===f){if(void 0===(s=p[p._pos++]))return!1;s=0!==s;var A=m(p,p._pos,"utf8",e,t);if(!1===A)return!1;i={recipient:l,request:f,wantReply:s,command:A}}else if("subsystem"===f){if(void 0===(s=p[p._pos++]))return!1;s=0!==s;var C=m(p,p._pos,"utf8",e,t);if(!1===C)return!1;i={recipient:l,request:f,wantReply:s,subsystem:C}}else if("signal"===f){if(!1===(c=m(p,++p._pos,"ascii",e,t)))return!1;i={recipient:l,request:f,wantReply:!1,signal:"SIG"+c}}else if("xon-xoff"===f){var R=p[++p._pos];if(void 0===R)return!1;i={recipient:l,request:f,wantReply:!1,clientControl:R=0!==R}}else if("auth-agent-req@openssh.com"===f){if(void 0===(s=p[p._pos]))return!1;i={recipient:l,request:f,wantReply:s=0!==s}}else{if(void 0===(s=p[p._pos]))return!1;i={recipient:l,request:f,wantReply:s=0!==s}}e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_REQUEST ("+l+", "+f+")"),e.emit("CHANNEL_REQUEST:"+l,i)}(e,t);if(R>=30&&R<=49)return function(e,t,i){var n=e._state,r=n.incoming,a=r.payload;if(n.outgoing.status===G||le(e,t)!==r.expectedPacket)return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+r.expectedPacket+" but got: "+le(e,t)),e.disconnect(k.PROTOCOL_ERROR),(o=new Error("Received unexpected packet")).level="protocol",e.emit("error",o),!1;if("groupex"===n.kex.type){var o;if(e.server)return e.disconnect(k.PROTOCOL_ERROR),(o=new Error("DH group exchange not supported by server")).level="handshake",e.emit("error",o),!1;if(t===_.KEXDH_GEX_GROUP){var s=m(a,1,e,i);if(!1===s)return!1;var c=m(a,a._pos,e,i);if(!1===c)return!1;e.emit("KEXDH_GEX_GROUP",s,c)}else if(t===_.KEXDH_GEX_REPLY)return de(e,i)}else if(t===_.KEXDH_INIT){var p=m(a,1,e,i);if(!1===p)return!1;e.emit("KEXDH_INIT",p)}else if(t===_.KEXDH_REPLY)return de(e,i)}(e,R,t);if(R>=60&&R<=70)return function(e,t,i){var n,r,a,o=e._state,s=o.authsQueue[0],c=o.incoming.payload;if("password"===s){if(t===_.USERAUTH_PASSWD_CHANGEREQ){if(!1===(n=m(c,1,"utf8",e,i)))return!1;if(!1===(r=m(c,c._pos,"utf8",e,i)))return!1;e.emit("USERAUTH_PASSWD_CHANGEREQ",n,r)}}else if("keyboard-interactive"===s){if(t===_.USERAUTH_INFO_REQUEST){var p,u,l;if(!1===(p=m(c,1,"utf8",e,i)))return!1;if(!1===(u=m(c,c._pos,"utf8",e,i)))return!1;if(!1===(r=m(c,c._pos,"utf8",e,i)))return!1;if(!1===(l=v(c,c._pos,e,i)))return!1;c._pos+=4;for(var f=[],d=0;d<l;++d){if(!1===(a=m(c,c._pos,"utf8",e,i)))return!1;var h=c[c._pos++];if(void 0===h)return!1;h=0!==h,f.push({prompt:a,echo:h})}e.emit("USERAUTH_INFO_REQUEST",p,u,r,f)}else if(t===_.USERAUTH_INFO_RESPONSE){var g=v(c,1,e,i);if(!1===g)return!1;c._pos=5;for(var b=[],y=0;y<g;++y){if(!1===(a=m(c,c._pos,"utf8",e,i)))return!1;b.push(a)}e.emit("USERAUTH_INFO_RESPONSE",b)}}else if("publickey"===s){if(t===_.USERAUTH_PK_OK){var x=e._state.authsQueue;if(!x.length||"publickey"!==x[0])return;x.shift(),e.emit("USERAUTH_PK_OK")}}else if(void 0!==s){e.disconnect(k.PROTOCOL_ERROR);var w=new Error("Invalid authentication method: "+s);w.level="protocol",e.emit("error",w)}}(e,R,t);var he=Buffer.allocUnsafe(5);he[0]=_.UNIMPLEMENTED,l(he,C,1),Ee(e,he)}}function de(e,t){var i=e._state.incoming.payload,n=m(i,1,e,t);if(!1===n)return!1;var r=m(i,i._pos,e,t);if(!1===r)return!1;var a=m(i,i._pos,e,t);if(!1===a)return!1;var o={hostkey:n,hostkey_format:void 0,pubkey:r,sig:a,sig_format:void 0},s=m(n,0,"ascii",e,t);if(!1===s)return!1;o.hostkey_format=s;var c=m(a,0,"ascii",e,t);if(!1===c)return!1;o.sig_format=c,e.emit("KEXDH_REPLY",o)}function he(e,t){var i=e._state.incoming,r=i.hmac;if(e.debug("DEBUG: Parser: Verifying MAC"),i.decrypt.info.authLen>0){var a=i.decrypt,o=a.instance;o.setAuthTag(t);var s=o.update(i.packet);return i.payload=s.slice(1,i.packet.length-s[0]),h(a.iv),a.instance=n.createDecipheriv(A[a.type],a.key,a.iv),a.instance.setAutoPadding(!1),!0}var c=n.createHmac(A[r.type],r.key);l(J,i.seqno,0),l(J,i.pktLen,4),J[8]=i.padLen,c.update(J),c.update(i.packet);var p=c.digest();return p.length>i.hmac.info.actualLen&&(p=p.slice(0,i.hmac.info.actualLen)),Te(p,t)}function me(e,t){var i=e._state.incoming.decrypt.instance;return e.debug("DEBUG: Parser: Decrypting"),i.update(t)}function ve(e,t,i,n){var r=e._state.incoming.expect;r.amount=i,r.type=t,r.ptr=0,n?r.buf=n:i&&(r.buf=Buffer.allocUnsafe(i))}function ge(e,t,i,n){var r=m(e,t,"ascii",i,n);return!1!==r&&(r.length?r.split(","):[])}function be(e,t){return function(e,t){n.randomBytes(16,(function e(i,r){if(i)return n.randomBytes(16,e);t&&t(r)}))}(0,(function(i){var n=e.config.algorithms,r=n.kexBuf;if(e.remoteBugs&B.BAD_DHGEX){for(var a=!1,o=n.kex,s=o.length-1;s>=0;--s)-1!==o[s].indexOf("group-exchange")&&(a||(o=o.slice(),a=!0),o.splice(s,1));a&&(r=Buffer.from(o.join(",")))}var c=n.serverHostKeyBuf,p=21+r.length+4+c.length+2*(4+n.cipherBuf.length)+2*(4+n.hmacBuf.length)+2*(4+n.compressBuf.length)+8+1+4,u=Buffer.allocUnsafe(p),f=17;u[0]=_.KEXINIT,!1!==i&&i.copy(u,1),l(u,r.length,f),f+=4,r.copy(u,f),f+=r.length,l(u,c.length,f),f+=4,c.copy(u,f),f+=c.length,l(u,n.cipherBuf.length,f),f+=4,n.cipherBuf.copy(u,f),f+=n.cipherBuf.length,l(u,n.cipherBuf.length,f),f+=4,n.cipherBuf.copy(u,f),f+=n.cipherBuf.length,l(u,n.hmacBuf.length,f),f+=4,n.hmacBuf.copy(u,f),f+=n.hmacBuf.length,l(u,n.hmacBuf.length,f),f+=4,n.hmacBuf.copy(u,f),f+=n.hmacBuf.length,l(u,n.compressBuf.length,f),f+=4,n.compressBuf.copy(u,f),f+=n.compressBuf.length,l(u,n.compressBuf.length,f),f+=4,n.compressBuf.copy(u,f),f+=n.compressBuf.length,u.fill(0,u.length-13),e.debug("DEBUG: Outgoing: Writing KEXINIT"),e._state.incoming.expectedPacket="KEXINIT";var d=e._state.outgoing;d.kexinit=u,d.status===G&&(d.status=$),Ee(e,u,t,!0)})),!0}function ye(e){var t=e._state,i=t.outgoing,n=Buffer.allocUnsafe(5+i.pubkey.length);return t.incoming.expectedPacket=t.kex.pktReply,"groupex"===t.kex.type?(n[0]=_.KEXDH_GEX_INIT,e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_INIT")):(n[0]=_.KEXDH_INIT,"group"===t.kex.type?e.debug("DEBUG: Outgoing: Writing KEXDH_INIT"):e.debug("DEBUG: Outgoing: Writing KEXECDH_INIT")),l(n,i.pubkey.length,1),i.pubkey.copy(n,5),Ee(e,n,void 0,!0)}function xe(e,t,i){var n=e._state.outgoing.compress.instance;n.write(t),n.flush(X,we.bind(e,i))}function we(e){if(!this._readableState.ended&&!this._writableState.ended){_e(this,this._state.outgoing.compress.instance.read(),e);var t=this._state.outgoing.compress.queue;t.shift(),t.length>0&&xe(this,t[0][0],t[0][1])}}function Ee(e,t,i,n){var r=e._state;if(!r)return!1;var a=r.outgoing;if(a.status===$&&!n)return"function"==typeof i?a.rekeyQueue.push([t,i]):a.rekeyQueue.push(t),!1;if(e._readableState.ended||e._writableState.ended)return!1;if(a.compress.instance){var o=a.compress.queue;return o.push([t,i]),1===o.length&&xe(e,o[0][0],o[0][1]),!0}return _e(e,t,i)}function _e(e,t,i){var r,a,o,s,c,p=e._state.outgoing,u=p.encrypt,f=p.hmac;if(r=t.length+9,!1!==u.instance)if(u.info.authLen>0){for(var d=1+t.length+4;d%u.info.blockLen!=0;)++d;a=d-1-t.length,r=4+d}else{var m=u.info.blockLen;a=(r+=(m-1)*r%m)-t.length-5}else a=(r+=7*r%8)-t.length-5;o=Buffer.allocUnsafe(r),l(o,r-4,0),o[4]=a,t.copy(o,5),Se(o,5+t.length,a),!1!==f.type&&f.key&&(s=n.createHmac(A[f.type],f.key),l(p.bufSeqno,p.seqno,0),s.update(p.bufSeqno),s.update(o),(s=s.digest()).length>f.info.actualLen&&(s=s.slice(0,f.info.actualLen)));var v,g=0;if(!1!==u.instance)if(u.info.authLen>0){var b=n.createCipheriv(A[u.type],u.key,u.iv);b.setAutoPadding(!1);var y=o.slice(0,4);b.setAAD(y),e.push(y),g+=y,v=b.update(o.slice(4)),e.push(v),g+=v.length;var x=b.final();x.length&&(e.push(x),g+=x.length);var w=b.getAuthTag();c=e.push(w),g+=w.length,h(u.iv)}else v=u.instance.update(o),e.push(v),g+=v.length,c=e.push(s),g+=s.length;else c=e.push(o),g=o.length;return e.bytesSent+=g,++p.seqno>W&&(p.seqno=0),i&&i(),c}o(ce,a),ce.prototype.__read=a.prototype._read,ce.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},ce.prototype.__push=a.prototype.push,ce.prototype.push=function(e,t){var i=this.__push(e,t);return this._needContinue=!1===i,i},ce.prototype._cleanup=function(e){this.reset(),this.debug("DEBUG: Parser: Malformed packet"),e&&e(new Error("Malformed packet"))},ce.prototype._transform=function(e,t,i,n){var r,a,o,p,u=!1,l=!1,f=this._state,d=f.incoming,h=f.outgoing,m=d.expect,g=d.decrypt,b=d.decompress,y=e.length,x=0,w=this.debug,E=this,S=0,T=S;for(this.bytesReceived+=y;;){if(void 0!==m.type){if(S>=y)break;if(2===m.type){x=y-S;var A=m.buf.length-m.ptr;A<=x?(e.copy(m.buf,m.ptr,S,S+A),S+=A,a=m.buf,m.buf=void 0,m.ptr=0,m.type=void 0):(e.copy(m.buf,m.ptr,S),m.ptr+=x,S+=x);continue}if(0===m.type){if(S+=d.search.push(e),void 0!==m.type)continue}else if(1===m.type){if(4+ ++m.ptr>255)return this.reset(),w("DEBUG: Parser: Identification string exceeded 255 characters"),i(new Error("Max identification string size exceeded"));if(10!==e[S]){++S===y&&T<S&&(void 0===m.buf?m.buf=e.toString("ascii",T,S):m.buf+=e.toString("ascii",T,S));continue}m.type=void 0,T<S&&(void 0===m.buf?m.buf=e.toString("ascii",T,S):m.buf+=e.toString("ascii",T,S)),a=m.buf,m.buf=void 0,++S}}if(d.status===I){if(!this.readable)return i();if(this.server)if(a){if(83!==a[0]||83!==a[1]||72!==a[2]||45!==a[3])return this.reset(),w("DEBUG: Parser: Bad identification start"),i(new Error("Bad identification start"));d.status=D,w("DEBUG: Parser: IN_INIT (waiting for rest of identification)")}else w("DEBUG: Parser: IN_INIT (waiting for identification begin)"),ve(this,2,4);else{w("DEBUG: Parser: IN_INIT");var O=d.search=new c(Q);O.on("info",(function e(t,i,n,r){i&&(void 0===d.greeting?d.greeting=i.toString("binary",n,r):d.greeting+=i.toString("binary",n,r)),t&&(m.type=void 0,d.search.removeListener("info",e))})),O.maxMatches=1,ve(this,0),d.status=D}}else if(d.status===D)w("DEBUG: Parser: IN_GREETING"),d.search=void 0,T=S,ve(this,1),d.status=j;else{if(d.status===j){w("DEBUG: Parser: IN_HEADER"),13===a.charCodeAt(a.length-1)&&(a=a.slice(0,-1));var C=a.indexOf("-"),R=a.indexOf(" "),B={greeting:d.greeting,identRaw:"SSH-"+a,versions:{protocol:a.substr(0,C),software:-1===R?a.substring(C+1):a.substring(C+1,R)},comments:R>-1?a.substring(R+1):void 0};if(d.greeting=void 0,"1.99"!==B.versions.protocol&&"2.0"!==B.versions.protocol)return this.reset(),w("DEBUG: Parser: protocol version not supported: "+B.versions.protocol),i(new Error("Protocol version not supported"));if(this.emit("header",B),d.status===I)return;var P=B.identRaw,L=B.versions.software;this.debug("DEBUG: Remote ident: "+s(P));for(var K,V=0;V<U;++V)"string"==typeof(K=N[V])[0]?L===K[0]&&(this.remoteBugs|=K[1]):K[0].test(L)&&(this.remoteBugs|=K[1]);return d.identRaw=P,this.bytesReceived-=y-S,be(this,(function(){S===y?i():E._transform(e.slice(S),t,i)})),void(d.status=H)}if(d.status===H)w("DEBUG: Parser: IN_PACKETBEFORE (expecting "+(r=g.instance?g.info.blockLen:8)+")"),ve(this,2,r,g.buf),d.status=M;else if(d.status===M){if(w("DEBUG: Parser: IN_PACKET"),g.instance?((l=g.info.authLen>0)||(a=me(this,a)),r=g.info.blockLen):(l=!1,r=8),!1===(p=v(a,0,this,i)))return;var Y,J=d.hmac.info,ee=p+4+(Y=J?J.actualLen:0),te=this.maxPacketSize;if(b.instance&&(te+=5*(this.maxPacketSize/16384+1)+6),p>te||ee<16+Y||(p+(l?0:4))%r!=0)return this.disconnect(k.PROTOCOL_ERROR),w("DEBUG: Parser: Bad packet length ("+ee+")"),i(new Error("Bad packet length"));d.pktLen=p;var ie=d.pktLen+4-r;if(l?(g.instance.setAAD(a.slice(0,4)),w("DEBUG: Parser: pktLen:"+d.pktLen+",remainLen:"+ie)):(d.padLen=a[4],w("DEBUG: Parser: pktLen:"+d.pktLen+",padLen:"+d.padLen+",remainLen:"+ie)),ie>0)d.pktExtra=l?a.slice(4):a.slice(5),ve(this,2,ie),d.status=q;else{if(!(ie<0)){u=!0,d.status=q;continue}d.status=H}}else if(d.status===q){w("DEBUG: Parser: IN_PACKETDATA"),g.instance?(l=g.info.authLen>0,u?u=!1:l||(a=me(this,a))):(l=!1,u=!1);var ne=d.pktLen-d.padLen-1;if(d.pktExtra?(o=Buffer.allocUnsafe(d.pktExtra.length+a.length),d.pktExtra.copy(o),a.copy(o,d.pktExtra.length),d.payload=o.slice(0,ne)):(o=l?a.slice(4):a.slice(5),d.payload=a.slice(5,5+ne)),void 0!==d.hmac.info){var re=g.info.authLen||d.hmac.info.actualLen;w("DEBUG: Parser: HMAC size:"+re),ve(this,2,re,d.hmac.buf),d.status=F,d.packet=o}else d.status=z;d.pktExtra=void 0,o=void 0}else if(d.status===F){if(w("DEBUG: Parser: IN_PACKETDATAVERIFY"),!he(this,a))return this.reset(),w("DEBUG: Parser: IN_PACKETDATAVERIFY (Invalid HMAC)"),i(new Error("Invalid HMAC"));w("DEBUG: Parser: IN_PACKETDATAVERIFY (Valid HMAC)"),d.status=z,d.packet=void 0}else if(d.status===z){if(b.instance){if(!n){w("DEBUG: Parser: Decompressing"),b.instance.write(d.payload);var ae=[],oe=0;return void b.instance.on("readable",(function(){for(var e;e=this.read();)ae.push(e),oe+=e.length})).flush(X,(function(){var n;b.instance.removeAllListeners("readable"),1===ae.length?d.payload=ae[0]:d.payload=Buffer.concat(ae,oe),ae=null,n=S===y?Z:e.slice(S),E._transform(n,t,i,!0)}))}n=!1}this.emit("packet");var ce=d.payload[0];if(w!==se){var pe="DEBUG: Parser: IN_PACKETDATAAFTER, packet: ",ue=f.authsQueue[0],le=null;if(h.status!==$||ce<=4||ce>=20&&ce<=49||(pe+="(enqueued) "),ce===_.KEXDH_INIT)switch(f.kex.type){case"group":le="KEXDH_INIT";break;case"groupex":le="KEXDH_GEX_REQUEST";break;default:le="KEXECDH_INIT"}else if(ce===_.KEXDH_REPLY)switch(f.kex.type){case"group":le="KEXDH_REPLY";break;case"groupex":le="KEXDH_GEX_GROUP";break;default:le="KEXECDH_REPLY"}else ce===_.KEXDH_GEX_GROUP?le="KEXDH_GEX_GROUP":ce===_.KEXDH_GEX_REPLY?le="KEXDH_GEX_REPLY":60===ce?le="password"===ue?"USERAUTH_PASSWD_CHANGEREQ":"keyboard-interactive"===ue?"USERAUTH_INFO_REQUEST":"publickey"===ue?"USERAUTH_PK_OK":"UNKNOWN PACKET 60":61===ce&&(le="keyboard-interactive"===ue?"USERAUTH_INFO_RESPONSE":"UNKNOWN PACKET 61");null===le&&(le=_[ce]),ce!==_.CHANNEL_OPEN&&ce!==_.CHANNEL_REQUEST&&ce!==_.CHANNEL_SUCCESS&&ce!==_.CHANNEL_FAILURE&&ce!==_.CHANNEL_EOF&&ce!==_.CHANNEL_CLOSE&&ce!==_.CHANNEL_DATA&&ce!==_.CHANNEL_EXTENDED_DATA&&ce!==_.CHANNEL_WINDOW_ADJUST&&ce!==_.DISCONNECT&&ce!==_.USERAUTH_REQUEST&&ce!==_.GLOBAL_REQUEST&&w(pe+le)}if(h.status===G||ce<=4||ce>=20&&ce<=49){if(!1===fe(this,i))return;if(d.status===I)return}else if(h.status===$){if(50===d.rekeyQueue.length)return w("DEBUG: Parser: Max incoming re-key queue length reached"),this.disconnect(k.PROTOCOL_ERROR),i(new Error("Incoming re-key queue length limit reached"));var de=d.seqno;++d.seqno>W&&(d.seqno=0),d.rekeyQueue.push([de,d.payload])}d.status=H,d.payload=void 0}}void 0!==a&&(a=void 0)}i()},ce.prototype.reset=function(e){if(this._state){var t=this._state;t.incoming.status=I,t.outgoing.status=K}else this._state={authsQueue:[],hostkeyFormat:void 0,kex:void 0,incoming:{status:I,expectedPacket:void 0,search:void 0,greeting:void 0,seqno:0,pktLen:void 0,padLen:void 0,pktExtra:void 0,payload:void 0,packet:void 0,kexinit:void 0,identRaw:void 0,rekeyQueue:[],ignoreNext:!1,expect:{amount:void 0,type:void 0,ptr:0,buf:void 0},decrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,buf:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},decompress:{instance:!1,type:!1}},outgoing:{status:K,seqno:0,bufSeqno:Buffer.allocUnsafe(4),rekeyQueue:[],kexinit:void 0,kexsecret:void 0,pubkey:void 0,exchangeHash:void 0,sessionId:void 0,sentNEWKEYS:!1,encrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},compress:{instance:!1,type:!1,queue:null}}};e||this.readable&&this.push(null)},ce.prototype.disconnect=function(e){var t=Buffer.alloc(13);return t[0]=_.DISCONNECT,void 0===k[e]&&(e=k.BY_APPLICATION),l(t,e,1),this.debug("DEBUG: Outgoing: Writing DISCONNECT ("+k[e]+")"),Ee(this,t),this.reset(),!1},ce.prototype.ping=function(){return this.debug("DEBUG: Outgoing: Writing ping (GLOBAL_REQUEST: keepalive@openssh.com)"),Ee(this,ee)},ce.prototype.rekey=function(){var e=this._state.outgoing.status;if(e===$)throw new Error("A re-key is already in progress");if(e!==G)throw new Error("Cannot re-key yet");return this.debug("DEBUG: Outgoing: Starting re-key"),be(this)},ce.prototype.requestSuccess=function(e){var t;return Buffer.isBuffer(e)?((t=Buffer.allocUnsafe(1+e.length))[0]=_.REQUEST_SUCCESS,e.copy(t,1)):t=ne,this.debug("DEBUG: Outgoing: Writing REQUEST_SUCCESS"),Ee(this,t)},ce.prototype.requestFailure=function(){return this.debug("DEBUG: Outgoing: Writing REQUEST_FAILURE"),Ee(this,re)},ce.prototype.channelSuccess=function(e){var t=Buffer.allocUnsafe(5);return t[0]=_.CHANNEL_SUCCESS,l(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_SUCCESS ("+e+")"),Ee(this,t)},ce.prototype.channelFailure=function(e){var t=Buffer.allocUnsafe(5);return t[0]=_.CHANNEL_FAILURE,l(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_FAILURE ("+e+")"),Ee(this,t)},ce.prototype.channelEOF=function(e){var t=Buffer.allocUnsafe(5);return t[0]=_.CHANNEL_EOF,l(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_EOF ("+e+")"),Ee(this,t)},ce.prototype.channelClose=function(e){var t=Buffer.allocUnsafe(5);return t[0]=_.CHANNEL_CLOSE,l(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_CLOSE ("+e+")"),Ee(this,t)},ce.prototype.channelWindowAdjust=function(e,t){var i=Buffer.allocUnsafe(9);return i[0]=_.CHANNEL_WINDOW_ADJUST,l(i,e,1),l(i,t,5),this.debug("DEBUG: Outgoing: Writing CHANNEL_WINDOW_ADJUST ("+e+", "+t+")"),Ee(this,i)},ce.prototype.channelData=function(e,t){var i=Buffer.isBuffer(t),n=i?t.length:Buffer.byteLength(t),r=Buffer.allocUnsafe(9+n);return r[0]=_.CHANNEL_DATA,l(r,e,1),l(r,n,5),i?t.copy(r,9):r.write(t,9,n,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_DATA ("+e+")"),Ee(this,r)},ce.prototype.channelExtData=function(e,t,i){var n=Buffer.isBuffer(t),r=n?t.length:Buffer.byteLength(t),a=Buffer.allocUnsafe(13+r);return a[0]=_.CHANNEL_EXTENDED_DATA,l(a,e,1),l(a,i,5),l(a,r,9),n?t.copy(a,13):a.write(t,13,r,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_EXTENDED_DATA ("+e+")"),Ee(this,a)},ce.prototype.channelOpenConfirm=function(e,t,i,n){var r=Buffer.allocUnsafe(17);return r[0]=_.CHANNEL_OPEN_CONFIRMATION,l(r,e,1),l(r,t,5),l(r,i,9),l(r,n,13),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_CONFIRMATION (r:"+e+", l:"+t+")"),Ee(this,r)},ce.prototype.channelOpenFail=function(e,t,i,n){"string"!=typeof i&&(i=""),"string"!=typeof n&&(n="");var r=Buffer.byteLength(i),a=Buffer.byteLength(n),o=9,s=Buffer.allocUnsafe(13+r+4+a);return s[0]=_.CHANNEL_OPEN_FAILURE,l(s,e,1),l(s,t,5),l(s,r,o),o+=4,r&&(s.write(i,o,r,"utf8"),o+=r),l(s,a,o),a&&s.write(n,o+=4,a,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_FAILURE ("+e+")"),Ee(this,s)},ce.prototype.service=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),i=Buffer.allocUnsafe(5+t);return i[0]=_.SERVICE_REQUEST,l(i,t,1),i.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_REQUEST ("+e+")"),Ee(this,i)},ce.prototype.tcpipForward=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(e),r=Buffer.allocUnsafe(23+n+4);return r[0]=_.GLOBAL_REQUEST,l(r,13,1),r.write("tcpip-forward",5,13,"ascii"),r[18]=void 0===i||!0===i?1:0,l(r,n,19),r.write(e,23,n,"ascii"),l(r,t,23+n),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (tcpip-forward)"),Ee(this,r)},ce.prototype.cancelTcpipForward=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(e),r=Buffer.allocUnsafe(30+n+4);return r[0]=_.GLOBAL_REQUEST,l(r,20,1),r.write("cancel-tcpip-forward",5,20,"ascii"),r[25]=void 0===i||!0===i?1:0,l(r,n,26),r.write(e,30,n,"ascii"),l(r,t,30+n),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-tcpip-forward)"),Ee(this,r)},ce.prototype.openssh_streamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(41+i);return n[0]=_.GLOBAL_REQUEST,l(n,31,1),n.write("streamlocal-forward@openssh.com",5,31,"ascii"),n[36]=void 0===t||!0===t?1:0,l(n,i,37),n.write(e,41,i,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (streamlocal-forward@openssh.com)"),Ee(this,n)},ce.prototype.openssh_cancelStreamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(48+i);return n[0]=_.GLOBAL_REQUEST,l(n,38,1),n.write("cancel-streamlocal-forward@openssh.com",5,38,"ascii"),n[43]=void 0===t||!0===t?1:0,l(n,i,44),n.write(e,48,i,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-streamlocal-forward@openssh.com)"),Ee(this,n)},ce.prototype.directTcpip=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(n.srcIP),a=Buffer.byteLength(n.dstIP),o=29,s=Buffer.allocUnsafe(33+r+4+4+a+4);return s[0]=_.CHANNEL_OPEN,l(s,12,1),s.write("direct-tcpip",5,12,"ascii"),l(s,e,17),l(s,t,21),l(s,i,25),l(s,a,o),s.write(n.dstIP,o+=4,a,"ascii"),l(s,n.dstPort,o+=a),l(s,r,o+=4),s.write(n.srcIP,o+=4,r,"ascii"),l(s,n.srcPort,o+=r),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-tcpip)"),Ee(this,s)},ce.prototype.openssh_directStreamLocal=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(n.socketPath),a=47,o=Buffer.allocUnsafe(51+r+4+4);return o[0]=_.CHANNEL_OPEN,l(o,30,1),o.write("direct-streamlocal@openssh.com",5,30,"ascii"),l(o,e,35),l(o,t,39),l(o,i,43),l(o,r,a),o.write(n.socketPath,a+=4,r,"utf8"),o.fill(0,o.length-8),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-streamlocal@openssh.com)"),Ee(this,o)},ce.prototype.openssh_noMoreSessions=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.allocUnsafe(34);return t[0]=_.GLOBAL_REQUEST,l(t,28,1),t.write("no-more-sessions@openssh.com",5,28,"ascii"),t[33]=void 0===e||!0===e?1:0,this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (no-more-sessions@openssh.com)"),Ee(this,t)},ce.prototype.session=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.allocUnsafe(24);return n[0]=_.CHANNEL_OPEN,l(n,7,1),n.write("session",5,7,"ascii"),l(n,e,12),l(n,t,16),l(n,i,20),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", session)"),Ee(this,n)},ce.prototype.windowChange=function(e,t,i,n,r){if(this.server)throw new Error("Client-only method called in server mode");var a=Buffer.allocUnsafe(39);return a[0]=_.CHANNEL_REQUEST,l(a,e,1),l(a,13,5),a.write("window-change",9,13,"ascii"),a[22]=0,l(a,i,23),l(a,t,27),l(a,r,31),l(a,n,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", window-change)"),Ee(this,a)},ce.prototype.pty=function(e,t,i,n,r,a,o,s){if(this.server)throw new Error("Client-only method called in server mode");a&&a.length||(a="vt100"),!o||Buffer.isBuffer(o)||Array.isArray(o)||"object"!=typeof o||(o=function(e){for(var t,i,n,r=/^\d+$/,a=Object.keys(e),o=0,s=[],c=0,p=a.length;c<p;++c)t=a[c],(i=O[t])&&!r.test(t)&&"number"==typeof e[t]&&"TTY_OP_END"!==t&&(n=e[t],s[o++]=i,s[o++]=n>>>24&255,s[o++]=n>>>16&255,s[o++]=n>>>8&255,s[o++]=255&n);return s[o]=O.TTY_OP_END,s}(o)),o&&o.length||(o=ae);var c=a.length,p=o.length,u=21,f=Buffer.allocUnsafe(21+c+4+4+4+4+4+p);if(f[0]=_.CHANNEL_REQUEST,l(f,e,1),l(f,7,5),f.write("pty-req",9,7,"ascii"),f[16]=void 0===s||!0===s?1:0,l(f,c,17),f.write(a,21,c,"utf8"),l(f,i,u+=c),l(f,t,u+=4),l(f,r,u+=4),l(f,n,u+=4),l(f,p,u+=4),u+=4,Array.isArray(o))for(var d=0;d<p;++d)f[u++]=o[d];else Buffer.isBuffer(o)&&o.copy(f,u);return this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", pty-req)"),Ee(this,f)},ce.prototype.shell=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.allocUnsafe(15);return i[0]=_.CHANNEL_REQUEST,l(i,e,1),l(i,5,5),i.write("shell",9,5,"ascii"),i[14]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", shell)"),Ee(this,i)},ce.prototype.exec=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.isBuffer(t)?t.length:Buffer.byteLength(t),r=Buffer.allocUnsafe(18+n);return r[0]=_.CHANNEL_REQUEST,l(r,e,1),l(r,4,5),r.write("exec",9,4,"ascii"),r[13]=void 0===i||!0===i?1:0,l(r,n,14),Buffer.isBuffer(t)?t.copy(r,18):r.write(t,18,n,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exec)"),Ee(this,r)},ce.prototype.signal=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if("SIG"===(t=t.toUpperCase()).slice(0,3)&&(t=t.substring(3)),-1===C.indexOf(t))throw new Error("Invalid signal: "+t);var i=t.length,n=Buffer.allocUnsafe(20+i);return n[0]=_.CHANNEL_REQUEST,l(n,e,1),l(n,6,5),n.write("signal",9,6,"ascii"),n[15]=0,l(n,i,16),n.write(t,20,i,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", signal)"),Ee(this,n)},ce.prototype.env=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(t),a=Buffer.isBuffer(i)?i.length:Buffer.byteLength(i),o=Buffer.allocUnsafe(17+r+4+a);return o[0]=_.CHANNEL_REQUEST,l(o,e,1),l(o,3,5),o.write("env",9,3,"ascii"),o[12]=void 0===n||!0===n?1:0,l(o,r,13),o.write(t,17,r,"ascii"),l(o,a,17+r),Buffer.isBuffer(i)?i.copy(o,17+r+4):o.write(i,17+r+4,a,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", env)"),Ee(this,o)},ce.prototype.x11Forward=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(t.protocol),r=Buffer.byteLength(t.cookie),a=Buffer.allocUnsafe(22+n+4+r+4);a[0]=_.CHANNEL_REQUEST,l(a,e,1),l(a,7,5),a.write("x11-req",9,7,"ascii"),a[16]=void 0===i||!0===i?1:0,a[17]=t.single?1:0,l(a,n,18);var o=22;return Buffer.isBuffer(t.protocol)?t.protocol.copy(a,o):a.write(t.protocol,o,n,"utf8"),l(a,r,o+=n),o+=4,Buffer.isBuffer(t.cookie)?t.cookie.copy(a,o):a.write(t.cookie,o,r,"binary"),o+=r,l(a,t.screen||0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", x11-req)"),Ee(this,a)},ce.prototype.subsystem=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(t),r=Buffer.allocUnsafe(23+n);return r[0]=_.CHANNEL_REQUEST,l(r,e,1),l(r,9,5),r.write("subsystem",9,9,"ascii"),r[18]=void 0===i||!0===i?1:0,l(r,n,19),r.write(t,23,n,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", subsystem: "+t+")"),Ee(this,r)},ce.prototype.openssh_agentForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.allocUnsafe(36);return i[0]=_.CHANNEL_REQUEST,l(i,e,1),l(i,26,5),i.write("auth-agent-req@openssh.com",9,26,"ascii"),i[35]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", auth-agent-req@openssh.com)"),Ee(this,i)},ce.prototype.authPassword=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.byteLength(t),r=0,a=Buffer.allocUnsafe(5+i+4+14+4+8+1+4+n);return a[r]=_.USERAUTH_REQUEST,l(a,i,++r),a.write(e,r+=4,i,"utf8"),l(a,14,r+=i),a.write("ssh-connection",r+=4,14,"ascii"),l(a,8,r+=14),a.write("password",r+=4,8,"ascii"),a[r+=8]=0,l(a,n,++r),a.write(t,r+=4,n,"utf8"),this._state.authsQueue.push("password"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (password)"),Ee(this,a)},ce.prototype.authPK=function(e,t,i){if(this.server)throw new Error("Client-only method called in server mode");var n,r=this,a=this._state.outgoing;"function"==typeof t.getPublicSSH?(n=t.type,t=t.getPublicSSH()):n=t.toString("ascii",4,4+u(t,0));var o=Buffer.byteLength(e),s=Buffer.byteLength(n),c=t.length,p=a.sessionId.length,f=0,d=Buffer.allocUnsafe((i?4+p:0)+1+4+o+4+14+4+9+1+4+s+4+c);return i?(l(d,p,f),a.sessionId.copy(d,f+=4),d[f+=p]=_.USERAUTH_REQUEST):d[f]=_.USERAUTH_REQUEST,l(d,o,++f),d.write(e,f+=4,o,"utf8"),l(d,14,f+=o),d.write("ssh-connection",f+=4,14,"ascii"),l(d,9,f+=14),d.write("publickey",f+=4,9,"ascii"),d[f+=9]=i?1:0,l(d,s,++f),d.write(n,f+=4,s,"ascii"),l(d,c,f+=s),t.copy(d,f+=4),i?(i(d,(function(i){if(!1===(i=ke(i,n)))throw new Error("Error while converting handshake signature");var a=i.length,p=Buffer.allocUnsafe(5+o+4+14+4+9+1+4+s+4+c+4+4+s+4+a);return p[f=0]=_.USERAUTH_REQUEST,l(p,o,++f),p.write(e,f+=4,o,"utf8"),l(p,14,f+=o),p.write("ssh-connection",f+=4,14,"ascii"),l(p,9,f+=14),p.write("publickey",f+=4,9,"ascii"),p[f+=9]=1,l(p,s,++f),p.write(n,f+=4,s,"ascii"),l(p,c,f+=s),t.copy(p,f+=4),l(p,4+s+4+a,f+=c),l(p,s,f+=4),p.write(n,f+=4,s,"ascii"),l(p,a,f+=s),i.copy(p,f+=4),r._state.authsQueue.push("publickey"),r.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey)"),Ee(r,p)})),!0):(this._state.authsQueue.push("publickey"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey -- check)"),Ee(this,d))},ce.prototype.authHostbased=function(e,t,i,n,r){if(this.server)throw new Error("Client-only method called in server mode");var a,o=this,s=this._state.outgoing;"function"==typeof t.getPublicSSH?(a=t.type,t=t.getPublicSSH()):a=t.toString("ascii",4,4+u(t,0));var c=Buffer.byteLength(e),p=Buffer.byteLength(a),f=t.length,d=s.sessionId.length,h=Buffer.byteLength(i),m=Buffer.byteLength(n),v=0,g=Buffer.allocUnsafe(4+d+1+4+c+4+14+4+9+4+p+4+f+4+h+4+m);return l(g,d,v),s.sessionId.copy(g,v+=4),g[v+=d]=_.USERAUTH_REQUEST,l(g,c,++v),g.write(e,v+=4,c,"utf8"),l(g,14,v+=c),g.write("ssh-connection",v+=4,14,"ascii"),l(g,9,v+=14),g.write("hostbased",v+=4,9,"ascii"),l(g,p,v+=9),g.write(a,v+=4,p,"ascii"),l(g,f,v+=p),t.copy(g,v+=4),l(g,h,v+=f),g.write(i,v+=4,h,"ascii"),l(g,m,v+=h),g.write(n,v+=4,m,"utf8"),r(g,(function(e){if(!1===(e=ke(e,a)))throw new Error("Error while converting handshake signature");var t=e.length,i=Buffer.allocUnsafe(g.length-d+t);return g.copy(i,0,4+d),l(i,t,i.length-t-4),e.copy(i,i.length-t),o._state.authsQueue.push("hostbased"),o.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (hostbased)"),Ee(o,i)})),!0},ce.prototype.authKeyboard=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),i=0,n=Buffer.allocUnsafe(5+t+4+14+4+20+4+4);return n[i]=_.USERAUTH_REQUEST,l(n,t,++i),n.write(e,i+=4,t,"utf8"),l(n,14,i+=t),n.write("ssh-connection",i+=4,14,"ascii"),l(n,20,i+=14),n.write("keyboard-interactive",i+=4,20,"ascii"),l(n,0,i+=20),l(n,0,i+=4),this._state.authsQueue.push("keyboard-interactive"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (keyboard-interactive)"),Ee(this,n)},ce.prototype.authNone=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),i=0,n=Buffer.allocUnsafe(5+t+4+14+4+4);return n[i]=_.USERAUTH_REQUEST,l(n,t,++i),n.write(e,i+=4,t,"utf8"),l(n,14,i+=t),n.write("ssh-connection",i+=4,14,"ascii"),l(n,4,i+=14),n.write("none",i+=4,4,"ascii"),this._state.authsQueue.push("none"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (none)"),Ee(this,n)},ce.prototype.authInfoRes=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t,i,n,r=0,a=0;if(e)for(n=0,i=e.length;n<i;++n)r+=4+Buffer.byteLength(e[n]);var o=Buffer.allocUnsafe(5+r);if(o[a++]=_.USERAUTH_INFO_RESPONSE,l(o,e?e.length:0,a),e)for(a+=4,n=0,i=e.length;n<i;++n)t=Buffer.byteLength(e[n]),l(o,t,a),a+=4,t&&(o.write(e[n],a,t,"utf8"),a+=t);return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_RESPONSE"),Ee(this,o)},ce.prototype.serviceAccept=function(e){if(!this.server)throw new Error("Server-only method called in client mode");var t=e.length,i=Buffer.allocUnsafe(5+t);if(i[0]=_.SERVICE_ACCEPT,l(i,t,1),i.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_ACCEPT ("+e+")"),Ee(this,i),this.server&&this.banner&&"ssh-userauth"===e){var n=Buffer.byteLength(this.banner),r=5+n+4,a=Buffer.allocUnsafe(r);a[0]=_.USERAUTH_BANNER,l(a,n,1),a.write(this.banner,5,n,"utf8"),a.fill(0,r-4),this.debug("DEBUG: Outgoing: Writing USERAUTH_BANNER"),Ee(this,a),this.banner=void 0}},ce.prototype.forwardedTcpip=function(e,t,i,n){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(n.boundAddr),a=Buffer.byteLength(n.remoteAddr),o=36+r,s=Buffer.allocUnsafe(36+r+4+4+a+4);return s[0]=_.CHANNEL_OPEN,l(s,15,1),s.write("forwarded-tcpip",5,15,"ascii"),l(s,e,20),l(s,t,24),l(s,i,28),l(s,r,32),s.write(n.boundAddr,36,r,"ascii"),l(s,n.boundPort,o),l(s,a,o+=4),s.write(n.remoteAddr,o+=4,a,"ascii"),l(s,n.remotePort,o+=a),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-tcpip)"),Ee(this,s)},ce.prototype.x11=function(e,t,i,n){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(n.originAddr),a=24+r,o=Buffer.allocUnsafe(24+r+4);return o[0]=_.CHANNEL_OPEN,l(o,3,1),o.write("x11",5,3,"ascii"),l(o,e,8),l(o,t,12),l(o,i,16),l(o,r,20),o.write(n.originAddr,24,r,"ascii"),l(o,n.originPort,a),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", x11)"),Ee(this,o)},ce.prototype.openssh_authAgent=function(e,t,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.allocUnsafe(39);return n[0]=_.CHANNEL_OPEN,l(n,22,1),n.write("auth-agent@openssh.com",5,22,"ascii"),l(n,e,27),l(n,t,31),l(n,i,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", auth-agent@openssh.com)"),Ee(this,n)},ce.prototype.openssh_forwardedStreamLocal=function(e,t,i,n){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(n.socketPath),a=Buffer.allocUnsafe(54+r+4);return a[0]=_.CHANNEL_OPEN,l(a,33,1),a.write("forwarded-streamlocal@openssh.com",5,33,"ascii"),l(a,e,38),l(a,t,42),l(a,i,46),l(a,r,50),a.write(n.socketPath,54,r,"utf8"),l(a,0,54+r),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-streamlocal@openssh.com)"),Ee(this,a)},ce.prototype.exitStatus=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.allocUnsafe(25);return i[0]=_.CHANNEL_REQUEST,l(i,e,1),l(i,11,5),i.write("exit-status",9,11,"ascii"),i[20]=0,l(i,t,21),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-status)"),Ee(this,i)},ce.prototype.exitSignal=function(e,t,i,n){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(t),a=n?Buffer.byteLength(n):0,o=25+r,s=Buffer.allocUnsafe(25+r+1+4+a+4);return s[0]=_.CHANNEL_REQUEST,l(s,e,1),l(s,11,5),s.write("exit-signal",9,11,"ascii"),s[20]=0,l(s,r,21),s.write(t,25,r,"utf8"),s[o++]=i?1:0,l(s,a,o),o+=4,a&&(s.write(n,o,a,"utf8"),o+=a),l(s,0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-signal)"),Ee(this,s)},ce.prototype.authFailure=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var i;if(!this._state.authsQueue.length)throw new Error("No auth in progress");if("boolean"==typeof e&&(t=e,e=void 0),e){i=[];for(var n=0,r=e.length;n<r;++n)"none"!==e[n].toLowerCase()&&i.push(e[n]);i=i.join(",")}else i="";var a=i.length,o=Buffer.allocUnsafe(5+a+1);return o[0]=_.USERAUTH_FAILURE,l(o,a,1),o.write(i,5,a,"ascii"),o[5+a]=!0===t?1:0,this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_FAILURE"),Ee(this,o)},ce.prototype.authSuccess=function(){if(!this.server)throw new Error("Server-only method called in client mode");if(!this._state.authsQueue.length)throw new Error("No auth in progress");var e=this._state,t=e.outgoing,i=e.incoming;e.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_SUCCESS");var n=Ee(this,ie);return"zlib@openssh.com"===t.compress.type&&(t.compress.instance=r.createDeflate(V),t.compress.queue=[]),"zlib@openssh.com"===i.decompress.type&&(i.decompress.instance=r.createInflate(V)),n},ce.prototype.authPKOK=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var i=this._state.authsQueue;if(!i.length||"publickey"!==i[0])throw new Error('"publickey" auth not in progress');var n=e.length,r=t.length,a=Buffer.allocUnsafe(5+n+4+r);return a[0]=_.USERAUTH_PK_OK,l(a,n,1),a.write(e,5,n,"ascii"),l(a,r,5+n),t.copy(a,5+n+4),this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_PK_OK"),Ee(this,a)},ce.prototype.authPasswdChg=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.byteLength(e),n=t?t.length:0,r=0,a=Buffer.allocUnsafe(5+i+4+n);return a[r]=_.USERAUTH_PASSWD_CHANGEREQ,l(a,i,++r),a.write(e,r+=4,i,"utf8"),l(a,n,r+=i),n&&a.write(t,r+=4,n,"ascii"),this.debug("DEBUG: Outgoing: Writing USERAUTH_PASSWD_CHANGEREQ"),Ee(this,a)},ce.prototype.authInfoReq=function(e,t,i){if(!this.server)throw new Error("Server-only method called in client mode");var n,r,a,o,s=0,c=e?Buffer.byteLength(e):0,p=t?Buffer.byteLength(t):0,u=0;for(o=0,a=i.length;o<a;++o)s+=4+Buffer.byteLength(i[o].prompt)+1;var f=Buffer.allocUnsafe(5+c+4+p+4+4+s);for(f[u++]=_.USERAUTH_INFO_REQUEST,l(f,c,u),u+=4,e&&(f.write(e,u,c,"utf8"),u+=c),l(f,p,u),u+=4,t&&(f.write(t,u,p,"utf8"),u+=p),l(f,0,u),u+=4,l(f,i.length,u),u+=4,o=0,a=i.length;o<a;++o)r=i[o],n=Buffer.byteLength(r.prompt),l(f,n,u),u+=4,n&&(f.write(r.prompt,u,n,"utf8"),u+=n),f[u++]=r.echo?1:0;return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_REQUEST"),Ee(this,f)};var Se="function"==typeof n.randomFillSync?n.randomFillSync:function(e,t,i){n.randomBytes(i).copy(e,t)};function ke(e,t){switch(t){case"ssh-dss":return g(e);case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return b(e)}return e}var Te="function"==typeof n.timingSafeEqual?function(e,t){return e.length!==t.length?(n.timingSafeEqual(e,e),!1):n.timingSafeEqual(e,t)}:function(e,t){var i;e.length===t.length?i=0:(i=1,t=e);for(var n=0,r=e.length;n<r;++n)i|=e[n]^t[n];return 0===i};function Ae(e,t){switch(e){case"curve25519-sha256":case"curve25519-sha256@libssh.org":if(!R)break;return this.type="25519",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp256":return this.type="ecdh",this.name="prime256v1",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp384":return this.type="ecdh",this.name="secp384r1",this.hash="sha384",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp521":return this.type="ecdh",this.name="secp521r1",this.hash="sha512",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"diffie-hellman-group1-sha1":return this.type="group",this.name="modp2",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha1":return this.type="group",this.name="modp14",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha256":return this.type="group",this.name="modp14",this.hash="sha256",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group16-sha512":return this.type="group",this.name="modp16",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group18-sha512":return this.type="group",this.name="modp18",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group-exchange-sha1":return this.type="groupex",this.hash="sha1",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null);case"diffie-hellman-group-exchange-sha256":return this.type="groupex",this.hash="sha256",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null)}throw new Error("Unsupported key exchange algorithm: "+e)}function Oe(e){for(var t,i=0,n=e.length;0===e[i];)++i,--n;return 128&e[i]?((t=Buffer.allocUnsafe(1+n))[0]=0,e.copy(t,1,i),e=t):n!==e.length&&(t=Buffer.allocUnsafe(n),e.copy(t,0,i),e=t),e}Ae.prototype.setDHParams=function(e,t){if("groupex"===this.type){if(!Buffer.isBuffer(e))throw new Error("Invalid prime value");if(!Buffer.isBuffer(t))throw new Error("Invalid generator value");this._prime=e,this._generator=t}},Ae.prototype.getDHParams=function(){if("groupex"===this.type&&this._kex)return{prime:Oe(this._kex.getPrime()),generator:Oe(this._kex.getGenerator())}},Ae.prototype.generateKeys=function(){switch(this.type){case"25519":this._keys||(this._keys=n.generateKeyPairSync("x25519"));break;case"ecdh":this._kex||(this._kex=n.createECDH(this.name),this._public=this._kex.generateKeys());break;case"group":case"groupex":this._kex||(this.name?this._kex=n.createDiffieHellmanGroup(this.name):this._prime&&this._generator&&(this._kex=n.createDiffieHellman(this._prime,this._generator)),this._kex&&(this._public=this._kex.generateKeys()))}},Ae.prototype.getPublicKey=function(){var e;switch(this.generateKeys(),this.type){case"25519":return(e=this._keys.publicKey.export({type:"spki",format:"der"})).slice(-32);case"ecdh":case"group":case"groupex":e=this._public}if(e)return this.convertPublicKey(e)},Ae.prototype.convertPublicKey=function(e){for(var t,i=0,n=e.length;0===e[i];)++i,--n;switch(this.type){case"25519":if(32===e.length)return e;break;default:if(128&e[i])return(t=Buffer.allocUnsafe(1+n))[0]=0,e.copy(t,1,i),t}return n!==e.length&&(t=Buffer.allocUnsafe(n),e.copy(t,0,i),e=t),e},Ae.prototype.computeSecret=function(e){switch(this.generateKeys(),this.type){case"25519":try{var t=new p.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.110"),t.endSequence(),t.startSequence(p.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),Oe(n.diffieHellman({privateKey:this._keys.privateKey,publicKey:n.createPublicKey({key:t.buffer,type:"spki",format:"der"})}))}catch(e){return e}break;case"ecdh":case"group":case"groupex":try{return Oe(this._kex.computeSecret(e))}catch(e){return e}}},e.exports=ce,e.exports._send=Ee},8013:(e,t,i)=>{var n=i(476).Ber,r=i(33).readUInt32BE,a=i(33).writeUInt32BE;function o(e,t,i,n,a,o){i&&!Buffer.isBuffer(i)&&"string"!=typeof i&&("number"==typeof a&&(o=a),a=n,n=i,i=void 0),t||(t=0);var s,c,p=e.length,u=p-t;return t<0||t>=p||u<4||(s=r(e,t))>(o||1/0)||u<4+s?(n&&n._cleanup(a),!1):(c=(t+=4)+s,e._pos=c,i?Buffer.isBuffer(i)?(e.copy(i,0,t,c),i):e.toString(i,t,c):e.slice(t,c))}e.exports={iv_inc:function(e){var t=12,i=0;do{if(255!==(i=e[--t]))return void(e[t]=++i);e[t]=0}while(t>4)},readInt:function(e,t,i,n){var a=e.length;return t<0||t>=a||a-t<4?(i&&i._cleanup(n),!1):r(e,t)},readString:o,parseKey:i(8819).parseKey,sigSSHToASN1:function(e,t,i,r){var a;switch(t){case"ssh-dss":if(e.length>40)return e;(a=new n.Writer).startSequence();var s=e.slice(0,20),c=e.slice(20);if(128&s[0]){var p=Buffer.allocUnsafe(21);p[0]=0,s.copy(p,1),s=p}else 0!==s[0]||128&s[1]||(s=s.slice(1));if(128&c[0]){var u=Buffer.allocUnsafe(21);u[0]=0,c.copy(u,1),c=u}else 0!==c[0]||128&c[1]||(c=c.slice(1));return a.writeBuffer(s,n.Integer),a.writeBuffer(c,n.Integer),a.endSequence(),a.buffer;case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return!1!==(s=o(e,0,i,r))&&!1!==(c=o(e,e._pos,i,r))&&((a=new n.Writer).startSequence(),a.writeBuffer(s,n.Integer),a.writeBuffer(c,n.Integer),a.endSequence(),a.buffer);default:return e}},DSASigBERToBare:function(e){if(e.length<=40)return e;var t=new n.Reader(e);t.readSequence();var i=t.readString(n.Integer,!0),r=t.readString(n.Integer,!0),a=0,o=0;if(i.length<20){var s=Buffer.allocUnsafe(20);i.copy(s,1),(i=s)[0]=0}if(r.length<20){var c=Buffer.allocUnsafe(20);r.copy(c,1),(r=c)[0]=0}i.length>20&&0===i[0]&&(a=1),r.length>20&&0===r[0]&&(o=1);var p=Buffer.allocUnsafe(i.length-a+(r.length-o));return i.copy(p,0,a),r.copy(p,i.length-a,o),p},ECDSASigASN1ToSSH:function(e){if(0===e[0])return e;var t=new n.Reader(e);t.readSequence();var i=t.readString(n.Integer,!0),r=t.readString(n.Integer,!0);if(null===i||null===r)return!1;var o=Buffer.allocUnsafe(4+i.length+4+r.length);return a(o,i.length,0),i.copy(o,4),a(o,r.length,4+i.length),r.copy(o,8+i.length),o}}},5129:e=>{"use strict";e.exports={i8:"0.4.10"}},491:(e,t,i)=>{var n=i(1669).inherits,r=i(2413).Duplex,a=i(2413).Readable,o=i(2413).Writable,s=i(816).constants.CHANNEL_EXTENDED_DATATYPE.STDERR,c=2097152,p=1048576,u=["CHANNEL_EOF","CHANNEL_CLOSE","CHANNEL_DATA","CHANNEL_EXTENDED_DATA","CHANNEL_WINDOW_ADJUST","CHANNEL_SUCCESS","CHANNEL_FAILURE","CHANNEL_REQUEST"],l=u.length;function f(e,t,i){var n={highWaterMark:c,allowHalfOpen:!i||i&&!1!==i.allowHalfOpen};this.allowHalfOpen=n.allowHalfOpen,r.call(this,n);var o=this,s=i&&i.server;this.server=s,this.type=e.type,this.subtype=void 0;var f,m,v,g,b,y=this.incoming=e.incoming,x=y.id,w=this.outgoing=e.outgoing,E=this._callbacks=[];this._client=t,this._hasX11=!1;var _=t._channels,S=t._sshstream;function k(){o._waitClientDrain&&(o._waitClientDrain=!1,o._waitWindow||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))}function T(){o.eof(),(s||!s&&!o.allowHalfOpen)&&o.close(),o.writable=!1}function A(){o.readable=!1}t._sock.on("drain",k),S.once("CHANNEL_EOF:"+x,(function(){"open"===y.state&&(y.state="eof",o.readable&&o.push(null),!s&&o.stderr.readable&&o.stderr.push(null))})).once("CHANNEL_CLOSE:"+x,(function(){if("closed"!==y.state){y.state="closed",o.readable&&o.push(null),s&&o.stderr.writable?o.stderr.end():!s&&o.stderr.readable&&o.stderr.push(null),"open"!==w.state&&"eof"!==w.state||o.close(),"closing"===w.state&&(w.state="closed"),delete _[x];var e=o._writableState;t._sock.removeListener("drain",k),e.ending||e.finished||o.end(),o._callbacks=[];for(var i=0;i<E.length;++i)E[i](!0);for(E=o._callbacks,s?o.readable?o.once("end",(function(){o.emit("close")})):o.emit("close"):(o.readable?o.once("end",(function(){null===f?o.emit("close",f,m,v,g,b):o.emit("close",f)})):null===f?o.emit("close",f,m,v,g,b):o.emit("close",f),o.stderr.readable?o.stderr.once("end",(function(){o.stderr.emit("close")})):o.stderr.emit("close")),i=0;i<l;++i)S.removeAllListeners(u[i]+":"+x)}})).on("CHANNEL_DATA:"+x,(function(e){0!==y.window&&(y.window-=e.length,o.push(e)?y.window<=p&&d(o):o._waitChanDrain=!0)})).on("CHANNEL_WINDOW_ADJUST:"+x,(function(e){w.window+=e,o._waitWindow&&(o._waitWindow=!1,o._waitClientDrain||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))})).on("CHANNEL_SUCCESS:"+x,(function(){s?(S._kalast=Date.now(),S._kacnt=0):t._resetKA(),E.length&&E.shift()(!1)})).on("CHANNEL_FAILURE:"+x,(function(){s?(S._kalast=Date.now(),S._kacnt=0):t._resetKA(),E.length&&E.shift()(!0)})).on("CHANNEL_REQUEST:"+x,(function(e){if(!s){if("exit-status"===e.request)return void o.emit("exit",f=e.code);if("exit-signal"===e.request)return void o.emit("exit",f=null,m="SIG"+e.signal,v=e.coredump,g=e.description,b=e.lang)}e.wantReply&&S.channelFailure(w.id)})),this.stdin=this.stdout=this,s?this.stderr=new h(this):(this.stderr=new a(n),this.stderr._read=function(e){o._waitChanDrain&&(o._waitChanDrain=!1,y.window<=p&&d(o))},S.on("CHANNEL_EXTENDED_DATA:"+x,(function(e,t){0!==y.window&&(y.window-=t.length,o.stderr.push(t)?y.window<=p&&d(o):o._waitChanDrain=!0)}))),this._waitClientDrain=!1,this._waitWindow=!1,this._waitChanDrain=!1,this._chunk=void 0,this._chunkcb=void 0,this._chunkErr=void 0,this._chunkcbErr=void 0,this.on("finish",T).on("prefinish",T),this.on("end",A).on("close",A)}function d(e){if("closed"===e.outgoing.state)return!0;var t=c-e.incoming.window;return t<=0||(e.incoming.window+=t,e._client._sshstream.channelWindowAdjust(e.outgoing.id,t))}function h(e){o.call(this,{highWaterMark:c}),this._channel=e}n(f,r),f.prototype.eof=function(){var e=!0,t=this.outgoing;return"open"===t.state&&(t.state="eof",e=this._client._sshstream.channelEOF(t.id)),e},f.prototype.close=function(){var e=!0,t=this.outgoing;return"open"!==t.state&&"eof"!==t.state||(t.state="closing",e=this._client._sshstream.channelClose(t.id)),e},f.prototype._read=function(e){this._waitChanDrain&&(this._waitChanDrain=!1,this.incoming.window<=p&&d(this))},f.prototype._write=function(e,t,i){var n,r,a,o=this._client._sshstream,s=this.outgoing,c=s.packetSize,p=s.id,u=s.window,l=e.length,f=0;if("open"===s.state){for(;l-f>0&&u>0;)if((a=l-f)>u&&(a=u),a>c&&(a=c),n=o.channelData(p,e.slice(f,f+a)),f+=a,u-=a,!n){this._waitClientDrain=!0,this._chunk=void 0,this._chunkcb=i;break}if(s.window=u,l-f>0)return 0===u&&(this._waitWindow=!0),f>0?(r=Buffer.allocUnsafe(l-f),e.copy(r,0,f),this._chunk=r):this._chunk=e,void(this._chunkcb=i);this._waitClientDrain||i()}},f.prototype.destroy=function(){this.end()},f.prototype.setWindow=function(e,t,i,n){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||"shell"!==this.subtype&&"exec"!==this.subtype||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.windowChange(this.outgoing.id,e,t,i,n)},f.prototype.signal=function(e){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.signal(this.outgoing.id,e)},f.prototype.exit=function(e,t,i){if(!this.server)throw new Error("Server-only method called in client mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||("number"==typeof e?this._client._sshstream.exitStatus(this.outgoing.id,e):this._client._sshstream.exitSignal(this.outgoing.id,e,t,i))},f.MAX_WINDOW=c,f.PACKET_SIZE=32768,n(h,o),h.prototype._write=function(e,t,i){var n,r,a,o=this._channel,c=o._client._sshstream,p=o.outgoing,u=p.packetSize,l=p.id,f=p.window,d=e.length,h=0;if("open"===o.outgoing.state){for(;d-h>0&&f>0;)if((a=d-h)>f&&(a=f),a>u&&(a=u),n=c.channelExtData(l,e.slice(h,h+a),s),h+=a,f-=a,!n){o._waitClientDrain=!0,o._chunkErr=void 0,o._chunkcbErr=i;break}if(p.window=f,d-h>0)return 0===f&&(o._waitWindow=!0),h>0?(r=Buffer.allocUnsafe(d-h),e.copy(r,0,h),o._chunkErr=r):o._chunkErr=e,void(o._chunkcbErr=i);o._waitClientDrain||i()}},e.exports=f},2519:(e,t,i)=>{var n=i(1669).inherits,r=i(8614).EventEmitter;function a(e){var t=this;r.call(this),this._stream=e,e.on("error",(function(e){t.emit("error",e)})).on("end",(function(){t.emit("end")})).on("close",(function(){t.emit("close")})).on("continue",(function(){t.emit("continue")}))}n(a,r),a.prototype.end=function(){return this._stream.end()},a.prototype.createReadStream=function(e,t){return this._stream.createReadStream(e,t)},a.prototype.createWriteStream=function(e,t){return this._stream.createWriteStream(e,t)},a.prototype.open=function(e,t,i,n){return this._stream.open(e,t,i,n)},a.prototype.close=function(e,t){return this._stream.close(e,t)},a.prototype.read=function(e,t,i,n,r,a){return this._stream.readData(e,t,i,n,r,a)},a.prototype.write=function(e,t,i,n,r,a){return this._stream.writeData(e,t,i,n,r,a)},a.prototype.fastGet=function(e,t,i,n){return this._stream.fastGet(e,t,i,n)},a.prototype.fastPut=function(e,t,i,n){return this._stream.fastPut(e,t,i,n)},a.prototype.readFile=function(e,t,i){return this._stream.readFile(e,t,i)},a.prototype.writeFile=function(e,t,i,n){return this._stream.writeFile(e,t,i,n)},a.prototype.appendFile=function(e,t,i,n){return this._stream.appendFile(e,t,i,n)},a.prototype.exists=function(e,t){return this._stream.exists(e,t)},a.prototype.unlink=function(e,t){return this._stream.unlink(e,t)},a.prototype.rename=function(e,t,i){return this._stream.rename(e,t,i)},a.prototype.mkdir=function(e,t,i){return this._stream.mkdir(e,t,i)},a.prototype.rmdir=function(e,t){return this._stream.rmdir(e,t)},a.prototype.readdir=function(e,t,i){return this._stream.readdir(e,t,i)},a.prototype.fstat=function(e,t){return this._stream.fstat(e,t)},a.prototype.stat=function(e,t){return this._stream.stat(e,t)},a.prototype.lstat=function(e,t){return this._stream.lstat(e,t)},a.prototype.opendir=function(e,t){return this._stream.opendir(e,t)},a.prototype.setstat=function(e,t,i){return this._stream.setstat(e,t,i)},a.prototype.fsetstat=function(e,t,i){return this._stream.fsetstat(e,t,i)},a.prototype.futimes=function(e,t,i,n){return this._stream.futimes(e,t,i,n)},a.prototype.utimes=function(e,t,i,n){return this._stream.utimes(e,t,i,n)},a.prototype.fchown=function(e,t,i,n){return this._stream.fchown(e,t,i,n)},a.prototype.chown=function(e,t,i,n){return this._stream.chown(e,t,i,n)},a.prototype.fchmod=function(e,t,i){return this._stream.fchmod(e,t,i)},a.prototype.chmod=function(e,t,i){return this._stream.chmod(e,t,i)},a.prototype.readlink=function(e,t){return this._stream.readlink(e,t)},a.prototype.symlink=function(e,t,i){return this._stream.symlink(e,t,i)},a.prototype.realpath=function(e,t){return this._stream.realpath(e,t)},a.prototype.ext_openssh_rename=function(e,t,i){return this._stream.ext_openssh_rename(e,t,i)},a.prototype.ext_openssh_statvfs=function(e,t){return this._stream.ext_openssh_statvfs(e,t)},a.prototype.ext_openssh_fstatvfs=function(e,t){return this._stream.ext_openssh_fstatvfs(e,t)},a.prototype.ext_openssh_hardlink=function(e,t,i){return this._stream.ext_openssh_hardlink(e,t,i)},a.prototype.ext_openssh_fsync=function(e,t){return this._stream.ext_openssh_fsync(e,t)},e.exports=a},1119:(e,t,i)=>{var n=i(1631).Socket,r=i(8614).EventEmitter,a=i(1669).inherits,o=i(5622),s=i(5747),c=i(3129),p=i(510).readUInt32BE,u=i(510).writeUInt32BE,l=i(510).writeUInt32LE,f=/^\!<socket >(\d+) s ([A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8})/,d=/^[/\\][/\\]\.[/\\]pipe[/\\].+/;if(e.exports=function(e,t,i,r,a){var o,h,m,g,b,y,x,w,E=0,_=Buffer.isBuffer(t),S=0,k=0,T=0,A=0,O=!1;function C(){var e;if(_){var i=9;e=Buffer.allocUnsafe(9+E+4+g+4),u(e,e.length-4,0),e[4]=13,u(e,E,5),t.copy(e,i),u(e,g,i+=E),r.copy(e,i+=4),u(e,0,i+=g),o.write(e)}else o.write(Buffer.from([0,0,0,1,11]))}function R(e){for(var i=0,n=e.length;i<n;++i)if(void 0===b)5==++S&&(b=e[i],S=0);else if(14===b)if(m){if(m[S]=e[i],++S===k)return o.removeAllListeners("data"),o.destroy()}else k<<=8,k+=e[i],4==++S&&(m=Buffer.allocUnsafe(k),S=0);else if(12===b)if(void 0===y){if(T<<=8,T+=e[i],4==++S&&(y=new Array(T),S=0,0===T))return o.removeAllListeners("data"),o.destroy()}else if(t)if(!1===O){if(t[S]=e[i],++S===E&&(y[T-1]=t,E=0,S=0,O=!0,0==--T))return t=void 0,o.removeAllListeners("data"),o.destroy()}else!0===O?(A<<=8,A+=e[i],4==++S&&(S=0,A>0?O=A:(t=void 0,O=!1),A=0)):++S===O&&(O=!1,S=0,t=void 0);else E<<=8,E+=e[i],4==++S&&(t=Buffer.allocUnsafe(E),S=0);else if(5===b)return h=_?new Error("Agent unable to sign data"):new Error("Unable to retrieve list of keys from agent"),o.removeAllListeners("data"),o.destroy()}function B(e){h=e}function N(){h?a(h):_&&!m||!_&&!y?a(new Error("Unexpected disconnection from agent")):_&&m?a(void 0,m):!_&&y&&a(void 0,y)}if("function"==typeof t&&"function"==typeof i?(x=t,w=i):_?(E=t.length,g=r.length):(a=t,t=void 0),"win32"!==process.platform||d.test(e))o=new n;else{if("pageant"!==e){var U=!1;return void s.readFile(e,(function t(i,r){if(i)return U?a(new Error("Invalid cygwin unix socket path")):void c.exec('cygpath -w "'+e+'"',(function(i,n,r){if(i||0===n.length)return a(new Error("Invalid cygwin unix socket path"));U=!0,e=n.toString().replace(/[\r\n]/g,""),s.readFile(e,t)}));var u;if(u=f.exec(r.toString("ascii"))){var d,h,m,v,g,b,y=0,x=!1,w=[],E=Buffer.allocUnsafe(12);for(E.fill(0),d=parseInt(u[1],10),h=u[2].replace(/\-/g,""),m=Buffer.allocUnsafe(16),g=0,b=0;b<32;++g,b+=2)m[g]=parseInt(h.substring(b,b+2),16);for(g=0;g<16;g+=4)l(m,p(m,g),g);function _(){y=0,v="secret",o.write(m)}function S(e){y+=e.length,"secret"===v?16===y&&(y=0,v="creds",o.write(E)):"creds"===v&&(x||w.push(e),12===y&&(o.removeListener("connect",_),o.removeListener("data",S),o.removeListener("close",k),x?(P(),o.emit("connect")):(x=!0,E=Buffer.concat(w),l(E,process.pid,0),o.destroy(),T())))}function k(){a(new Error("Problem negotiating cygwin unix socket security"))}function T(){(o=new n).once("connect",_),o.on("data",S),o.once("close",k),o.connect(d)}T()}else a(new Error("Malformed cygwin unix socket file"))}))}o=new v}function P(){var e;x||w?(o.once("connect",(function(){e=x();var t=!1;function i(){t||(o.destroy(),t=!0)}e.once("end",i).once("close",i).on("data",(function(e){o.write(e)})),o.on("data",(function(t){e.write(t)}))})),o.once("close",(function(){e||w()}))):(o.once("connect",C),o.on("data",R),o.once("error",B),o.once("close",N))}P(),o.connect(e)},"win32"===process.platform){var h={},m=o.resolve(__dirname,"..","util/pagent.exe");function v(){this.proc=void 0,this.buffer=null}h[10]=new Error("Invalid pagent.exe arguments"),h[11]=new Error("Pageant is not running"),h[12]=new Error("pagent.exe could not create an mmap"),h[13]=new Error("pagent.exe could not set mode for stdin"),h[14]=new Error("pagent.exe could not set mode for stdout"),h[15]=new Error("pagent.exe did not get expected input payload"),a(v,r),v.prototype.write=function(e){if(null===this.buffer?this.buffer=e:this.buffer=Buffer.concat([this.buffer,e],this.buffer.length+e.length),!(this.buffer.length<4)){var t=p(this.buffer,0);if(!(this.buffer.length-4<t)){e=this.buffer.slice(0,4+t),this.buffer.length>4+t?this.buffer=this.buffer.slice(4+t):this.buffer=null;var i,n=this,r=!1;(i=this.proc=c.spawn(m,[e.length])).stdout.on("data",(function(e){n.emit("data",e)})),i.once("error",(function(e){r||(r=!0,n.emit("error",e))})),i.once("close",(function(e){n.proc=void 0,h[e]&&!r&&(r=!0,n.emit("error",h[e])),n.emit("close",r)})),i.stdin.end(e)}}},v.prototype.end=v.prototype.destroy=function(){this.buffer=null,this.proc&&(this.proc.kill(),this.proc=void 0)},v.prototype.connect=function(){this.emit("connect")}}},510:e=>{e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,i){return e[i++]=t>>>24,e[i++]=t>>>16,e[i++]=t>>>8,e[i++]=t,i},writeUInt32LE:function(e,t,i){return e[i++]=t,e[i++]=t>>>8,e[i++]=t>>>16,e[i++]=t>>>24,i}}},2353:(e,t,i)=>{var n=i(6417),r=i(1631).Socket,a=i(881).lookup,o=i(8614).EventEmitter,s=i(1669).inherits,c=n.getHashes(),p=i(816),u=p.SSH2Stream,l=p.SFTPStream,f=p.constants,d=f.BUGS,h=f.ALGORITHMS,m=f.EDDSA_SUPPORTED,v=p.utils.parseKey,g=i(3657),b=i(491),y=i(1119),x=i(2519),w=i(510).readUInt32BE,E=Math.pow(2,32)-1,_=/^OpenSSH_(?:(?![0-4])\d)|(?:\d{2,})/,S=function(e){};function k(){if(!(this instanceof k))return new k;o.call(this),this.config={host:void 0,port:void 0,localAddress:void 0,localPort:void 0,forceIPv4:void 0,forceIPv6:void 0,keepaliveCountMax:void 0,keepaliveInterval:void 0,readyTimeout:void 0,username:void 0,password:void 0,privateKey:void 0,tryKeyboard:void 0,agent:void 0,allowAgentFwd:void 0,authHandler:void 0,hostHashAlgo:void 0,hostHashCb:void 0,strictVendor:void 0,debug:void 0},this._readyTimeout=void 0,this._channels=void 0,this._callbacks=void 0,this._forwarding=void 0,this._forwardingUnix=void 0,this._acceptX11=void 0,this._agentFwdEnabled=void 0,this._curChan=void 0,this._remoteVer=void 0,this._sshstream=void 0,this._sock=void 0,this._resetKA=void 0}function T(e,t,i,n){var r=A(e),a=b.MAX_WINDOW,o=b.PACKET_SIZE,s=!0;if(!1===r)return n(new Error("No free channels available"));"function"==typeof i&&(n=i,i={}),e._channels[r]=n;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+r,p).once("CHANNEL_OPEN_FAILURE:"+r,u).once("CHANNEL_CLOSE:"+r,u),"session"===t?s=c.session(r,a,o):"direct-tcpip"===t?s=c.directTcpip(r,a,o,i):"direct-streamlocal@openssh.com"===t&&(s=c.openssh_directStreamLocal(r,a,o,i)),s;function p(i){c.removeListener("CHANNEL_OPEN_FAILURE:"+r,u),c.removeListener("CHANNEL_CLOSE:"+r,u);var s={type:t,incoming:{id:r,window:a,packetSize:o,state:"open"},outgoing:{id:i.sender,window:i.window,packetSize:i.packetSize,state:"open"}};n(void 0,new b(s,e))}function u(t){var i;c.removeListener("CHANNEL_OPEN_CONFIRMATION:"+r,p),c.removeListener("CHANNEL_OPEN_FAILURE:"+r,u),c.removeListener("CHANNEL_CLOSE:"+r,u),delete e._channels[r],t instanceof Error?i=t:"object"==typeof t&&null!==t?((i=new Error("(SSH) Channel open failure: "+t.description)).reason=t.reason,i.lang=t.lang):(i=new Error("(SSH) Channel open failure: server closed channel unexpectedly")).reason=i.lang="",n(i)}}function A(e){if(e._curChan<E)return++e._curChan;for(var t=0,i=e._channels;t<E;++t)if(!i[t])return t;return!1}function O(e,t,i){var n={single:!1,protocol:"MIT-MAGIC-COOKIE-1",cookie:void 0,screen:0};"function"==typeof t?i=t:"object"==typeof t&&null!==t&&("boolean"==typeof t.single&&(n.single=t.single),"number"==typeof t.screen&&(n.screen=t.screen),"string"==typeof t.protocol&&(n.protocol=t.protocol),"string"==typeof t.cookie?n.cookie=t.cookie:Buffer.isBuffer(t.cookie)&&(n.cookie=t.cookie.toString("hex"))),void 0===n.cookie&&(n.cookie=U());var r="function"==typeof i;return"open"!==e.outgoing.state?(r&&i(new Error("Channel is not open")),!0):(r&&e._callbacks.push((function(t){if(t)return i(!0!==t?t:new Error("Unable to request X11"));e._hasX11=!0,++e._client._acceptX11,e.once("close",(function(){e._client._acceptX11&&--e._client._acceptX11})),i()})),e._client._sshstream.x11Forward(e.outgoing.id,n,r))}function C(e,t,i){var n=24,r=80,a=640,o=480,s="vt100",c=null;"function"==typeof t?i=t:"object"==typeof t&&null!==t&&("number"==typeof t.rows&&(n=t.rows),"number"==typeof t.cols&&(r=t.cols),"number"==typeof t.width&&(a=t.width),"number"==typeof t.height&&(o=t.height),"string"==typeof t.term&&(s=t.term),"object"==typeof t.modes&&(c=t.modes));var p="function"==typeof i;return"open"!==e.outgoing.state?(p&&i(new Error("Channel is not open")),!0):(p&&e._callbacks.push((function(e){if(e)return i(!0!==e?e:new Error("Unable to request a pseudo-terminal"));i()})),e._client._sshstream.pty(e.outgoing.id,n,r,o,a,s,c,p))}function R(e,t){var i="function"==typeof t;return"open"!==e.outgoing.state?(i&&t(new Error("Channel is not open")),!0):e._client._agentFwdEnabled?(i&&t(!1),!0):(e._client._agentFwdEnabled=!0,e._callbacks.push((function(n){if(n)return e._client._agentFwdEnabled=!1,void(i&&t(!0!==n?n:new Error("Unable to request agent forwarding")));i&&t()})),e._client._sshstream.openssh_agentForward(e.outgoing.id,!0))}function B(e,t){if("open"!==e.outgoing.state)return!0;for(var i,n,r=!0,a=Object.keys(t||{}),o=0,s=a.length;o<s;++o)n=t[i=a[o]],r=e._client._sshstream.env(e.outgoing.id,i,n,!1);return r}function N(e,t,i){return"open"!==e.outgoing.state?(i(new Error("Channel is not open")),!0):(e._callbacks.push((function(n){if(n)return i(!0!==n?n:new Error("Unable to start subsystem: "+t));e.subtype="subsystem",i(void 0,e)})),e._client._sshstream.subsystem(e.outgoing.id,t,!0))}s(k,o),k.prototype.connect=function(e){var t=this;if(this._sock&&this._sock.writable)return this.once("close",(function(){t.connect(e)})),void this.end();this.config.host=e.hostname||e.host||"localhost",this.config.port=e.port||22,this.config.localAddress="string"==typeof e.localAddress?e.localAddress:void 0,this.config.localPort="string"==typeof e.localPort||"number"==typeof e.localPort?e.localPort:void 0,this.config.forceIPv4=e.forceIPv4||!1,this.config.forceIPv6=e.forceIPv6||!1,this.config.keepaliveCountMax="number"==typeof e.keepaliveCountMax&&e.keepaliveCountMax>=0?e.keepaliveCountMax:3,this.config.keepaliveInterval="number"==typeof e.keepaliveInterval&&e.keepaliveInterval>0?e.keepaliveInterval:0,this.config.readyTimeout="number"==typeof e.readyTimeout&&e.readyTimeout>=0?e.readyTimeout:2e4;var i,o={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var s,p;if(p=e.algorithms.kex,Array.isArray(p)&&p.length>0){for(s=h.SUPPORTED_KEX,i=0;i<p.length;++i)if(-1===s.indexOf(p[i]))throw new Error("Unsupported key exchange algorithm: "+p[i]);o.kex=p}if(p=e.algorithms.cipher,Array.isArray(p)&&p.length>0){for(s=h.SUPPORTED_CIPHER,i=0;i<p.length;++i)if(-1===s.indexOf(p[i]))throw new Error("Unsupported cipher algorithm: "+p[i]);o.cipher=p}if(p=e.algorithms.serverHostKey,Array.isArray(p)&&p.length>0){for(s=h.SUPPORTED_SERVER_HOST_KEY,i=0;i<p.length;++i)if(-1===s.indexOf(p[i]))throw new Error("Unsupported server host key algorithm: "+p[i]);o.serverHostKey=p}if(p=e.algorithms.hmac,Array.isArray(p)&&p.length>0){for(s=h.SUPPORTED_HMAC,i=0;i<p.length;++i)if(-1===s.indexOf(p[i]))throw new Error("Unsupported HMAC algorithm: "+p[i]);o.hmac=p}if(p=e.algorithms.compress,Array.isArray(p)&&p.length>0){for(s=h.SUPPORTED_COMPRESS,i=0;i<p.length;++i)if(-1===s.indexOf(p[i]))throw new Error("Unsupported compression algorithm: "+p[i]);o.compress=p}}if(void 0===o.compress&&(e.compress?(o.compress=["zlib@openssh.com","zlib"],"force"!==e.compress&&o.compress.push("none")):!1===e.compress&&(o.compress=["none"])),"string"==typeof e.username)this.config.username=e.username;else{if("string"!=typeof e.user)throw new Error("Invalid username");this.config.username=e.user}this.config.password="string"==typeof e.password?e.password:void 0,this.config.privateKey="string"==typeof e.privateKey||Buffer.isBuffer(e.privateKey)?e.privateKey:void 0,this.config.localHostname="string"==typeof e.localHostname&&e.localHostname.length?e.localHostname:void 0,this.config.localUsername="string"==typeof e.localUsername&&e.localUsername.length?e.localUsername:void 0,this.config.tryKeyboard=!0===e.tryKeyboard,this.config.agent="string"==typeof e.agent&&e.agent.length?e.agent:void 0,this.config.allowAgentFwd=!0===e.agentForward&&void 0!==this.config.agent;var l=this.config.authHandler="function"==typeof e.authHandler?e.authHandler:void 0;this.config.strictVendor="boolean"!=typeof e.strictVendor||e.strictVendor;var d=this.config.debug="function"==typeof e.debug?e.debug:S;if(!0===e.agentForward&&!this.config.allowAgentFwd)throw new Error("You must set a valid agent path to allow agent forwarding");var g,x=this._callbacks=[];if(this._channels={},this._forwarding={},this._forwardingUnix={},this._acceptX11=0,this._agentFwdEnabled=!1,this._curChan=-1,this._remoteVer=void 0,this.config.privateKey){if((g=v(this.config.privateKey,e.passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+g.message);if(Array.isArray(g)&&(g=g[0]),null===g.getPrivatePEM())throw new Error("privateKey value does not contain a (valid) private key")}var E=this._sshstream=new u({algorithms:o,debug:d===S?void 0:d}),_=this._sock=e.sock||new r;this._sock.stderr&&"function"==typeof this._sock.stderr.resume&&this._sock.stderr.resume();var k,T,O=this.config.keepaliveInterval,C=this.config.keepaliveCountMax,R=0;function B(){if(++R>C){if(clearInterval(k),_.readable){var e=new Error("Keepalive timeout");e.level="client-timeout",t.emit("error",e),_.destroy()}}else _.writable?(x.push(N),E.ping()):clearInterval(k)}function N(){O>0&&(R=0,clearInterval(k),_.writable&&(k=setInterval(B,O)))}if(this._resetKA=N,E.on("USERAUTH_BANNER",(function(e){t.emit("banner",e)})),_.on("connect",(function(){d("DEBUG: Client: Connected"),t.emit("connect"),e.sock||E.pipe(_).pipe(E)})).on("timeout",(function(){t.emit("timeout")})).on("error",(function(e){clearTimeout(t._readyTimeout),e.level="client-socket",t.emit("error",e)})).on("end",(function(){E.unpipe(_),clearTimeout(t._readyTimeout),clearInterval(k),t.emit("end")})).on("close",(function(){E.unpipe(_),clearTimeout(t._readyTimeout),clearInterval(k),t.emit("close");var e=x,n=new Error("No response from server");for(x=t._callbacks=[],i=0;i<e.length;++i)e[i](n);var r=t._channels,a=Object.keys(r);for(t._channels={},i=0;i<a.length;++i){var o,s=E.emit("CHANNEL_OPEN_FAILURE:"+a[i],n),c=E.emit("CHANNEL_CLOSE:"+a[i]);s||c||!(o=r[a[i]])||"function"!=typeof o||o(n)}})),E.on("drain",(function(){t.emit("drain")})).once("header",(function(e){t._remoteVer=e.versions.software,e.greeting&&t.emit("greeting",e.greeting)})).on("continue",(function(){t.emit("continue")})).on("error",(function(e){void 0===e.level?e.level="protocol":"handshake"===e.level&&clearTimeout(t._readyTimeout),t.emit("error",e)})).on("end",(function(){_.resume()})),"function"==typeof e.hostVerifier){if(-1===c.indexOf(e.hostHash))throw new Error("Invalid host hash algorithm: "+e.hostHash);var U=e.hostVerifier,P=n.createHash(e.hostHash);E.once("fingerprint",(function(e,t){P.update(e);var i=U(P.digest("hex"),t);void 0!==i&&t(i)}))}var L,I=null,D=null,j=0,H=["none"];if(void 0!==this.config.password&&H.push("password"),void 0!==g&&H.push("publickey"),void 0!==this.config.agent&&H.push("agent"),this.config.tryKeyboard&&H.push("keyboard-interactive"),void 0!==g&&void 0!==this.config.localHostname&&void 0!==this.config.localUsername&&H.push("hostbased"),void 0===l){var M=0;l=function(e,t,i){return M!==H.length&&H[M++]}}var q=!1;function F(e){if(q=!0,!1===e){E.removeListener("USERAUTH_FAILURE",W),E.removeListener("USERAUTH_PK_OK",$);var i=new Error("All configured authentication methods failed");return i.level="client-authentication",t.emit("error",i),void(E.writable&&t.end())}if(-1===H.indexOf(e))throw new Error("Authentication method not allowed: "+e);switch(T=e){case"password":E.authPassword(t.config.username,t.config.password);break;case"publickey":E.authPK(t.config.username,g),E.once("USERAUTH_PK_OK",$);break;case"hostbased":E.authHostbased(t.config.username,g,t.config.localHostname,t.config.localUsername,(function(e,i){var n=g.sign(e);if(n instanceof Error)return n.message="Error while signing data with privateKey: "+n.message,n.level="client-authentication",t.emit("error",n),z();i(n)}));break;case"agent":y(t.config.agent,(function(e,i){return e?(e.level="agent",t.emit("error",e),L=void 0,z()):0===i.length?(d("DEBUG: Agent: No keys stored in agent"),L=void 0,z()):(L=i,j=0,E.authPK(t.config.username,i[0]),void E.once("USERAUTH_PK_OK",$))}));break;case"keyboard-interactive":E.authKeyboard(t.config.username),E.on("USERAUTH_INFO_REQUEST",G);break;case"none":E.authNone(t.config.username)}}function z(){q=!1;var e=l(D,I,F);q||void 0===e||F(e)}function K(){if("agent"===T){if(j>=L.length)return;++j>=L.length?(d("DEBUG: Agent: No more keys left to try"),d("DEBUG: Client: agent auth failed"),L=void 0,z()):(d("DEBUG: Agent: Trying key #"+(j+1)),E.authPK(t.config.username,L[j]),E.once("USERAUTH_PK_OK",$))}}function G(e,i,n,r){if(0===(Array.isArray(r)?r.length:0))return d("DEBUG: Client: Sending automatic USERAUTH_INFO_RESPONSE"),E.authInfoRes();t.emit("keyboard-interactive",e,i,n,r,(function(e){E.authInfoRes(e)}))}function $(){if("agent"===T){var e=L[j],i=w(e,0),n=e.toString("ascii",4,4+i),r=n.slice(4);switch(n){case"ssh-rsa":case"ssh-dss":case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":break;default:if(m&&"ssh-ed25519"===n)break;return d("DEBUG: Agent: Skipping unsupported key type: "+n),K()}E.authPK(t.config.username,e,(function(i,a){y(t.config.agent,e,r,i,(function(e,i){if(e)e.level="agent",t.emit("error",e);else{var r=w(i,0);if(4+r+4<i.length){if(i.toString("ascii",4,4+r)===n)return a(i.slice(4+r+4));(e=new Error("Agent key/signature type mismatch")).level="agent",t.emit("error",e)}}K()}))}))}else"publickey"===T&&E.authPK(t.config.username,g,(function(e,i){var n=g.sign(e);if(n instanceof Error)return n.message="Error while signing data with privateKey: "+n.message,n.level="client-authentication",t.emit("error",n),z();i(n)}))}function W(e,t){if(E.removeListener("USERAUTH_PK_OK",$),E.removeListener("USERAUTH_INFO_REQUEST",G),"agent"===T)return d("DEBUG: Client: Agent key #"+(j+1)+" failed"),K();d("DEBUG: Client: "+T+" auth failed"),I=t,D=e,z()}if(E.once("USERAUTH_SUCCESS",(function(){E.removeListener("USERAUTH_FAILURE",W),E.removeListener("USERAUTH_INFO_REQUEST",G),N(),clearTimeout(t._readyTimeout),t.emit("ready")})).on("USERAUTH_FAILURE",W),E.once("ready",(function(){E.service("ssh-userauth"),E.once("SERVICE_ACCEPT",(function(e){"ssh-userauth"===e&&z()}))})),E.on("CHANNEL_OPEN",(function(e){!function(e,t){var i,n=!1;function r(){var i={type:t.type,incoming:{id:n,window:b.MAX_WINDOW,packetSize:b.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}},r=new b(i,e);return e._sshstream.channelOpenConfirm(t.sender,n,b.MAX_WINDOW,b.PACKET_SIZE),r}function a(){void 0===i&&(i=!1===n?f.CHANNEL_OPEN_FAILURE.RESOURCE_SHORTAGE:f.CHANNEL_OPEN_FAILURE.CONNECT_FAILED),e._sshstream.channelOpenFail(t.sender,i,"","")}if("forwarded-tcpip"===t.type||"x11"===t.type||"auth-agent@openssh.com"===t.type||"forwarded-streamlocal@openssh.com"===t.type){var o="forwarded-tcpip"===t.type&&void 0===e._forwarding[t.data.destIP+":"+t.data.destPort]||"forwarded-streamlocal@openssh.com"===t.type&&void 0===e._forwardingUnix[t.data.socketPath]||"x11"===t.type&&0===e._acceptX11||"auth-agent@openssh.com"===t.type&&!e._agentFwdEnabled;o?(i=f.CHANNEL_OPEN_FAILURE.ADMINISTRATIVELY_PROHIBITED,e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unexpected channel open for: "+t.type)):!1===(n=A(e))?(e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: no channels available"),o=!0):e._channels[n]=!0,o&&a(),!1!==n&&("forwarded-tcpip"===t.type?(0===t.data.destPort&&(t.data.destPort=e._forwarding[t.data.destIP+":"+t.data.destPort]),e.emit("tcp connection",t.data,r,a)):"x11"===t.type?e.emit("x11",t.data,r,a):"forwarded-streamlocal@openssh.com"===t.type?e.emit("unix connection",t.data,r,a):y(e.config.agent,r,a))}else e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unsupported type: "+t.type),i=f.CHANNEL_OPEN_FAILURE.UNKNOWN_CHANNEL_TYPE,a()}(t,e)})),E.on("REQUEST_SUCCESS",(function(e){x.length&&x.shift()(!1,e)})).on("REQUEST_FAILURE",(function(){x.length&&x.shift()(!0)})),E.on("GLOBAL_REQUEST",(function(e,t,i){t&&E.requestFailure()})),e.sock)Z(),E.pipe(_).pipe(E);else{var X=this.config.host,V=this.config.forceIPv4,Y=this.config.forceIPv6;function Q(){Z(),t._sock.connect({host:X,port:t.config.port,localAddress:t.config.localAddress,localPort:t.config.localPort}),t._sock.setNoDelay(!0),t._sock.setMaxListeners(0),t._sock.setTimeout("number"==typeof e.timeout?e.timeout:0)}d("DEBUG: Client: Trying "+X+" on port "+this.config.port+" ..."),!V&&!Y||V&&Y?Q():a(X,V?4:6,(function(e,i,n){if(e){var r=new Error("Error while looking up "+(V?"IPv4":"IPv6")+" address for host "+X+": "+e);return clearTimeout(t._readyTimeout),r.level="client-dns",t.emit("error",r),void t.emit("close")}X=i,Q()}))}function Z(){t.config.readyTimeout>0&&(t._readyTimeout=setTimeout((function(){var e=new Error("Timed out while waiting for handshake");e.level="client-timeout",t.emit("error",e),_.destroy()}),t.config.readyTimeout))}},k.prototype.end=function(){return!!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable)&&this._sshstream.disconnect()},k.prototype.destroy=function(){this._sock&&this._sock.destroy()},k.prototype.exec=function(e,t,i){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");"function"==typeof t&&(i=t,t={});var n=this;return T(this,"session",{allowHalfOpen:!1!==t.allowHalfOpen},(function(r,a){if(r)return i(r);var o=[];function s(e){if(e)return a.close(),i(e);o.length&&o.shift()()}(!0===n.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==n.config.agent)&&o.push((function(){R(a,s)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&B(a,t.env),("object"==typeof t.pty&&null!==t.pty||!0===t.pty)&&o.push((function(){C(a,t.pty,s)})),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){O(a,t.x11,s)}))),o.push((function(){!function(e,t,i,n){if("open"!==e.outgoing.state)return n(new Error("Channel is not open")),!0;e._callbacks.push((function(t){if(t)return n(!0!==t?t:new Error("Unable to exec"));e.subtype="exec",e.allowHalfOpen=!1!==i.allowHalfOpen,n(void 0,e)})),e._client._sshstream.exec(e.outgoing.id,t,!0)}(a,e,t,i)})),o.shift()()}))},k.prototype.shell=function(e,t,i){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var n=this;return"function"==typeof e?(i=e,e=t=void 0):"function"==typeof t&&(i=t,t=void 0),!e||void 0===e.x11&&void 0===e.env||(t=e,e=void 0),T(this,"session",(function(r,a){if(r)return i(r);var o=[];function s(e){if(e)return a.close(),i(e);o.length&&o.shift()()}(!0===n.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==n.config.agent)&&o.push((function(){R(a,s)})),!1!==e&&o.push((function(){C(a,e,s)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&B(a,t.env),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){O(a,t.x11,s)}))),o.push((function(){!function(e,t){if("open"!==e.outgoing.state)return t(new Error("Channel is not open")),!0;e._callbacks.push((function(i){if(i)return t(!0!==i?i:new Error("Unable to open shell"));e.subtype="shell",t(void 0,e)})),e._client._sshstream.shell(e.outgoing.id,!0)}(a,i)})),o.shift()()}))},k.prototype.subsys=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return T(this,"session",(function(i,n){if(i)return t(i);N(n,e,(function(e,i){if(e)return t(e);t(void 0,i)}))}))},k.prototype.sftp=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t=this;return T(this,"session",(function(i,n){if(i)return e(i);N(n,"sftp",(function(i,n){if(i)return e(i);var r=t._sshstream._state.incoming.identRaw,a={debug:t.config.debug},o=new l(a,r);function s(t){o.removeListener("ready",c),n.removeListener("exit",p),e(t)}function c(){o.removeListener("error",s),n.removeListener("exit",p),e(void 0,new x(o))}function p(t,i){o.removeListener("ready",c),o.removeListener("error",s);var n=new Error("number"==typeof t?"Received exit code "+t+" while establishing SFTP session":"Received signal "+i+" while establishing SFTP session");n.code=t,n.signal=i,e(n)}o.once("error",s).once("ready",c).once("close",(function(){n.end()})),n.once("exit",p),o.pipe(n).pipe(o)}))}))},k.prototype.forwardIn=function(e,t,i){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var n=this,r="function"==typeof i;return r&&this._callbacks.push((function(r,a){if(r)return i(!0!==r?r:new Error("Unable to bind to "+e+":"+t));var o=t;0===t&&a&&a.length>=4&&(o=w(a,0),n._sshstream.remoteBugs&d.DYN_RPORT_BUG||(t=o)),n._forwarding[e+":"+t]=o,i(void 0,o)})),this._sshstream.tcpipForward(e,t,r)},k.prototype.unforwardIn=function(e,t,i){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var n=this,r="function"==typeof i;return r&&this._callbacks.push((function(r){if(r)return i(!0!==r?r:new Error("Unable to unbind from "+e+":"+t));delete n._forwarding[e+":"+t],i()})),this._sshstream.cancelTcpipForward(e,t,r)},k.prototype.forwardOut=function(e,t,i,n,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return T(this,"direct-tcpip",{srcIP:e,srcPort:t,dstIP:i,dstPort:n},r)},k.prototype.openssh_noMoreSessions=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t="function"==typeof e;return!this.config.strictVendor||this.config.strictVendor&&_.test(this._remoteVer)?(t&&this._callbacks.push((function(t){if(t)return e(!0!==t?t:new Error("Unable to disable future sessions"));e()})),this._sshstream.openssh_noMoreSessions(t)):(t&&process.nextTick((function(){e(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},k.prototype.openssh_forwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i="function"==typeof t,n=this;return!this.config.strictVendor||this.config.strictVendor&&_.test(this._remoteVer)?(i&&this._callbacks.push((function(i){if(i)return t(!0!==i?i:new Error("Unable to bind to "+e));n._forwardingUnix[e]=!0,t()})),this._sshstream.openssh_streamLocalForward(e,i)):(i&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},k.prototype.openssh_unforwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i="function"==typeof t,n=this;return!this.config.strictVendor||this.config.strictVendor&&_.test(this._remoteVer)?(i&&this._callbacks.push((function(i){if(i)return t(!0!==i?i:new Error("Unable to unbind on "+e));delete n._forwardingUnix[e],t()})),this._sshstream.openssh_cancelStreamLocalForward(e,i)):(i&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},k.prototype.openssh_forwardOutStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return!this.config.strictVendor||this.config.strictVendor&&_.test(this._remoteVer)?T(this,"direct-streamlocal@openssh.com",{socketPath:e},t):(process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)};var U=function(){if("function"==typeof n.randomFillSync){var e=Buffer.alloc(16);return function(){return n.randomFillSync(e,0,16),e.toString("hex")}}return function(){return n.randomBytes(16).toString("hex")}}();k.Client=k,k.Server=i(7465),k.utils=p.utils,k.SFTP_STATUS_CODE=l.STATUS_CODE,k.SFTP_OPEN_MODE=l.OPEN_MODE,k.HTTPAgent=g.SSHTTPAgent,k.HTTPSAgent=g.SSHTTPSAgent,e.exports=k},3657:(e,t,i)=>{var n,r=i(8605).Agent,a=i(7211).Agent,o=i(1669).inherits;function s(e,t){var r=e&&e.localAddress||this._defaultSrcIP,a=e&&e.localPort||0,o=e.host,s=e.port;void 0===n&&(n=i(2353).Client);var p=new n,u=!1;p.on("ready",(()=>{p.forwardOut(r,a,o,s,((e,i)=>{if(u=!0,e)return p.end(),t(e);i.once("close",(()=>{p.end()})),t(null,function(e){return e.setKeepAlive=c,e.setNoDelay=c,e.setTimeout=c,e.ref=c,e.unref=c,e.destroySoon=e.destroy,e}(i))}))})).on("error",t).on("close",(()=>{u||t(new Error("Unexpected connection loss"))})).connect(this._connectCfg)}function c(){}[r,a].forEach((e=>{function i(t,n){if(!(this instanceof i))return new i(t,n);e.call(this,n),this._connectCfg=t,this._defaultSrcIP=n&&n.srcIP||"localhost"}o(i,e),i.prototype.createConnection=s,t[e===r?"SSHTTPAgent":"SSHTTPSAgent"]=i}))},4055:e=>{function t(e,t){for(var i=t,n=i+1,r=e.length;n<r;i+=1,n+=1)e[i]=e[n];e.pop()}function i(e,i,n){var r=this._streams=[];this._timer=void 0,this._timerInterval=e,this._timerfn=function(){for(var e,a,o=Date.now(),s=0,c=r.length;s<c;++s)if((a=(e=r[s])._kalast)&&o-a>=i)if(++e._kacnt>n){var p=new Error("Keepalive timeout");p.level="client-timeout",e.emit("error",p),e.disconnect(),t(r,s),--s,c=r.length}else e._kalast=o,e.ping()}}i.prototype.start=function(){this._timer&&this.stop(),this._timer=setInterval(this._timerfn,this._timerInterval)},i.prototype.stop=function(){this._timer&&(clearInterval(this._timer),this._timer=void 0)},i.prototype.add=function(e){var t=this._streams,i=this;function n(){e._kalast=Date.now(),e._kacnt=0}e.once("end",(function(){i.remove(e)})).on("packet",n),t[t.length]=e,n(),this._timer||this.start()},i.prototype.remove=function(e){var i=this._streams,n=i.indexOf(e);n>-1&&t(i,n),i.length||this.stop()},e.exports=i},7465:(e,t,i)=>{var n,r=i(1631),a=i(8614).EventEmitter,o=a.listenerCount,s=i(1669).inherits,c=i(816),p=c.utils.parseKey,u=c.SSH2Stream,l=c.SFTPStream,f=c.constants,d=f.DISCONNECT_REASON,h=f.CHANNEL_OPEN_FAILURE,m=f.ALGORITHMS,v=i(491),g=i(4055),b=i(510).writeUInt32BE,y=Math.pow(2,32)-1;function x(e,t){if(!(this instanceof x))return new x(e,t);var i,s={"ssh-rsa":null,"ssh-dss":null,"ssh-ed25519":null,"ecdsa-sha2-nistp256":null,"ecdsa-sha2-nistp384":null,"ecdsa-sha2-nistp521":null},c=e.hostKeys;if(!Array.isArray(c))throw new Error("hostKeys must be an array");for(i=0;i<c.length;++i){var l;if((l=Buffer.isBuffer(c[i])||"string"==typeof c[i]?p(c[i]):p(c[i].key,c[i].passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+l.message);if(Array.isArray(l)&&(l=l[0]),null===l.getPrivatePEM())throw new Error("privateKey value contains an invalid private key");s[l.type]||(s[l.type]=l)}var f={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var h,v;if(v=e.algorithms.kex,Array.isArray(v)&&v.length>0){for(h=m.SUPPORTED_KEX,i=0;i<v.length;++i)if(-1===h.indexOf(v[i]))throw new Error("Unsupported key exchange algorithm: "+v[i]);f.kex=v}if(v=e.algorithms.cipher,Array.isArray(v)&&v.length>0){for(h=m.SUPPORTED_CIPHER,i=0;i<v.length;++i)if(-1===h.indexOf(v[i]))throw new Error("Unsupported cipher algorithm: "+v[i]);f.cipher=v}v=e.algorithms.serverHostKey;var b=!1;if(Array.isArray(v)&&v.length>0){for(h=m.SUPPORTED_SERVER_HOST_KEY,i=v.length-1;i>=0;--i){if(-1===h.indexOf(v[i]))throw new Error("Unsupported server host key algorithm: "+v[i]);s[v[i]]||(b||(v=v.slice(),b=!0),v.splice(i,1))}v.length>0&&(f.serverHostKey=v)}if(v=e.algorithms.hmac,Array.isArray(v)&&v.length>0){for(h=m.SUPPORTED_HMAC,i=0;i<v.length;++i)if(-1===h.indexOf(v[i]))throw new Error("Unsupported HMAC algorithm: "+v[i]);f.hmac=v}if(v=e.algorithms.compress,Array.isArray(v)&&v.length>0){for(h=m.SUPPORTED_COMPRESS,i=0;i<v.length;++i)if(-1===h.indexOf(v[i]))throw new Error("Unsupported compression algorithm: "+v[i]);f.compress=v}}if(void 0===f.serverHostKey){var y=Object.keys(s);for(i=y.length-1;i>=0;--i)s[y[i]]||y.splice(i,1);f.serverHostKey=y}!n&&x.KEEPALIVE_INTERVAL>0&&x.KEEPALIVE_CLIENT_INTERVAL>0&&x.KEEPALIVE_CLIENT_COUNT_MAX>=0&&(n=new g(x.KEEPALIVE_INTERVAL,x.KEEPALIVE_CLIENT_INTERVAL,x.KEEPALIVE_CLIENT_COUNT_MAX));var E=this;a.call(this),"function"==typeof t&&E.on("connection",t);var _,S,k={algorithms:f,hostKeys:s,server:!0};for(i=0,S=(_=Object.keys(e)).length;i<S;++i){var T=_[i];"privateKey"!==T&&"publicKey"!==T&&"passphrase"!==T&&"algorithms"!==T&&"hostKeys"!==T&&"server"!==T&&(k[T]=e[T])}if("function"==typeof k.debug)var A=k.debug,O=Object.keys(k);this._srv=new r.Server((function(e){if(E._connections>=E.maxConnections)e.destroy();else{++E._connections,e.once("close",(function(e){--E._connections,a.read()})).on("error",(function(e){a.reset(),a.emit("error",e)}));var t=k;if(A){t={};for(var i,n=0;n<O.length;++n)t[i=O[n]]=k[i];var r="["+process.hrtime().join(".")+"] ";t.debug=function(e){A(r+e)}}var a=new u(t),s=new w(a,e);e.pipe(a).pipe(e),s.on("error",c),a.once("header",(function(t){if(!a._readableState.ended){if(!o(E,"connection"))return a.disconnect(d.BY_APPLICATION);s.removeListener("error",c),E.emit("connection",s,{ip:e.remoteAddress,family:e.remoteFamily,port:e.remotePort,header:t})}}))}function c(e){}})).on("error",(function(e){E.emit("error",e)})).on("listening",(function(){E.emit("listening")})).on("close",(function(){E.emit("close")})),this._connections=0,this.maxConnections=1/0}function w(e,t){a.call(this);var i=this;this._sshstream=e;var r=this._channels={};this._curChan=-1,this._sock=t,this.noMoreSessions=!1,this.authenticated=!1,e.on("end",(function(){t.resume(),i.emit("end")})).on("close",(function(e){i.emit("close",e)})).on("error",(function(e){i.emit("error",e)})).on("drain",(function(){i.emit("drain")})).on("continue",(function(){i.emit("continue")}));var s,c=0,p=!1,u=[];function l(t,n,r,a){if(0===c||s&&(s.username!==t||s.service!==n)||"password"!==r&&"publickey"!==r&&"hostbased"!==r&&"keyboard-interactive"!==r&&"none"!==r||10===u.length)return e.disconnect(d.PROTOCOL_ERROR);if("ssh-connection"!==n)return e.disconnect(d.SERVICE_NOT_AVAILABLE);var p;if(e._state.authMethod=r,"keyboard-interactive"===r?p=new k(e,t,n,r,a,f):"publickey"===r?p=new T(e,t,n,r,a,f):"hostbased"===r?p=new A(e,t,n,r,a,f):"password"===r?p=new O(e,t,n,r,a,f):"none"===r&&(p=new _(e,t,n,r,f)),s){if(!s._initialResponse)return u.push(p);s._multistep&&!this._finalResponse&&(s._cleanup&&s._cleanup(),s.emit("abort"))}s=p,o(i,"authentication")?i.emit("authentication",s):s.reject()}function f(t,n,r,a){s!==t||i.authenticated||(n?(e.removeListener("USERAUTH_REQUEST",l),s=void 0,i.authenticated=!0,e.authSuccess(),u=[],i.emit("ready")):(e.authFailure(r,a),u.length&&(s=u.pop(),o(i,"authentication")?i.emit("authentication",s):s.reject())))}e.on("SERVICE_REQUEST",(function(t){if(0===c||p||i.authenticated||"ssh-userauth"!==t)return e.disconnect(d.SERVICE_NOT_AVAILABLE);p=!0,e.serviceAccept(t)})).on("USERAUTH_REQUEST",l);var m=[];e.on("GLOBAL_REQUEST",(function(t,n,r){var a={type:null,buf:null};function s(t,i){a.type=t,a.buf=i,function(){for(var t;m.length>0&&m[0].type;)"SUCCESS"===(t=m.shift()).type&&e.requestSuccess(t.buf),"FAILURE"===t.type&&e.requestFailure()}()}if(n&&m.push(a),("tcpip-forward"===t||"cancel-tcpip-forward"===t||"no-more-sessions@openssh.com"===t||"streamlocal-forward@openssh.com"===t||"cancel-streamlocal-forward@openssh.com"===t)&&o(i,"request")&&i.authenticated){var c,p;if(n){var u=!1;c=function(e){var i;u||(u=!0,"tcpip-forward"===t&&0===r.bindPort&&"number"==typeof e&&(i=Buffer.allocUnsafe(4),b(i,e,0)),s("SUCCESS",i))},p=function(){u||(u=!0,s("FAILURE"))}}if("no-more-sessions@openssh.com"===t)return i.noMoreSessions=!0,void(c&&c());i.emit("request",c,p,t,r)}else n&&s("FAILURE")})),e.on("CHANNEL_OPEN",(function(t){if("session"===t.type&&i.noMoreSessions||!i.authenticated){var n=h.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,n)}var a,s,c=R(i),p=!1;if(!1===c)return e.channelOpenFail(t.sender,h.RESOURCE_SHORTAGE);switch(r[c]=!0,s=function(){if(!p){p=!0,delete r[c];var i=h.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,i)}},t.type){case"session":o(i,"session")?(a=function(){if(!p)return p=!0,e.channelOpenConfirm(t.sender,c,v.MAX_WINDOW,v.PACKET_SIZE),new E(i,t,c)},i.emit("session",a,s)):s();break;case"direct-tcpip":o(i,"tcpip")?(a=function(){if(!p){p=!0,e.channelOpenConfirm(t.sender,c,v.MAX_WINDOW,v.PACKET_SIZE);var n={type:void 0,incoming:{id:c,window:v.MAX_WINDOW,packetSize:v.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new v(n,i)}},i.emit("tcpip",a,s,t.data)):s();break;case"direct-streamlocal@openssh.com":o(i,"openssh.streamlocal")?(a=function(){if(!p){p=!0,e.channelOpenConfirm(t.sender,c,v.MAX_WINDOW,v.PACKET_SIZE);var n={type:void 0,incoming:{id:c,window:v.MAX_WINDOW,packetSize:v.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new v(n,i)}},i.emit("openssh.streamlocal",a,s,t.data)):s();break;default:s()}})),e.on("NEWKEYS",(function(){++c>1&&i.emit("rekey")})),n&&this.once("ready",(function(){n.add(e)}))}function E(e,t,i){this.subtype=void 0;var n,r=!1,a=this,s=t.sender,c={type:"session",incoming:{id:i,window:v.MAX_WINDOW,packetSize:v.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};e._sshstream.on("CHANNEL_REQUEST:"+i,(function(t){var i,p,u=!1;if(t.wantReply&&("shell"!==t.request&&"exec"!==t.request&&"subsystem"!==t.request&&(i=function(){if(!(u||r||n))return u=!0,e._sshstream.channelSuccess(s)}),p=function(){if(!(u||r||n))return u=!0,e._sshstream.channelFailure(s)}),r)p&&p();else switch(t.request){case"env":o(a,"env")?a.emit("env",i,p,{key:t.key,val:t.val}):p&&p();break;case"pty-req":o(a,"pty")?a.emit("pty",i,p,{cols:t.cols,rows:t.rows,width:t.width,height:t.height,term:t.term,modes:t.modes}):p&&p();break;case"window-change":o(a,"window-change")?a.emit("window-change",i,p,{cols:t.cols,rows:t.rows,width:t.width,height:t.height}):p&&p();break;case"x11-req":o(a,"x11")?a.emit("x11",i,p,{single:t.single,protocol:t.protocol,cookie:t.cookie,screen:t.screen}):p&&p();break;case"signal":o(a,"signal")?a.emit("signal",i,p,{name:t.signal}):p&&p();break;case"auth-agent-req@openssh.com":o(a,"auth-agent")?a.emit("auth-agent",i,p):p&&p();break;case"shell":o(a,"shell")?(i=function(){if(!(u||r||n))return u=!0,t.wantReply&&e._sshstream.channelSuccess(s),(n=new v(c,e,{server:!0})).subtype=a.subtype=t.request,n},a.emit("shell",i,p)):p&&p();break;case"exec":o(a,"exec")?(i=function(){if(!(u||r||n))return u=!0,t.wantReply&&e._sshstream.channelSuccess(s),(n=new v(c,e,{server:!0})).subtype=a.subtype=t.request,n},a.emit("exec",i,p,{command:t.command})):p&&p();break;case"subsystem":i=function(){if(!(u||r||n)){if(u=!0,t.wantReply&&e._sshstream.channelSuccess(s),(n=new v(c,e,{server:!0})).subtype=a.subtype=t.request+":"+t.subsystem,"sftp"===t.subsystem){var i=new l({server:!0,debug:e._sshstream.debug});return n.pipe(i).pipe(n),i}return n}},"sftp"===t.subsystem&&o(a,"sftp")?a.emit("sftp",i,p):"sftp"!==t.subsystem&&o(a,"subsystem")?a.emit("subsystem",i,p,{name:t.subsystem}):p&&p();break;default:p&&p()}})).once("CHANNEL_EOF:"+i,(function(){r=!0,a.emit("eof"),a.emit("end")})).once("CHANNEL_CLOSE:"+i,(function(){r=!0,a.emit("close")}))}function _(e,t,i,n,r){a.call(this);var o=this;this.username=this.user=t,this.service=i,this.method=n,this._initialResponse=!1,this._finalResponse=!1,this._multistep=!1,this._cbfinal=function(e,t,i){o._finalResponse||(o._finalResponse=!0,r(o,e,t,i))},this._stream=e}s(x,a),x.prototype.listen=function(){return this._srv.listen.apply(this._srv,arguments),this},x.prototype.address=function(){return this._srv.address()},x.prototype.getConnections=function(e){this._srv.getConnections(e)},x.prototype.close=function(e){return this._srv.close(e),this},x.prototype.ref=function(){this._srv.ref()},x.prototype.unref=function(){this._srv.unref()},s(w,a),w.prototype.end=function(){return this._sshstream.disconnect(d.BY_APPLICATION)},w.prototype.x11=function(e,t,i){return C(this,"x11",{originAddr:e,originPort:t},i)},w.prototype.forwardOut=function(e,t,i,n,r){return C(this,"forwarded-tcpip",{boundAddr:e,boundPort:t,remoteAddr:i,remotePort:n},r)},w.prototype.openssh_forwardOutStreamLocal=function(e,t){return C(this,"forwarded-streamlocal@openssh.com",{socketPath:e},t)},w.prototype.rekey=function(e){var t,i=this._sshstream,n=!0;try{n=i.rekey()}catch(e){t=e}return"function"==typeof e&&(t?process.nextTick((function(){e(t)})):this.once("rekey",e)),n},s(E,a),s(_,a),_.prototype.accept=function(){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!0)},_.prototype.reject=function(e,t){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!1,e,t)};var S=/[ \t\r\n]*,[ \t\r\n]*/g;function k(e,t,i,n,r,a){_.call(this,e,t,i,n,a),this._multistep=!0;var o=this;this._cb=void 0,this._onInfoResponse=function(e){if(o._cb){var t=o._cb;o._cb=void 0,t(e)}},this.submethods=r.split(S),this.on("abort",(function(){o._cb&&o._cb(new Error("Authentication request aborted"))}))}function T(e,t,i,n,r,a){var o;if(_.call(this,e,t,i,n,a),this.key={algo:r.keyAlgo,data:r.key},this.signature=r.signature,this.signature)switch(r.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=r.blob}function A(e,t,i,n,r,a){var o;if(_.call(this,e,t,i,n,a),this.key={algo:r.keyAlgo,data:r.key},this.signature=r.signature,this.signature)switch(r.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=r.blob,this.localHostname=r.localHostname,this.localUsername=r.localUsername}function O(e,t,i,n,r,a){_.call(this,e,t,i,n,a),this.password=r}function C(e,t,i,n){var r=R(e),a=v.MAX_WINDOW,o=v.PACKET_SIZE,s=!0;if(!1===r)return n(new Error("No free channels available"));"function"==typeof i&&(n=i,i={}),e._channels[r]=!0;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+r,(function(i){c.removeAllListeners("CHANNEL_OPEN_FAILURE:"+r);var s={type:t,incoming:{id:r,window:a,packetSize:o,state:"open"},outgoing:{id:i.sender,window:i.window,packetSize:i.packetSize,state:"open"}};n(void 0,new v(s,e,{server:!0}))})).once("CHANNEL_OPEN_FAILURE:"+r,(function(t){c.removeAllListeners("CHANNEL_OPEN_CONFIRMATION:"+r),delete e._channels[r];var i=new Error("(SSH) Channel open failure: "+t.description);i.reason=t.reason,i.lang=t.lang,n(i)})),"forwarded-tcpip"===t?s=c.forwardedTcpip(r,a,o,i):"x11"===t?s=c.x11(r,a,o,i):"forwarded-streamlocal@openssh.com"===t&&(s=c.openssh_forwardedStreamLocal(r,a,o,i)),s}function R(e){if(e._curChan<y)return++e._curChan;for(var t=0,i=e._channels;t<y;++t)if(!i[t])return t;return!1}s(k,_),k.prototype._cleanup=function(){this._stream.removeListener("USERAUTH_INFO_RESPONSE",this._onInfoResponse)},k.prototype.prompt=function(e,t,i,n){Array.isArray(e)||(e=[e]),"function"==typeof t?(n=t,t=i=void 0):"function"==typeof i&&(n=i,i=void 0);for(var r=0;r<e.length;++r)"string"==typeof e[r]&&(e[r]={prompt:e[r],echo:!0});return this._cb=n,this._initialResponse=!0,this._stream.once("USERAUTH_INFO_RESPONSE",this._onInfoResponse),this._stream.authInfoReq(t,i,e)},s(T,_),T.prototype.accept=function(){this.signature?_.prototype.accept.call(this):(this._initialResponse=!0,this._stream.authPKOK(this.key.algo,this.key.data))},s(A,_),s(O,_),x.createServer=function(e,t){return new x(e,t)},x.KEEPALIVE_INTERVAL=1e3,x.KEEPALIVE_CLIENT_INTERVAL=15e3,x.KEEPALIVE_CLIENT_COUNT_MAX=3,e.exports=x,e.exports.IncomingClient=w},7799:e=>{"use strict";e.exports=JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}')},4917:(e,t,i)=>{"use strict";var n=i(7799);function r(e){if("number"==typeof e){if(!r[e])throw new Error("invalid status code: "+e);return e}if("string"!=typeof e)throw new TypeError("code must be a number or string");var t=parseInt(e,10);if(!isNaN(t)){if(!r[t])throw new Error("invalid status code: "+t);return t}if(!(t=r[e.toLowerCase()]))throw new Error('invalid status message: "'+e+'"');return t}e.exports=r,r.STATUS_CODES=n,r.codes=function(e,t){var i=[];return Object.keys(t).forEach((function(n){var r=t[n],a=Number(n);e[a]=r,e[r]=a,e[r.toLowerCase()]=a,i.push(a)})),i}(r,n),r.redirect={300:!0,301:!0,302:!0,303:!0,305:!0,307:!0,308:!0},r.empty={204:!0,205:!0,304:!0},r.retry={502:!0,503:!0,504:!0}},1301:(e,t,i)=>{var n=i(8614).EventEmitter;function r(e,t,i,n,r){for(var a=0;a<r;++a,++t,++n)if(e[t]!==i[n])return!1;return!0}function a(e){"string"==typeof e&&(e=new Buffer(e));var t,i,n=e.length;for(this.maxMatches=1/0,this.matches=0,this._occ=new Array(256),this._lookbehind_size=0,this._needle=e,this._bufpos=0,this._lookbehind=new Buffer(n),i=0;i<256;++i)this._occ[i]=n;if(n>=1)for(t=0;t<n-1;++t)this._occ[e[t]]=n-1-t}(0,i(1669).inherits)(a,n),a.prototype.reset=function(){this._lookbehind_size=0,this.matches=0,this._bufpos=0},a.prototype.push=function(e,t){var i,n;for(Buffer.isBuffer(e)||(e=new Buffer(e,"binary")),n=e.length,this._bufpos=t||0;i!==n&&this.matches<this.maxMatches;)i=this._sbmh_feed(e);return i},a.prototype._sbmh_feed=function(e){var t=e.length,i=this._needle,n=i.length,a=-this._lookbehind_size,o=i[n-1],s=this._occ,c=this._lookbehind;if(a<0){for(;a<0&&a<=t-n;){if((u=this._sbmh_lookup_char(e,a+n-1))===o&&this._sbmh_memcmp(e,a,n-1))return this._lookbehind_size=0,++this.matches,a>-this._lookbehind_size?this.emit("info",!0,c,0,this._lookbehind_size+a):this.emit("info",!0),this._bufpos=a+n,a+n;a+=s[u]}if(a<0)for(;a<0&&!this._sbmh_memcmp(e,a,t-a);)a++;if(!(a>=0)){var p=this._lookbehind_size+a;return p>0&&this.emit("info",!1,c,0,p),c.copy(c,0,p,this._lookbehind_size-p),this._lookbehind_size-=p,e.copy(c,this._lookbehind_size),this._lookbehind_size+=t,this._bufpos=t,t}this.emit("info",!1,c,0,this._lookbehind_size),this._lookbehind_size=0}for(a>=0&&(a+=this._bufpos);a<=t-n;){var u;if((u=e[a+n-1])===o&&e[a]===i[0]&&r(i,0,e,a,n-1))return++this.matches,a>0?this.emit("info",!0,e,this._bufpos,a):this.emit("info",!0),this._bufpos=a+n,a+n;a+=s[u]}if(a<t){for(;a<t&&(e[a]!==i[0]||!r(e,a,i,0,t-a));)++a;a<t&&(e.copy(c,0,a,a+(t-a)),this._lookbehind_size=t-a)}return a>0&&this.emit("info",!1,e,this._bufpos,a<t?a:t),this._bufpos=t,t},a.prototype._sbmh_lookup_char=function(e,t){return t<0?this._lookbehind[this._lookbehind_size+t]:e[t]},a.prototype._sbmh_memcmp=function(e,t,i){for(var n=0;n<i;){if(this._sbmh_lookup_char(e,t+n)!==this._needle[n])return!1;++n}return!0},e.exports=a},2553:(e,t,i)=>{"use strict";var n=i(396).Buffer,r=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=c,this.end=p,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=l,t=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,i=function(e,t,i){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==i?i:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function c(e,t){if((e.length-t)%2==0){var i=e.toString("utf16le",t);if(i){var n=i.charCodeAt(i.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function p(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,i)}return t}function u(e,t){var i=(e.length-t)%3;return 0===i?e.toString("base64",t):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-i))}function l(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function f(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.s=a,a.prototype.write=function(e){if(0===e.length)return"";var t,i;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<e.length?t?t+this.text(e,i):this.text(e,i):t||""},a.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},a.prototype.text=function(e,t){var i=function(e,t,i){var n=t.length-1;if(n<i)return 0;var r=o(t[n]);return r>=0?(r>0&&(e.lastNeed=r-1),r):--n<i||-2===r?0:(r=o(t[n]))>=0?(r>0&&(e.lastNeed=r-2),r):--n<i||-2===r?0:(r=o(t[n]))>=0?(r>0&&(2===r?r=0:e.lastNeed=r-3),r):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=i;var n=e.length-(i-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},396:(e,t,i)=>{var n=i(4293),r=n.Buffer;function a(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return r(e,t,i)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=n:(a(n,t),t.Buffer=o),o.prototype=Object.create(r.prototype),a(r,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=r(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},2953:e=>{e.exports=function(e){return e.split(" ").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join("").replace(/[^ _0-9a-z]/gi,"")}},2222:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,a){function o(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=i(9268),o=r(i(1111)),s=a.Router();s.post("/get",((e,t)=>n(void 0,void 0,void 0,(function*(){const{host:i,port:r,username:a,password:s,source:c,destination:p,filter:u}=e.body,l=new o.default;try{yield l.connect({host:i,port:r,username:a,password:s}),(yield l.list(c)).filter((e=>e.name.includes(u))).forEach((e=>n(void 0,void 0,void 0,(function*(){try{yield l.fastGet(c+"/"+e.name,p+"/"+e.name)}catch(e){throw e}})))),t.status(200).end()}catch(e){t.status(400).send(e)}})))),t.default=s},3607:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(i(9268)),a=n(i(7846)),o=n(i(2222));let s=process.env.PORT||"5000";const c=r.default();c.use(r.default.json({limit:"50mb"})),c.use(r.default.urlencoded({extended:!1})),c.use(a.default()),c.use("/sftp",o.default),c.get("/",((e,t)=>{t.send("Bioportal SFTP API")})),c.listen(s)},780:(e,t,i)=>{!function(e){"use strict";var t=function(e){var t,i=new Float64Array(16);if(e)for(t=0;t<e.length;t++)i[t]=e[t];return i},n=function(){throw new Error("no PRNG")},r=new Uint8Array(16),a=new Uint8Array(32);a[0]=9;var o=t(),s=t([1]),c=t([56129,1]),p=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),f=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),d=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t,i,n){e[t]=i>>24&255,e[t+1]=i>>16&255,e[t+2]=i>>8&255,e[t+3]=255&i,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function m(e,t,i,n,r){var a,o=0;for(a=0;a<r;a++)o|=e[t+a]^i[n+a];return(1&o-1>>>8)-1}function v(e,t,i,n){return m(e,t,i,n,16)}function g(e,t,i,n){return m(e,t,i,n,32)}function b(e,t,i,n){!function(e,t,i,n){for(var r,a=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,s=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,c=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,p=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,d=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,m=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,v=255&i[16]|(255&i[17])<<8|(255&i[18])<<16|(255&i[19])<<24,g=255&i[20]|(255&i[21])<<8|(255&i[22])<<16|(255&i[23])<<24,b=255&i[24]|(255&i[25])<<8|(255&i[26])<<16|(255&i[27])<<24,y=255&i[28]|(255&i[29])<<8|(255&i[30])<<16|(255&i[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=a,E=o,_=s,S=c,k=p,T=u,A=l,O=f,C=d,R=h,B=m,N=v,U=g,P=b,L=y,I=x,D=0;D<20;D+=2)w^=(r=(U^=(r=(C^=(r=(k^=(r=w+U|0)<<7|r>>>25)+w|0)<<9|r>>>23)+k|0)<<13|r>>>19)+C|0)<<18|r>>>14,T^=(r=(E^=(r=(P^=(r=(R^=(r=T+E|0)<<7|r>>>25)+T|0)<<9|r>>>23)+R|0)<<13|r>>>19)+P|0)<<18|r>>>14,B^=(r=(A^=(r=(_^=(r=(L^=(r=B+A|0)<<7|r>>>25)+B|0)<<9|r>>>23)+L|0)<<13|r>>>19)+_|0)<<18|r>>>14,I^=(r=(N^=(r=(O^=(r=(S^=(r=I+N|0)<<7|r>>>25)+I|0)<<9|r>>>23)+S|0)<<13|r>>>19)+O|0)<<18|r>>>14,w^=(r=(S^=(r=(_^=(r=(E^=(r=w+S|0)<<7|r>>>25)+w|0)<<9|r>>>23)+E|0)<<13|r>>>19)+_|0)<<18|r>>>14,T^=(r=(k^=(r=(O^=(r=(A^=(r=T+k|0)<<7|r>>>25)+T|0)<<9|r>>>23)+A|0)<<13|r>>>19)+O|0)<<18|r>>>14,B^=(r=(R^=(r=(C^=(r=(N^=(r=B+R|0)<<7|r>>>25)+B|0)<<9|r>>>23)+N|0)<<13|r>>>19)+C|0)<<18|r>>>14,I^=(r=(L^=(r=(P^=(r=(U^=(r=I+L|0)<<7|r>>>25)+I|0)<<9|r>>>23)+U|0)<<13|r>>>19)+P|0)<<18|r>>>14;w=w+a|0,E=E+o|0,_=_+s|0,S=S+c|0,k=k+p|0,T=T+u|0,A=A+l|0,O=O+f|0,C=C+d|0,R=R+h|0,B=B+m|0,N=N+v|0,U=U+g|0,P=P+b|0,L=L+y|0,I=I+x|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=E>>>0&255,e[5]=E>>>8&255,e[6]=E>>>16&255,e[7]=E>>>24&255,e[8]=_>>>0&255,e[9]=_>>>8&255,e[10]=_>>>16&255,e[11]=_>>>24&255,e[12]=S>>>0&255,e[13]=S>>>8&255,e[14]=S>>>16&255,e[15]=S>>>24&255,e[16]=k>>>0&255,e[17]=k>>>8&255,e[18]=k>>>16&255,e[19]=k>>>24&255,e[20]=T>>>0&255,e[21]=T>>>8&255,e[22]=T>>>16&255,e[23]=T>>>24&255,e[24]=A>>>0&255,e[25]=A>>>8&255,e[26]=A>>>16&255,e[27]=A>>>24&255,e[28]=O>>>0&255,e[29]=O>>>8&255,e[30]=O>>>16&255,e[31]=O>>>24&255,e[32]=C>>>0&255,e[33]=C>>>8&255,e[34]=C>>>16&255,e[35]=C>>>24&255,e[36]=R>>>0&255,e[37]=R>>>8&255,e[38]=R>>>16&255,e[39]=R>>>24&255,e[40]=B>>>0&255,e[41]=B>>>8&255,e[42]=B>>>16&255,e[43]=B>>>24&255,e[44]=N>>>0&255,e[45]=N>>>8&255,e[46]=N>>>16&255,e[47]=N>>>24&255,e[48]=U>>>0&255,e[49]=U>>>8&255,e[50]=U>>>16&255,e[51]=U>>>24&255,e[52]=P>>>0&255,e[53]=P>>>8&255,e[54]=P>>>16&255,e[55]=P>>>24&255,e[56]=L>>>0&255,e[57]=L>>>8&255,e[58]=L>>>16&255,e[59]=L>>>24&255,e[60]=I>>>0&255,e[61]=I>>>8&255,e[62]=I>>>16&255,e[63]=I>>>24&255}(e,t,i,n)}function y(e,t,i,n){!function(e,t,i,n){for(var r,a=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,s=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,c=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,p=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,d=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,m=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,v=255&i[16]|(255&i[17])<<8|(255&i[18])<<16|(255&i[19])<<24,g=255&i[20]|(255&i[21])<<8|(255&i[22])<<16|(255&i[23])<<24,b=255&i[24]|(255&i[25])<<8|(255&i[26])<<16|(255&i[27])<<24,y=255&i[28]|(255&i[29])<<8|(255&i[30])<<16|(255&i[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=0;w<20;w+=2)a^=(r=(g^=(r=(d^=(r=(p^=(r=a+g|0)<<7|r>>>25)+a|0)<<9|r>>>23)+p|0)<<13|r>>>19)+d|0)<<18|r>>>14,u^=(r=(o^=(r=(b^=(r=(h^=(r=u+o|0)<<7|r>>>25)+u|0)<<9|r>>>23)+h|0)<<13|r>>>19)+b|0)<<18|r>>>14,m^=(r=(l^=(r=(s^=(r=(y^=(r=m+l|0)<<7|r>>>25)+m|0)<<9|r>>>23)+y|0)<<13|r>>>19)+s|0)<<18|r>>>14,x^=(r=(v^=(r=(f^=(r=(c^=(r=x+v|0)<<7|r>>>25)+x|0)<<9|r>>>23)+c|0)<<13|r>>>19)+f|0)<<18|r>>>14,a^=(r=(c^=(r=(s^=(r=(o^=(r=a+c|0)<<7|r>>>25)+a|0)<<9|r>>>23)+o|0)<<13|r>>>19)+s|0)<<18|r>>>14,u^=(r=(p^=(r=(f^=(r=(l^=(r=u+p|0)<<7|r>>>25)+u|0)<<9|r>>>23)+l|0)<<13|r>>>19)+f|0)<<18|r>>>14,m^=(r=(h^=(r=(d^=(r=(v^=(r=m+h|0)<<7|r>>>25)+m|0)<<9|r>>>23)+v|0)<<13|r>>>19)+d|0)<<18|r>>>14,x^=(r=(y^=(r=(b^=(r=(g^=(r=x+y|0)<<7|r>>>25)+x|0)<<9|r>>>23)+g|0)<<13|r>>>19)+b|0)<<18|r>>>14;e[0]=a>>>0&255,e[1]=a>>>8&255,e[2]=a>>>16&255,e[3]=a>>>24&255,e[4]=u>>>0&255,e[5]=u>>>8&255,e[6]=u>>>16&255,e[7]=u>>>24&255,e[8]=m>>>0&255,e[9]=m>>>8&255,e[10]=m>>>16&255,e[11]=m>>>24&255,e[12]=x>>>0&255,e[13]=x>>>8&255,e[14]=x>>>16&255,e[15]=x>>>24&255,e[16]=l>>>0&255,e[17]=l>>>8&255,e[18]=l>>>16&255,e[19]=l>>>24&255,e[20]=f>>>0&255,e[21]=f>>>8&255,e[22]=f>>>16&255,e[23]=f>>>24&255,e[24]=d>>>0&255,e[25]=d>>>8&255,e[26]=d>>>16&255,e[27]=d>>>24&255,e[28]=h>>>0&255,e[29]=h>>>8&255,e[30]=h>>>16&255,e[31]=h>>>24&255}(e,t,i,n)}var x=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function w(e,t,i,n,r,a,o){var s,c,p=new Uint8Array(16),u=new Uint8Array(64);for(c=0;c<16;c++)p[c]=0;for(c=0;c<8;c++)p[c]=a[c];for(;r>=64;){for(b(u,p,o,x),c=0;c<64;c++)e[t+c]=i[n+c]^u[c];for(s=1,c=8;c<16;c++)s=s+(255&p[c])|0,p[c]=255&s,s>>>=8;r-=64,t+=64,n+=64}if(r>0)for(b(u,p,o,x),c=0;c<r;c++)e[t+c]=i[n+c]^u[c];return 0}function E(e,t,i,n,r){var a,o,s=new Uint8Array(16),c=new Uint8Array(64);for(o=0;o<16;o++)s[o]=0;for(o=0;o<8;o++)s[o]=n[o];for(;i>=64;){for(b(c,s,r,x),o=0;o<64;o++)e[t+o]=c[o];for(a=1,o=8;o<16;o++)a=a+(255&s[o])|0,s[o]=255&a,a>>>=8;i-=64,t+=64}if(i>0)for(b(c,s,r,x),o=0;o<i;o++)e[t+o]=c[o];return 0}function _(e,t,i,n,r){var a=new Uint8Array(32);y(a,n,r,x);for(var o=new Uint8Array(8),s=0;s<8;s++)o[s]=n[s+16];return E(e,t,i,o,a)}function S(e,t,i,n,r,a,o){var s=new Uint8Array(32);y(s,a,o,x);for(var c=new Uint8Array(8),p=0;p<8;p++)c[p]=a[p+16];return w(e,t,i,n,r,c,s)}var k=function(e){var t,i,n,r,a,o,s,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,i=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|i<<3),n=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(i>>>10|n<<6),r=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(n>>>7|r<<9),a=255&e[8]|(255&e[9])<<8,this.r[4]=255&(r>>>4|a<<12),this.r[5]=a>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(a>>>14|o<<2),s=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(o>>>11|s<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(s>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function T(e,t,i,n,r,a){var o=new k(a);return o.update(i,n,r),o.finish(e,t),0}function A(e,t,i,n,r,a){var o=new Uint8Array(16);return T(o,0,i,n,r,a),v(e,t,o,0)}function O(e,t,i,n,r){var a;if(i<32)return-1;for(S(e,0,t,0,i,n,r),T(e,16,e,32,i-32,e),a=0;a<16;a++)e[a]=0;return 0}function C(e,t,i,n,r){var a,o=new Uint8Array(32);if(i<32)return-1;if(_(o,0,32,n,r),0!==A(t,16,t,32,i-32,o))return-1;for(S(e,0,t,0,i,n,r),a=0;a<32;a++)e[a]=0;return 0}function R(e,t){var i;for(i=0;i<16;i++)e[i]=0|t[i]}function B(e){var t,i,n=1;for(t=0;t<16;t++)i=e[t]+n+65535,n=Math.floor(i/65536),e[t]=i-65536*n;e[0]+=n-1+37*(n-1)}function N(e,t,i){for(var n,r=~(i-1),a=0;a<16;a++)n=r&(e[a]^t[a]),e[a]^=n,t[a]^=n}function U(e,i){var n,r,a,o=t(),s=t();for(n=0;n<16;n++)s[n]=i[n];for(B(s),B(s),B(s),r=0;r<2;r++){for(o[0]=s[0]-65517,n=1;n<15;n++)o[n]=s[n]-65535-(o[n-1]>>16&1),o[n-1]&=65535;o[15]=s[15]-32767-(o[14]>>16&1),a=o[15]>>16&1,o[14]&=65535,N(s,o,1-a)}for(n=0;n<16;n++)e[2*n]=255&s[n],e[2*n+1]=s[n]>>8}function P(e,t){var i=new Uint8Array(32),n=new Uint8Array(32);return U(i,e),U(n,t),g(i,0,n,0)}function L(e){var t=new Uint8Array(32);return U(t,e),1&t[0]}function I(e,t){var i;for(i=0;i<16;i++)e[i]=t[2*i]+(t[2*i+1]<<8);e[15]&=32767}function D(e,t,i){for(var n=0;n<16;n++)e[n]=t[n]+i[n]}function j(e,t,i){for(var n=0;n<16;n++)e[n]=t[n]-i[n]}function H(e,t,i){var n,r,a=0,o=0,s=0,c=0,p=0,u=0,l=0,f=0,d=0,h=0,m=0,v=0,g=0,b=0,y=0,x=0,w=0,E=0,_=0,S=0,k=0,T=0,A=0,O=0,C=0,R=0,B=0,N=0,U=0,P=0,L=0,I=i[0],D=i[1],j=i[2],H=i[3],M=i[4],q=i[5],F=i[6],z=i[7],K=i[8],G=i[9],$=i[10],W=i[11],X=i[12],V=i[13],Y=i[14],Q=i[15];a+=(n=t[0])*I,o+=n*D,s+=n*j,c+=n*H,p+=n*M,u+=n*q,l+=n*F,f+=n*z,d+=n*K,h+=n*G,m+=n*$,v+=n*W,g+=n*X,b+=n*V,y+=n*Y,x+=n*Q,o+=(n=t[1])*I,s+=n*D,c+=n*j,p+=n*H,u+=n*M,l+=n*q,f+=n*F,d+=n*z,h+=n*K,m+=n*G,v+=n*$,g+=n*W,b+=n*X,y+=n*V,x+=n*Y,w+=n*Q,s+=(n=t[2])*I,c+=n*D,p+=n*j,u+=n*H,l+=n*M,f+=n*q,d+=n*F,h+=n*z,m+=n*K,v+=n*G,g+=n*$,b+=n*W,y+=n*X,x+=n*V,w+=n*Y,E+=n*Q,c+=(n=t[3])*I,p+=n*D,u+=n*j,l+=n*H,f+=n*M,d+=n*q,h+=n*F,m+=n*z,v+=n*K,g+=n*G,b+=n*$,y+=n*W,x+=n*X,w+=n*V,E+=n*Y,_+=n*Q,p+=(n=t[4])*I,u+=n*D,l+=n*j,f+=n*H,d+=n*M,h+=n*q,m+=n*F,v+=n*z,g+=n*K,b+=n*G,y+=n*$,x+=n*W,w+=n*X,E+=n*V,_+=n*Y,S+=n*Q,u+=(n=t[5])*I,l+=n*D,f+=n*j,d+=n*H,h+=n*M,m+=n*q,v+=n*F,g+=n*z,b+=n*K,y+=n*G,x+=n*$,w+=n*W,E+=n*X,_+=n*V,S+=n*Y,k+=n*Q,l+=(n=t[6])*I,f+=n*D,d+=n*j,h+=n*H,m+=n*M,v+=n*q,g+=n*F,b+=n*z,y+=n*K,x+=n*G,w+=n*$,E+=n*W,_+=n*X,S+=n*V,k+=n*Y,T+=n*Q,f+=(n=t[7])*I,d+=n*D,h+=n*j,m+=n*H,v+=n*M,g+=n*q,b+=n*F,y+=n*z,x+=n*K,w+=n*G,E+=n*$,_+=n*W,S+=n*X,k+=n*V,T+=n*Y,A+=n*Q,d+=(n=t[8])*I,h+=n*D,m+=n*j,v+=n*H,g+=n*M,b+=n*q,y+=n*F,x+=n*z,w+=n*K,E+=n*G,_+=n*$,S+=n*W,k+=n*X,T+=n*V,A+=n*Y,O+=n*Q,h+=(n=t[9])*I,m+=n*D,v+=n*j,g+=n*H,b+=n*M,y+=n*q,x+=n*F,w+=n*z,E+=n*K,_+=n*G,S+=n*$,k+=n*W,T+=n*X,A+=n*V,O+=n*Y,C+=n*Q,m+=(n=t[10])*I,v+=n*D,g+=n*j,b+=n*H,y+=n*M,x+=n*q,w+=n*F,E+=n*z,_+=n*K,S+=n*G,k+=n*$,T+=n*W,A+=n*X,O+=n*V,C+=n*Y,R+=n*Q,v+=(n=t[11])*I,g+=n*D,b+=n*j,y+=n*H,x+=n*M,w+=n*q,E+=n*F,_+=n*z,S+=n*K,k+=n*G,T+=n*$,A+=n*W,O+=n*X,C+=n*V,R+=n*Y,B+=n*Q,g+=(n=t[12])*I,b+=n*D,y+=n*j,x+=n*H,w+=n*M,E+=n*q,_+=n*F,S+=n*z,k+=n*K,T+=n*G,A+=n*$,O+=n*W,C+=n*X,R+=n*V,B+=n*Y,N+=n*Q,b+=(n=t[13])*I,y+=n*D,x+=n*j,w+=n*H,E+=n*M,_+=n*q,S+=n*F,k+=n*z,T+=n*K,A+=n*G,O+=n*$,C+=n*W,R+=n*X,B+=n*V,N+=n*Y,U+=n*Q,y+=(n=t[14])*I,x+=n*D,w+=n*j,E+=n*H,_+=n*M,S+=n*q,k+=n*F,T+=n*z,A+=n*K,O+=n*G,C+=n*$,R+=n*W,B+=n*X,N+=n*V,U+=n*Y,P+=n*Q,x+=(n=t[15])*I,o+=38*(E+=n*j),s+=38*(_+=n*H),c+=38*(S+=n*M),p+=38*(k+=n*q),u+=38*(T+=n*F),l+=38*(A+=n*z),f+=38*(O+=n*K),d+=38*(C+=n*G),h+=38*(R+=n*$),m+=38*(B+=n*W),v+=38*(N+=n*X),g+=38*(U+=n*V),b+=38*(P+=n*Y),y+=38*(L+=n*Q),a=(n=(a+=38*(w+=n*D))+(r=1)+65535)-65536*(r=Math.floor(n/65536)),o=(n=o+r+65535)-65536*(r=Math.floor(n/65536)),s=(n=s+r+65535)-65536*(r=Math.floor(n/65536)),c=(n=c+r+65535)-65536*(r=Math.floor(n/65536)),p=(n=p+r+65535)-65536*(r=Math.floor(n/65536)),u=(n=u+r+65535)-65536*(r=Math.floor(n/65536)),l=(n=l+r+65535)-65536*(r=Math.floor(n/65536)),f=(n=f+r+65535)-65536*(r=Math.floor(n/65536)),d=(n=d+r+65535)-65536*(r=Math.floor(n/65536)),h=(n=h+r+65535)-65536*(r=Math.floor(n/65536)),m=(n=m+r+65535)-65536*(r=Math.floor(n/65536)),v=(n=v+r+65535)-65536*(r=Math.floor(n/65536)),g=(n=g+r+65535)-65536*(r=Math.floor(n/65536)),b=(n=b+r+65535)-65536*(r=Math.floor(n/65536)),y=(n=y+r+65535)-65536*(r=Math.floor(n/65536)),x=(n=x+r+65535)-65536*(r=Math.floor(n/65536)),a=(n=(a+=r-1+37*(r-1))+(r=1)+65535)-65536*(r=Math.floor(n/65536)),o=(n=o+r+65535)-65536*(r=Math.floor(n/65536)),s=(n=s+r+65535)-65536*(r=Math.floor(n/65536)),c=(n=c+r+65535)-65536*(r=Math.floor(n/65536)),p=(n=p+r+65535)-65536*(r=Math.floor(n/65536)),u=(n=u+r+65535)-65536*(r=Math.floor(n/65536)),l=(n=l+r+65535)-65536*(r=Math.floor(n/65536)),f=(n=f+r+65535)-65536*(r=Math.floor(n/65536)),d=(n=d+r+65535)-65536*(r=Math.floor(n/65536)),h=(n=h+r+65535)-65536*(r=Math.floor(n/65536)),m=(n=m+r+65535)-65536*(r=Math.floor(n/65536)),v=(n=v+r+65535)-65536*(r=Math.floor(n/65536)),g=(n=g+r+65535)-65536*(r=Math.floor(n/65536)),b=(n=b+r+65535)-65536*(r=Math.floor(n/65536)),y=(n=y+r+65535)-65536*(r=Math.floor(n/65536)),x=(n=x+r+65535)-65536*(r=Math.floor(n/65536)),a+=r-1+37*(r-1),e[0]=a,e[1]=o,e[2]=s,e[3]=c,e[4]=p,e[5]=u,e[6]=l,e[7]=f,e[8]=d,e[9]=h,e[10]=m,e[11]=v,e[12]=g,e[13]=b,e[14]=y,e[15]=x}function M(e,t){H(e,t,t)}function q(e,i){var n,r=t();for(n=0;n<16;n++)r[n]=i[n];for(n=253;n>=0;n--)M(r,r),2!==n&&4!==n&&H(r,r,i);for(n=0;n<16;n++)e[n]=r[n]}function F(e,i,n){var r,a,o=new Uint8Array(32),s=new Float64Array(80),p=t(),u=t(),l=t(),f=t(),d=t(),h=t();for(a=0;a<31;a++)o[a]=i[a];for(o[31]=127&i[31]|64,o[0]&=248,I(s,n),a=0;a<16;a++)u[a]=s[a],f[a]=p[a]=l[a]=0;for(p[0]=f[0]=1,a=254;a>=0;--a)N(p,u,r=o[a>>>3]>>>(7&a)&1),N(l,f,r),D(d,p,l),j(p,p,l),D(l,u,f),j(u,u,f),M(f,d),M(h,p),H(p,l,p),H(l,u,d),D(d,p,l),j(p,p,l),M(u,p),j(l,f,h),H(p,l,c),D(p,p,f),H(l,l,p),H(p,f,h),H(f,u,s),M(u,d),N(p,u,r),N(l,f,r);for(a=0;a<16;a++)s[a+16]=p[a],s[a+32]=l[a],s[a+48]=u[a],s[a+64]=f[a];var m=s.subarray(32),v=s.subarray(16);return q(m,m),H(v,v,m),U(e,v),0}function z(e,t){return F(e,t,a)}function K(e,t){return n(t,32),z(e,t)}function G(e,t,i){var n=new Uint8Array(32);return F(n,i,t),y(e,r,n,x)}k.prototype.blocks=function(e,t,i){for(var n,r,a,o,s,c,p,u,l,f,d,h,m,v,g,b,y,x,w,E=this.fin?0:2048,_=this.h[0],S=this.h[1],k=this.h[2],T=this.h[3],A=this.h[4],O=this.h[5],C=this.h[6],R=this.h[7],B=this.h[8],N=this.h[9],U=this.r[0],P=this.r[1],L=this.r[2],I=this.r[3],D=this.r[4],j=this.r[5],H=this.r[6],M=this.r[7],q=this.r[8],F=this.r[9];i>=16;)f=l=0,f+=(_+=8191&(n=255&e[t+0]|(255&e[t+1])<<8))*U,f+=(S+=8191&(n>>>13|(r=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*F),f+=(k+=8191&(r>>>10|(a=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*q),f+=(T+=8191&(a>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*M),l=(f+=(A+=8191&(o>>>4|(s=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*H))>>>13,f&=8191,f+=(O+=s>>>1&8191)*(5*j),f+=(C+=8191&(s>>>14|(c=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*D),f+=(R+=8191&(c>>>11|(p=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*I),f+=(B+=8191&(p>>>8|(u=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*L),d=l+=(f+=(N+=u>>>5|E)*(5*P))>>>13,d+=_*P,d+=S*U,d+=k*(5*F),d+=T*(5*q),l=(d+=A*(5*M))>>>13,d&=8191,d+=O*(5*H),d+=C*(5*j),d+=R*(5*D),d+=B*(5*I),l+=(d+=N*(5*L))>>>13,d&=8191,h=l,h+=_*L,h+=S*P,h+=k*U,h+=T*(5*F),l=(h+=A*(5*q))>>>13,h&=8191,h+=O*(5*M),h+=C*(5*H),h+=R*(5*j),h+=B*(5*D),m=l+=(h+=N*(5*I))>>>13,m+=_*I,m+=S*L,m+=k*P,m+=T*U,l=(m+=A*(5*F))>>>13,m&=8191,m+=O*(5*q),m+=C*(5*M),m+=R*(5*H),m+=B*(5*j),v=l+=(m+=N*(5*D))>>>13,v+=_*D,v+=S*I,v+=k*L,v+=T*P,l=(v+=A*U)>>>13,v&=8191,v+=O*(5*F),v+=C*(5*q),v+=R*(5*M),v+=B*(5*H),g=l+=(v+=N*(5*j))>>>13,g+=_*j,g+=S*D,g+=k*I,g+=T*L,l=(g+=A*P)>>>13,g&=8191,g+=O*U,g+=C*(5*F),g+=R*(5*q),g+=B*(5*M),b=l+=(g+=N*(5*H))>>>13,b+=_*H,b+=S*j,b+=k*D,b+=T*I,l=(b+=A*L)>>>13,b&=8191,b+=O*P,b+=C*U,b+=R*(5*F),b+=B*(5*q),y=l+=(b+=N*(5*M))>>>13,y+=_*M,y+=S*H,y+=k*j,y+=T*D,l=(y+=A*I)>>>13,y&=8191,y+=O*L,y+=C*P,y+=R*U,y+=B*(5*F),x=l+=(y+=N*(5*q))>>>13,x+=_*q,x+=S*M,x+=k*H,x+=T*j,l=(x+=A*D)>>>13,x&=8191,x+=O*I,x+=C*L,x+=R*P,x+=B*U,w=l+=(x+=N*(5*F))>>>13,w+=_*F,w+=S*q,w+=k*M,w+=T*H,l=(w+=A*j)>>>13,w&=8191,w+=O*D,w+=C*I,w+=R*L,w+=B*P,_=f=8191&(l=(l=((l+=(w+=N*U)>>>13)<<2)+l|0)+(f&=8191)|0),S=d+=l>>>=13,k=h&=8191,T=m&=8191,A=v&=8191,O=g&=8191,C=b&=8191,R=y&=8191,B=x&=8191,N=w&=8191,t+=16,i-=16;this.h[0]=_,this.h[1]=S,this.h[2]=k,this.h[3]=T,this.h[4]=A,this.h[5]=O,this.h[6]=C,this.h[7]=R,this.h[8]=B,this.h[9]=N},k.prototype.finish=function(e,t){var i,n,r,a,o=new Uint16Array(10);if(this.leftover){for(a=this.leftover,this.buffer[a++]=1;a<16;a++)this.buffer[a]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(i=this.h[1]>>>13,this.h[1]&=8191,a=2;a<10;a++)this.h[a]+=i,i=this.h[a]>>>13,this.h[a]&=8191;for(this.h[0]+=5*i,i=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=i,i=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=i,o[0]=this.h[0]+5,i=o[0]>>>13,o[0]&=8191,a=1;a<10;a++)o[a]=this.h[a]+i,i=o[a]>>>13,o[a]&=8191;for(o[9]-=8192,n=(1^i)-1,a=0;a<10;a++)o[a]&=n;for(n=~n,a=0;a<10;a++)this.h[a]=this.h[a]&n|o[a];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),r=this.h[0]+this.pad[0],this.h[0]=65535&r,a=1;a<8;a++)r=(this.h[a]+this.pad[a]|0)+(r>>>16)|0,this.h[a]=65535&r;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},k.prototype.update=function(e,t,i){var n,r;if(this.leftover){for((r=16-this.leftover)>i&&(r=i),n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];if(i-=r,t+=r,this.leftover+=r,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(i>=16&&(r=i-i%16,this.blocks(e,t,r),t+=r,i-=r),i){for(n=0;n<i;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=i}};var $=O,W=C,X=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function V(e,t,i,n){for(var r,a,o,s,c,p,u,l,f,d,h,m,v,g,b,y,x,w,E,_,S,k,T,A,O,C,R=new Int32Array(16),B=new Int32Array(16),N=e[0],U=e[1],P=e[2],L=e[3],I=e[4],D=e[5],j=e[6],H=e[7],M=t[0],q=t[1],F=t[2],z=t[3],K=t[4],G=t[5],$=t[6],W=t[7],V=0;n>=128;){for(E=0;E<16;E++)_=8*E+V,R[E]=i[_+0]<<24|i[_+1]<<16|i[_+2]<<8|i[_+3],B[E]=i[_+4]<<24|i[_+5]<<16|i[_+6]<<8|i[_+7];for(E=0;E<80;E++)if(r=N,a=U,o=P,s=L,c=I,p=D,u=j,f=M,d=q,h=F,m=z,v=K,g=G,b=$,T=65535&(k=W),A=k>>>16,O=65535&(S=H),C=S>>>16,T+=65535&(k=(K>>>14|I<<18)^(K>>>18|I<<14)^(I>>>9|K<<23)),A+=k>>>16,O+=65535&(S=(I>>>14|K<<18)^(I>>>18|K<<14)^(K>>>9|I<<23)),C+=S>>>16,T+=65535&(k=K&G^~K&$),A+=k>>>16,O+=65535&(S=I&D^~I&j),C+=S>>>16,T+=65535&(k=X[2*E+1]),A+=k>>>16,O+=65535&(S=X[2*E]),C+=S>>>16,S=R[E%16],A+=(k=B[E%16])>>>16,O+=65535&S,C+=S>>>16,O+=(A+=(T+=65535&k)>>>16)>>>16,T=65535&(k=w=65535&T|A<<16),A=k>>>16,O=65535&(S=x=65535&O|(C+=O>>>16)<<16),C=S>>>16,T+=65535&(k=(M>>>28|N<<4)^(N>>>2|M<<30)^(N>>>7|M<<25)),A+=k>>>16,O+=65535&(S=(N>>>28|M<<4)^(M>>>2|N<<30)^(M>>>7|N<<25)),C+=S>>>16,A+=(k=M&q^M&F^q&F)>>>16,O+=65535&(S=N&U^N&P^U&P),C+=S>>>16,l=65535&(O+=(A+=(T+=65535&k)>>>16)>>>16)|(C+=O>>>16)<<16,y=65535&T|A<<16,T=65535&(k=m),A=k>>>16,O=65535&(S=s),C=S>>>16,A+=(k=w)>>>16,O+=65535&(S=x),C+=S>>>16,U=r,P=a,L=o,I=s=65535&(O+=(A+=(T+=65535&k)>>>16)>>>16)|(C+=O>>>16)<<16,D=c,j=p,H=u,N=l,q=f,F=d,z=h,K=m=65535&T|A<<16,G=v,$=g,W=b,M=y,E%16==15)for(_=0;_<16;_++)S=R[_],T=65535&(k=B[_]),A=k>>>16,O=65535&S,C=S>>>16,S=R[(_+9)%16],T+=65535&(k=B[(_+9)%16]),A+=k>>>16,O+=65535&S,C+=S>>>16,x=R[(_+1)%16],T+=65535&(k=((w=B[(_+1)%16])>>>1|x<<31)^(w>>>8|x<<24)^(w>>>7|x<<25)),A+=k>>>16,O+=65535&(S=(x>>>1|w<<31)^(x>>>8|w<<24)^x>>>7),C+=S>>>16,x=R[(_+14)%16],A+=(k=((w=B[(_+14)%16])>>>19|x<<13)^(x>>>29|w<<3)^(w>>>6|x<<26))>>>16,O+=65535&(S=(x>>>19|w<<13)^(w>>>29|x<<3)^x>>>6),C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,R[_]=65535&O|C<<16,B[_]=65535&T|A<<16;T=65535&(k=M),A=k>>>16,O=65535&(S=N),C=S>>>16,S=e[0],A+=(k=t[0])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[0]=N=65535&O|C<<16,t[0]=M=65535&T|A<<16,T=65535&(k=q),A=k>>>16,O=65535&(S=U),C=S>>>16,S=e[1],A+=(k=t[1])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[1]=U=65535&O|C<<16,t[1]=q=65535&T|A<<16,T=65535&(k=F),A=k>>>16,O=65535&(S=P),C=S>>>16,S=e[2],A+=(k=t[2])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[2]=P=65535&O|C<<16,t[2]=F=65535&T|A<<16,T=65535&(k=z),A=k>>>16,O=65535&(S=L),C=S>>>16,S=e[3],A+=(k=t[3])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[3]=L=65535&O|C<<16,t[3]=z=65535&T|A<<16,T=65535&(k=K),A=k>>>16,O=65535&(S=I),C=S>>>16,S=e[4],A+=(k=t[4])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[4]=I=65535&O|C<<16,t[4]=K=65535&T|A<<16,T=65535&(k=G),A=k>>>16,O=65535&(S=D),C=S>>>16,S=e[5],A+=(k=t[5])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[5]=D=65535&O|C<<16,t[5]=G=65535&T|A<<16,T=65535&(k=$),A=k>>>16,O=65535&(S=j),C=S>>>16,S=e[6],A+=(k=t[6])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[6]=j=65535&O|C<<16,t[6]=$=65535&T|A<<16,T=65535&(k=W),A=k>>>16,O=65535&(S=H),C=S>>>16,S=e[7],A+=(k=t[7])>>>16,O+=65535&S,C+=S>>>16,C+=(O+=(A+=(T+=65535&k)>>>16)>>>16)>>>16,e[7]=H=65535&O|C<<16,t[7]=W=65535&T|A<<16,V+=128,n-=128}return n}function Y(e,t,i){var n,r=new Int32Array(8),a=new Int32Array(8),o=new Uint8Array(256),s=i;for(r[0]=1779033703,r[1]=3144134277,r[2]=1013904242,r[3]=2773480762,r[4]=1359893119,r[5]=2600822924,r[6]=528734635,r[7]=1541459225,a[0]=4089235720,a[1]=2227873595,a[2]=4271175723,a[3]=1595750129,a[4]=2917565137,a[5]=725511199,a[6]=4215389547,a[7]=327033209,V(r,a,t,i),i%=128,n=0;n<i;n++)o[n]=t[s-i+n];for(o[i]=128,o[(i=256-128*(i<112?1:0))-9]=0,h(o,i-8,s/536870912|0,s<<3),V(r,a,o,i),n=0;n<8;n++)h(e,8*n,r[n],a[n]);return 0}function Q(e,i){var n=t(),r=t(),a=t(),o=t(),s=t(),c=t(),p=t(),l=t(),f=t();j(n,e[1],e[0]),j(f,i[1],i[0]),H(n,n,f),D(r,e[0],e[1]),D(f,i[0],i[1]),H(r,r,f),H(a,e[3],i[3]),H(a,a,u),H(o,e[2],i[2]),D(o,o,o),j(s,r,n),j(c,o,a),D(p,o,a),D(l,r,n),H(e[0],s,c),H(e[1],l,p),H(e[2],p,c),H(e[3],s,l)}function Z(e,t,i){var n;for(n=0;n<4;n++)N(e[n],t[n],i)}function J(e,i){var n=t(),r=t(),a=t();q(a,i[2]),H(n,i[0],a),H(r,i[1],a),U(e,r),e[31]^=L(n)<<7}function ee(e,t,i){var n,r;for(R(e[0],o),R(e[1],s),R(e[2],s),R(e[3],o),r=255;r>=0;--r)Z(e,t,n=i[r/8|0]>>(7&r)&1),Q(t,e),Q(e,e),Z(e,t,n)}function te(e,i){var n=[t(),t(),t(),t()];R(n[0],l),R(n[1],f),R(n[2],s),H(n[3],l,f),ee(e,n,i)}function ie(e,i,r){var a,o=new Uint8Array(64),s=[t(),t(),t(),t()];for(r||n(i,32),Y(o,i,32),o[0]&=248,o[31]&=127,o[31]|=64,te(s,o),J(e,s),a=0;a<32;a++)i[a+32]=e[a];return 0}var ne=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function re(e,t){var i,n,r,a;for(n=63;n>=32;--n){for(i=0,r=n-32,a=n-12;r<a;++r)t[r]+=i-16*t[n]*ne[r-(n-32)],i=t[r]+128>>8,t[r]-=256*i;t[r]+=i,t[n]=0}for(i=0,r=0;r<32;r++)t[r]+=i-(t[31]>>4)*ne[r],i=t[r]>>8,t[r]&=255;for(r=0;r<32;r++)t[r]-=i*ne[r];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function ae(e){var t,i=new Float64Array(64);for(t=0;t<64;t++)i[t]=e[t];for(t=0;t<64;t++)e[t]=0;re(e,i)}function oe(e,i,n,r){var a,o,s=new Uint8Array(64),c=new Uint8Array(64),p=new Uint8Array(64),u=new Float64Array(64),l=[t(),t(),t(),t()];Y(s,r,32),s[0]&=248,s[31]&=127,s[31]|=64;var f=n+64;for(a=0;a<n;a++)e[64+a]=i[a];for(a=0;a<32;a++)e[32+a]=s[32+a];for(Y(p,e.subarray(32),n+32),ae(p),te(l,p),J(e,l),a=32;a<64;a++)e[a]=r[a];for(Y(c,e,n+64),ae(c),a=0;a<64;a++)u[a]=0;for(a=0;a<32;a++)u[a]=p[a];for(a=0;a<32;a++)for(o=0;o<32;o++)u[a+o]+=c[a]*s[o];return re(e.subarray(32),u),f}function se(e,i,n,r){var a,c=new Uint8Array(32),u=new Uint8Array(64),l=[t(),t(),t(),t()],f=[t(),t(),t(),t()];if(n<64)return-1;if(function(e,i){var n=t(),r=t(),a=t(),c=t(),u=t(),l=t(),f=t();return R(e[2],s),I(e[1],i),M(a,e[1]),H(c,a,p),j(a,a,e[2]),D(c,e[2],c),M(u,c),M(l,u),H(f,l,u),H(n,f,a),H(n,n,c),function(e,i){var n,r=t();for(n=0;n<16;n++)r[n]=i[n];for(n=250;n>=0;n--)M(r,r),1!==n&&H(r,r,i);for(n=0;n<16;n++)e[n]=r[n]}(n,n),H(n,n,a),H(n,n,c),H(n,n,c),H(e[0],n,c),M(r,e[0]),H(r,r,c),P(r,a)&&H(e[0],e[0],d),M(r,e[0]),H(r,r,c),P(r,a)?-1:(L(e[0])===i[31]>>7&&j(e[0],o,e[0]),H(e[3],e[0],e[1]),0)}(f,r))return-1;for(a=0;a<n;a++)e[a]=i[a];for(a=0;a<32;a++)e[a+32]=r[a];if(Y(u,e,n),ae(u),ee(l,f,u),te(f,i.subarray(32)),Q(l,f),J(c,l),n-=64,g(i,0,c,0)){for(a=0;a<n;a++)e[a]=0;return-1}for(a=0;a<n;a++)e[a]=i[a+64];return n}var ce,pe=64,ue=32,le=64;function fe(e,t){if(32!==e.length)throw new Error("bad key size");if(24!==t.length)throw new Error("bad nonce size")}function de(){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function he(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:y,crypto_stream_xor:S,crypto_stream:_,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:E,crypto_onetimeauth:T,crypto_onetimeauth_verify:A,crypto_verify_16:v,crypto_verify_32:g,crypto_secretbox:O,crypto_secretbox_open:C,crypto_scalarmult:F,crypto_scalarmult_base:z,crypto_box_beforenm:G,crypto_box_afternm:$,crypto_box:function(e,t,i,n,r,a){var o=new Uint8Array(32);return G(o,r,a),$(e,t,i,n,o)},crypto_box_open:function(e,t,i,n,r,a){var o=new Uint8Array(32);return G(o,r,a),W(e,t,i,n,o)},crypto_box_keypair:K,crypto_hash:Y,crypto_sign:oe,crypto_sign_keypair:ie,crypto_sign_open:se,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:pe,crypto_sign_PUBLICKEYBYTES:ue,crypto_sign_SECRETKEYBYTES:le,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,i){de(e,t,i),fe(i,t);for(var n=new Uint8Array(32+e.length),r=new Uint8Array(n.length),a=0;a<e.length;a++)n[a+32]=e[a];return O(r,n,n.length,t,i),r.subarray(16)},e.secretbox.open=function(e,t,i){de(e,t,i),fe(i,t);for(var n=new Uint8Array(16+e.length),r=new Uint8Array(n.length),a=0;a<e.length;a++)n[a+16]=e[a];return!(n.length<32)&&0===C(r,n,n.length,t,i)&&r.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(de(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var i=new Uint8Array(32);return F(i,e,t),i},e.scalarMult.base=function(e){if(de(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return z(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,i,n,r){var a=e.box.before(n,r);return e.secretbox(t,i,a)},e.box.before=function(e,t){de(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var i=new Uint8Array(32);return G(i,e,t),i},e.box.after=e.secretbox,e.box.open=function(t,i,n,r){var a=e.box.before(n,r);return e.secretbox.open(t,i,a)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return K(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(de(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return z(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(de(e,t),t.length!==le)throw new Error("bad secret key size");var i=new Uint8Array(pe+e.length);return oe(i,e,e.length,t),i},e.sign.open=function(e,t){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(de(e,t),t.length!==ue)throw new Error("bad public key size");var i=new Uint8Array(e.length),n=se(i,e,e.length,t);if(n<0)return null;for(var r=new Uint8Array(n),a=0;a<r.length;a++)r[a]=i[a];return r},e.sign.detached=function(t,i){for(var n=e.sign(t,i),r=new Uint8Array(pe),a=0;a<r.length;a++)r[a]=n[a];return r},e.sign.detached.verify=function(e,t,i){if(de(e,t,i),t.length!==pe)throw new Error("bad signature size");if(i.length!==ue)throw new Error("bad public key size");var n,r=new Uint8Array(pe+e.length),a=new Uint8Array(pe+e.length);for(n=0;n<pe;n++)r[n]=t[n];for(n=0;n<e.length;n++)r[n+pe]=e[n];return se(a,r,r.length,i)>=0},e.sign.keyPair=function(){var e=new Uint8Array(ue),t=new Uint8Array(le);return ie(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(de(e),e.length!==le)throw new Error("bad secret key size");for(var t=new Uint8Array(ue),i=0;i<t.length;i++)t[i]=e[32+i];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(de(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(ue),i=new Uint8Array(le),n=0;n<32;n++)i[n]=e[n];return ie(t,i,!0),{publicKey:t,secretKey:i}},e.sign.publicKeyLength=ue,e.sign.secretKeyLength=le,e.sign.seedLength=32,e.sign.signatureLength=pe,e.hash=function(e){de(e);var t=new Uint8Array(64);return Y(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return de(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===m(e,0,t,0,e.length)},e.setPRNG=function(e){n=e},(ce="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&ce.getRandomValues?e.setPRNG((function(e,t){var i,n=new Uint8Array(t);for(i=0;i<t;i+=65536)ce.getRandomValues(n.subarray(i,i+Math.min(t-i,65536)));for(i=0;i<t;i++)e[i]=n[i];he(n)})):(ce=i(6417))&&ce.randomBytes&&e.setPRNG((function(e,t){var i,n=ce.randomBytes(t);for(i=0;i<t;i++)e[i]=n[i];he(n)}))}(e.exports?e.exports:self.nacl=self.nacl||{})},273:(e,t,i)=>{"use strict";var n=i(2577),r=i(983);function a(e,t){var i,n,r=t,a=p(e);if(!a)return!1;if(r&&!Array.isArray(r))for(r=new Array(arguments.length-1),i=0;i<r.length;i++)r[i]=arguments[i+1];if(!r||!r.length)return a;for(i=0;i<r.length;i++)if(c(s(n=r[i]),a))return"+"===n[0]||-1!==n.indexOf("*")?a:n;return!1}function o(e){return void 0!==e.headers["transfer-encoding"]||!isNaN(e.headers["content-length"])}function s(e){if("string"!=typeof e)return!1;switch(e){case"urlencoded":return"application/x-www-form-urlencoded";case"multipart":return"multipart/*"}return"+"===e[0]?"*/*"+e:-1===e.indexOf("/")?r.lookup(e):e}function c(e,t){if(!1===e)return!1;var i=t.split("/"),n=e.split("/");return 2===i.length&&2===n.length&&("*"===n[0]||n[0]===i[0])&&("*+"===n[1].substr(0,2)?n[1].length<=i[1].length+1&&n[1].substr(1)===i[1].substr(1-n[1].length):"*"===n[1]||n[1]===i[1])}function p(e){if(!e)return null;try{return function(e){var t=n.parse(e);return t.parameters=void 0,n.format(t)}(e)}catch(e){return null}}e.exports=function(e,t){var i=t;if(!o(e))return null;if(arguments.length>2){i=new Array(arguments.length-1);for(var n=0;n<i.length;n++)i[n]=arguments[n+1]}var r=e.headers["content-type"];return a(r,i)},e.exports.is=a,e.exports.hasBody=o,e.exports.normalize=s,e.exports.match=c},1666:(e,t)=>{var i,n,r,a=void 0,o=(i=Object.prototype.toString,n=Object.prototype.hasOwnProperty,{Class:function(e){return i.call(e).replace(/^\[object *|\]$/g,"")},HasProperty:function(e,t){return t in e},HasOwnProperty:function(e,t){return n.call(e,t)},IsCallable:function(e){return"function"==typeof e},ToInt32:function(e){return e>>0},ToUint32:function(e){return e>>>0}}),s=Math.LN2,c=Math.abs,p=Math.floor,u=Math.log,l=Math.min,f=Math.pow,d=Math.round;function h(e){if(m&&r){var t,i=m(e);for(t=0;t<i.length;t+=1)r(e,i[t],{value:e[i[t]],writable:!1,enumerable:!1,configurable:!1})}}r=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}()?Object.defineProperty:function(e,t,i){if(!e===Object(e))throw new TypeError("Object.defineProperty called on non-object");return o.HasProperty(i,"get")&&Object.prototype.__defineGetter__&&Object.prototype.__defineGetter__.call(e,t,i.get),o.HasProperty(i,"set")&&Object.prototype.__defineSetter__&&Object.prototype.__defineSetter__.call(e,t,i.set),o.HasProperty(i,"value")&&(e[t]=i.value),e};var m=Object.getOwnPropertyNames||function(e){if(e!==Object(e))throw new TypeError("Object.getOwnPropertyNames called on non-object");var t,i=[];for(t in e)o.HasOwnProperty(e,t)&&i.push(t);return i};function v(e){if(r){if(e.length>1e5)throw new RangeError("Array too large for polyfill");var t;for(t=0;t<e.length;t+=1)i(t)}function i(t){r(e,t,{get:function(){return e._getter(t)},set:function(i){e._setter(t,i)},enumerable:!0,configurable:!1})}}function g(e,t){var i=32-t;return e<<i>>i}function b(e,t){var i=32-t;return e<<i>>>i}function y(e){return[255&e]}function x(e){return g(e[0],8)}function w(e){return[255&e]}function E(e){return b(e[0],8)}function _(e){return[(e=d(Number(e)))<0?0:e>255?255:255&e]}function S(e){return[e>>8&255,255&e]}function k(e){return g(e[0]<<8|e[1],16)}function T(e){return[e>>8&255,255&e]}function A(e){return b(e[0]<<8|e[1],16)}function O(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]}function C(e){return g(e[0]<<24|e[1]<<16|e[2]<<8|e[3],32)}function R(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]}function B(e){return b(e[0]<<24|e[1]<<16|e[2]<<8|e[3],32)}function N(e,t,i){var n,r,a,o,d,h,m,v=(1<<t-1)-1;function g(e){var t=p(e),i=e-t;return i<.5?t:i>.5||t%2?t+1:t}for(e!=e?(r=(1<<t)-1,a=f(2,i-1),n=0):e===1/0||e===-1/0?(r=(1<<t)-1,a=0,n=e<0?1:0):0===e?(r=0,a=0,n=1/e==-1/0?1:0):(n=e<0,(e=c(e))>=f(2,1-v)?(r=l(p(u(e)/s),1023),(a=g(e/f(2,r)*f(2,i)))/f(2,i)>=2&&(r+=1,a=1),r>v?(r=(1<<t)-1,a=0):(r+=v,a-=f(2,i))):(r=0,a=g(e/f(2,1-v-i)))),d=[],o=i;o;o-=1)d.push(a%2?1:0),a=p(a/2);for(o=t;o;o-=1)d.push(r%2?1:0),r=p(r/2);for(d.push(n?1:0),d.reverse(),h=d.join(""),m=[];h.length;)m.push(parseInt(h.substring(0,8),2)),h=h.substring(8);return m}function U(e,t,i){var n,r,a,o,s,c,p,u,l=[];for(n=e.length;n;n-=1)for(a=e[n-1],r=8;r;r-=1)l.push(a%2?1:0),a>>=1;return l.reverse(),o=l.join(""),s=(1<<t-1)-1,c=parseInt(o.substring(0,1),2)?-1:1,p=parseInt(o.substring(1,1+t),2),u=parseInt(o.substring(1+t),2),p===(1<<t)-1?0!==u?NaN:c*(1/0):p>0?c*f(2,p-s)*(1+u/f(2,i)):0!==u?c*f(2,-(s-1))*(u/f(2,i)):c<0?-0:0}function P(e){return U(e,11,52)}function L(e){return N(e,11,52)}function I(e){return U(e,8,23)}function D(e){return N(e,8,23)}!function(){var e=function(e){if((e=o.ToInt32(e))<0)throw new RangeError("ArrayBuffer size is not a small enough positive integer");var t;for(this.byteLength=e,this._bytes=[],this._bytes.length=e,t=0;t<this.byteLength;t+=1)this._bytes[t]=0;h(this)};t.eT=t.eT||e;var i=function(){};function n(t,n,r){var s;return(s=function(t,i,n){var r,a,c,p;if(arguments.length&&"number"!=typeof arguments[0])if("object"==typeof arguments[0]&&arguments[0].constructor===s)for(r=arguments[0],this.length=r.length,this.byteLength=this.length*this.BYTES_PER_ELEMENT,this.buffer=new e(this.byteLength),this.byteOffset=0,c=0;c<this.length;c+=1)this._setter(c,r._getter(c));else if("object"!=typeof arguments[0]||arguments[0]instanceof e||"ArrayBuffer"===o.Class(arguments[0])){if("object"!=typeof arguments[0]||!(arguments[0]instanceof e||"ArrayBuffer"===o.Class(arguments[0])))throw new TypeError("Unexpected argument type(s)");if(this.buffer=t,this.byteOffset=o.ToUint32(i),this.byteOffset>this.buffer.byteLength)throw new RangeError("byteOffset out of range");if(this.byteOffset%this.BYTES_PER_ELEMENT)throw new RangeError("ArrayBuffer length minus the byteOffset is not a multiple of the element size.");if(arguments.length<3){if(this.byteLength=this.buffer.byteLength-this.byteOffset,this.byteLength%this.BYTES_PER_ELEMENT)throw new RangeError("length of buffer minus byteOffset not a multiple of the element size");this.length=this.byteLength/this.BYTES_PER_ELEMENT}else this.length=o.ToUint32(n),this.byteLength=this.length*this.BYTES_PER_ELEMENT;if(this.byteOffset+this.byteLength>this.buffer.byteLength)throw new RangeError("byteOffset and length reference an area beyond the end of the buffer")}else for(a=arguments[0],this.length=o.ToUint32(a.length),this.byteLength=this.length*this.BYTES_PER_ELEMENT,this.buffer=new e(this.byteLength),this.byteOffset=0,c=0;c<this.length;c+=1)p=a[c],this._setter(c,Number(p));else{if(this.length=o.ToInt32(arguments[0]),n<0)throw new RangeError("ArrayBufferView size is not a small enough positive integer");this.byteLength=this.length*this.BYTES_PER_ELEMENT,this.buffer=new e(this.byteLength),this.byteOffset=0}this.constructor=s,h(this),v(this)}).prototype=new i,s.prototype.BYTES_PER_ELEMENT=t,s.prototype._pack=n,s.prototype._unpack=r,s.BYTES_PER_ELEMENT=t,s.prototype._getter=function(e){if(arguments.length<1)throw new SyntaxError("Not enough arguments");if((e=o.ToUint32(e))>=this.length)return a;var t,i,n=[];for(t=0,i=this.byteOffset+e*this.BYTES_PER_ELEMENT;t<this.BYTES_PER_ELEMENT;t+=1,i+=1)n.push(this.buffer._bytes[i]);return this._unpack(n)},s.prototype.get=s.prototype._getter,s.prototype._setter=function(e,t){if(arguments.length<2)throw new SyntaxError("Not enough arguments");if((e=o.ToUint32(e))>=this.length)return a;var i,n,r=this._pack(t);for(i=0,n=this.byteOffset+e*this.BYTES_PER_ELEMENT;i<this.BYTES_PER_ELEMENT;i+=1,n+=1)this.buffer._bytes[n]=r[i]},s.prototype.set=function(e,t){if(arguments.length<1)throw new SyntaxError("Not enough arguments");var i,n,r,a,s,c,p,u,l,f;if("object"==typeof arguments[0]&&arguments[0].constructor===this.constructor){if(i=arguments[0],(r=o.ToUint32(arguments[1]))+i.length>this.length)throw new RangeError("Offset plus length of array is out of range");if(u=this.byteOffset+r*this.BYTES_PER_ELEMENT,l=i.length*this.BYTES_PER_ELEMENT,i.buffer===this.buffer){for(f=[],s=0,c=i.byteOffset;s<l;s+=1,c+=1)f[s]=i.buffer._bytes[c];for(s=0,p=u;s<l;s+=1,p+=1)this.buffer._bytes[p]=f[s]}else for(s=0,c=i.byteOffset,p=u;s<l;s+=1,c+=1,p+=1)this.buffer._bytes[p]=i.buffer._bytes[c]}else{if("object"!=typeof arguments[0]||void 0===arguments[0].length)throw new TypeError("Unexpected argument type(s)");if(n=arguments[0],a=o.ToUint32(n.length),(r=o.ToUint32(arguments[1]))+a>this.length)throw new RangeError("Offset plus length of array is out of range");for(s=0;s<a;s+=1)c=n[s],this._setter(r+s,Number(c))}},s.prototype.subarray=function(e,t){function i(e,t,i){return e<t?t:e>i?i:e}e=o.ToInt32(e),t=o.ToInt32(t),arguments.length<1&&(e=0),arguments.length<2&&(t=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e=i(e,0,this.length);var n=(t=i(t,0,this.length))-e;return n<0&&(n=0),new this.constructor(this.buffer,this.byteOffset+e*this.BYTES_PER_ELEMENT,n)},s}var r=n(1,y,x),s=n(1,w,E),c=n(1,_,E),p=n(2,S,k),u=n(2,T,A),l=n(4,O,C),f=n(4,R,B),d=n(4,D,I),m=n(8,L,P);t.iq=t.iq||r,t.U2=t.U2||s,t.we=t.we||c,t.M2=t.M2||p,t.HA=t.HA||u,t.ZV=t.ZV||l,t._R=t._R||f,t.$L=t.$L||d,t.I=t.I||m}(),function(){function e(e,t){return o.IsCallable(e.get)?e.get(t):e[t]}var i,n=(i=new t.HA([4660]),18===e(new t.U2(i.buffer),0)),r=function(e,i,n){if(0===arguments.length)e=new t.eT(0);else if(!(e instanceof t.eT||"ArrayBuffer"===o.Class(e)))throw new TypeError("TypeError");if(this.buffer=e||new t.eT(0),this.byteOffset=o.ToUint32(i),this.byteOffset>this.buffer.byteLength)throw new RangeError("byteOffset out of range");if(this.byteLength=arguments.length<3?this.buffer.byteLength-this.byteOffset:o.ToUint32(n),this.byteOffset+this.byteLength>this.buffer.byteLength)throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");h(this)};function a(i){return function(r,a){if((r=o.ToUint32(r))+i.BYTES_PER_ELEMENT>this.byteLength)throw new RangeError("Array index out of range");r+=this.byteOffset;var s,c=new t.U2(this.buffer,r,i.BYTES_PER_ELEMENT),p=[];for(s=0;s<i.BYTES_PER_ELEMENT;s+=1)p.push(e(c,s));return Boolean(a)===Boolean(n)&&p.reverse(),e(new i(new t.U2(p).buffer),0)}}function s(i){return function(r,a,s){if((r=o.ToUint32(r))+i.BYTES_PER_ELEMENT>this.byteLength)throw new RangeError("Array index out of range");var c,p=new i([a]),u=new t.U2(p.buffer),l=[];for(c=0;c<i.BYTES_PER_ELEMENT;c+=1)l.push(e(u,c));Boolean(s)===Boolean(n)&&l.reverse(),new t.U2(this.buffer,r,i.BYTES_PER_ELEMENT).set(l)}}r.prototype.getUint8=a(t.U2),r.prototype.getInt8=a(t.iq),r.prototype.getUint16=a(t.HA),r.prototype.getInt16=a(t.M2),r.prototype.getUint32=a(t._R),r.prototype.getInt32=a(t.ZV),r.prototype.getFloat32=a(t.$L),r.prototype.getFloat64=a(t.I),r.prototype.setUint8=s(t.U2),r.prototype.setInt8=s(t.iq),r.prototype.setUint16=s(t.HA),r.prototype.setInt16=s(t.M2),r.prototype.setUint32=s(t._R),r.prototype.setInt32=s(t.ZV),r.prototype.setFloat32=s(t.$L),r.prototype.setFloat64=s(t.I),t.VO=t.VO||r}()},8170:e=>{"use strict";e.exports=function(e){if(!e)throw new TypeError("argument stream is required");if("function"!=typeof e.unpipe){if(function(e){for(var t=e.listeners("data"),i=0;i<t.length;i++)if("ondata"===t[i].name)return!0;return!1}(e))for(var t,i=e.listeners("close"),n=0;n<i.length;n++)"cleanup"!==(t=i[n]).name&&"onclose"!==t.name||t.call(e)}else e.unpipe()}},1159:(e,t,i)=>{e.exports=i(1669).deprecate},1322:(e,t)=>{e.exports=function(e,t){if(e&&t)for(var i in t)e[i]=t[i];return e}},5181:e=>{"use strict";e.exports=function(e,t){if(!e||!e.getHeader||!e.setHeader)throw new TypeError("res argument is required");var n=e.getHeader("Vary")||"",r=Array.isArray(n)?n.join(", "):String(n);(n=i(r,t))&&e.setHeader("Vary",n)},e.exports.append=i;var t=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function i(e,i){if("string"!=typeof e)throw new TypeError("header argument is required");if(!i)throw new TypeError("field argument is required");for(var r=Array.isArray(i)?i:n(String(i)),a=0;a<r.length;a++)if(!t.test(r[a]))throw new TypeError("field argument contains an invalid header name");if("*"===e)return e;var o=e,s=n(e.toLowerCase());if(-1!==r.indexOf("*")||-1!==s.indexOf("*"))return"*";for(var c=0;c<r.length;c++){var p=r[c].toLowerCase();-1===s.indexOf(p)&&(s.push(p),o=o?o+", "+r[c]:r[c])}return o}function n(e){for(var t=0,i=[],n=0,r=0,a=e.length;r<a;r++)switch(e.charCodeAt(r)){case 32:n===t&&(n=t=r+1);break;case 44:i.push(e.substring(n,t)),n=t=r+1;break;default:t=r+1}return i.push(e.substring(n,t)),i}},2357:e=>{"use strict";e.exports=require("assert")},4293:e=>{"use strict";e.exports=require("buffer")},3129:e=>{"use strict";e.exports=require("child_process")},6417:e=>{"use strict";e.exports=require("crypto")},881:e=>{"use strict";e.exports=require("dns")},8614:e=>{"use strict";e.exports=require("events")},5747:e=>{"use strict";e.exports=require("fs")},8605:e=>{"use strict";e.exports=require("http")},7211:e=>{"use strict";e.exports=require("https")},1631:e=>{"use strict";e.exports=require("net")},5622:e=>{"use strict";e.exports=require("path")},1191:e=>{"use strict";e.exports=require("querystring")},2413:e=>{"use strict";e.exports=require("stream")},4304:e=>{"use strict";e.exports=require("string_decoder")},3867:e=>{"use strict";e.exports=require("tty")},8835:e=>{"use strict";e.exports=require("url")},1669:e=>{"use strict";e.exports=require("util")},8761:e=>{"use strict";e.exports=require("zlib")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var i=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(i.exports,i,i.exports,__webpack_require__),i.loaded=!0,i.exports}__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var __webpack_exports__=__webpack_require__(3607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,